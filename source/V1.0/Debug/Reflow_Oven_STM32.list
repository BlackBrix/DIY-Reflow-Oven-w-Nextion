
Reflow_Oven_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  080097b8  080097b8  000197b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c28  08009c28  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009c28  08009c28  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c28  08009c28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011bc  200001e8  08009e18  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  08009e18  000213a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0b3  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024c2  00000000  00000000  0002f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fe0  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb8  00000000  00000000  00032768  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001891d  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c4fe  00000000  00000000  0004bf3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d94b  00000000  00000000  0005843b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  000e5d86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  000e5e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000005c  00000000  00000000  000eae8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080097a0 	.word	0x080097a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080097a0 	.word	0x080097a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <GetPage>:
#include "FLASH_PAGE.h"
#include "string.h"
#include "stdio.h"

static uint32_t GetPage(uint32_t Address)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e018      	b.n	8001190 <GetPage+0x40>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001164:	3301      	adds	r3, #1
 8001166:	029b      	lsls	r3, r3, #10
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4293      	cmp	r3, r2
 800116e:	d20c      	bcs.n	800118a <GetPage+0x3a>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	461a      	mov	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4293      	cmp	r3, r2
 800117e:	d304      	bcc.n	800118a <GetPage+0x3a>
	  {
		  return (0x08000000 + 1024*indx);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	e007      	b.n	800119a <GetPage+0x4a>
  for (int indx=0; indx<128; indx++)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b7f      	cmp	r3, #127	; 0x7f
 8001194:	dde3      	ble.n	800115e <GetPage+0xe>
	  }
  }

  return -1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t * DATA_32, uint32_t NumberWords)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24

	int numberofwords = NumberWords;//(strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	623b      	str	r3, [r7, #32]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80011b8:	f002 f8a4 	bl	8003304 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f7ff ffc7 	bl	8001150 <GetPage>
 80011c2:	61f8      	str	r0, [r7, #28]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f7ff ffbd 	bl	8001150 <GetPage>
 80011d6:	6178      	str	r0, [r7, #20]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <Flash_Write_Data+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <Flash_Write_Data+0xb4>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	0a9b      	lsrs	r3, r3, #10
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <Flash_Write_Data+0xb4>)
 80011f0:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	4817      	ldr	r0, [pc, #92]	; (8001258 <Flash_Write_Data+0xb4>)
 80011fa:	f002 f975 	bl	80034e8 <HAL_FLASHEx_Erase>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01e      	beq.n	8001242 <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001204:	f002 f8b4 	bl	8003370 <HAL_FLASH_GetError>
 8001208:	4603      	mov	r3, r0
 800120a:	e021      	b.n	8001250 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	4413      	add	r3, r2
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f04f 0400 	mov.w	r4, #0
 800121a:	461a      	mov	r2, r3
 800121c:	4623      	mov	r3, r4
 800121e:	68f9      	ldr	r1, [r7, #12]
 8001220:	2002      	movs	r0, #2
 8001222:	f001 ffff 	bl	8003224 <HAL_FLASH_Program>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d106      	bne.n	800123a <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3304      	adds	r3, #4
 8001230:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	3301      	adds	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
 8001238:	e003      	b.n	8001242 <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800123a:	f002 f899 	bl	8003370 <HAL_FLASH_GetError>
 800123e:	4603      	mov	r3, r0
 8001240:	e006      	b.n	8001250 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 8001242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbe0      	blt.n	800120c <Flash_Write_Data+0x68>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800124a:	f002 f881 	bl	8003350 <HAL_FLASH_Lock>

	   return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	20000204 	.word	0x20000204

0800125c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001276:	d103      	bne.n	8001280 <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
			break;
 800127e:	e006      	b.n	800128e <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3304      	adds	r3, #4
 8001284:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 800128c:	e7eb      	b.n	8001266 <Flash_Read_Data+0xa>
	}
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6839      	ldr	r1, [r7, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fd6b 	bl	8000d84 <__aeabi_fmul>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff fd61 	bl	8000d84 <__aeabi_fmul>
 80012c2:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 80012c4:	4619      	mov	r1, r3
 80012c6:	4620      	mov	r0, r4
 80012c8:	f7ff fc54 	bl	8000b74 <__addsf3>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	4619      	mov	r1, r3
 80012da:	4610      	mov	r0, r2
 80012dc:	f7ff fd52 	bl	8000d84 <__aeabi_fmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4619      	mov	r1, r3
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff fc45 	bl	8000b74 <__addsf3>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 80012f2:	4619      	mov	r1, r3
 80012f4:	4610      	mov	r0, r2
 80012f6:	f7ff fc3d 	bl	8000b74 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001312:	68fb      	ldr	r3, [r7, #12]

  }
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bd90      	pop	{r4, r7, pc}

0800131c <SaveParameters>:
//for ( i = 0; i < sizeof(ReflowTemplate); i++, data_p++, flash_address++ )
//    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, *data_p);
//HAL_FLASH_Lock();
//}

void SaveParameters(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x0801FC00, &ReflowParameters, 9);
 8001320:	2209      	movs	r2, #9
 8001322:	4903      	ldr	r1, [pc, #12]	; (8001330 <SaveParameters+0x14>)
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <SaveParameters+0x18>)
 8001326:	f7ff ff3d 	bl	80011a4 <Flash_Write_Data>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000129c 	.word	0x2000129c
 8001334:	0801fc00 	.word	0x0801fc00

08001338 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8001340:	2205      	movs	r2, #5
 8001342:	4905      	ldr	r1, [pc, #20]	; (8001358 <HAL_UART_RxCpltCallback+0x20>)
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <HAL_UART_RxCpltCallback+0x24>)
 8001346:	f004 fbaf 	bl	8005aa8 <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_RxCpltCallback+0x28>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000004 	.word	0x20000004
 800135c:	200002bc 	.word	0x200002bc
 8001360:	2000021c 	.word	0x2000021c

08001364 <NEXTION_SendString>:

void NEXTION_SendString (char *ID, char *string){
 8001364:	b580      	push	{r7, lr}
 8001366:	b090      	sub	sp, #64	; 0x40
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 800136e:	f107 0008 	add.w	r0, r7, #8
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	490b      	ldr	r1, [pc, #44]	; (80013a4 <NEXTION_SendString+0x40>)
 8001378:	f005 fb9a 	bl	8006ab0 <siprintf>
 800137c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001380:	b29a      	uxth	r2, r3
 8001382:	f107 0108 	add.w	r1, r7, #8
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	4807      	ldr	r0, [pc, #28]	; (80013a8 <NEXTION_SendString+0x44>)
 800138c:	f004 fafa 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	2203      	movs	r2, #3
 8001394:	4905      	ldr	r1, [pc, #20]	; (80013ac <NEXTION_SendString+0x48>)
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <NEXTION_SendString+0x44>)
 8001398:	f004 faf4 	bl	8005984 <HAL_UART_Transmit>

}
 800139c:	bf00      	nop
 800139e:	3740      	adds	r7, #64	; 0x40
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	080097b8 	.word	0x080097b8
 80013a8:	200002bc 	.word	0x200002bc
 80013ac:	20000000 	.word	0x20000000

080013b0 <NEXTION_SendFloat>:

void NEXTION_SendFloat (char *ID, float32_t number){
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b093      	sub	sp, #76	; 0x4c
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	f107 0008 	add.w	r0, r7, #8
 80013c8:	e9cd 3400 	strd	r3, r4, [sp]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	490b      	ldr	r1, [pc, #44]	; (80013fc <NEXTION_SendFloat+0x4c>)
 80013d0:	f005 fb6e 	bl	8006ab0 <siprintf>
 80013d4:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80013d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f107 0108 	add.w	r1, r7, #8
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <NEXTION_SendFloat+0x50>)
 80013e4:	f004 face 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	2203      	movs	r2, #3
 80013ec:	4905      	ldr	r1, [pc, #20]	; (8001404 <NEXTION_SendFloat+0x54>)
 80013ee:	4804      	ldr	r0, [pc, #16]	; (8001400 <NEXTION_SendFloat+0x50>)
 80013f0:	f004 fac8 	bl	8005984 <HAL_UART_Transmit>
}
 80013f4:	bf00      	nop
 80013f6:	3744      	adds	r7, #68	; 0x44
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	080097c4 	.word	0x080097c4
 8001400:	200002bc 	.word	0x200002bc
 8001404:	20000000 	.word	0x20000000

08001408 <NEXTION_SenduInt>:

void NEXTION_SenduInt (char *ID, uint32_t number){
 8001408:	b580      	push	{r7, lr}
 800140a:	b090      	sub	sp, #64	; 0x40
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 8001412:	f107 0008 	add.w	r0, r7, #8
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	490b      	ldr	r1, [pc, #44]	; (8001448 <NEXTION_SenduInt+0x40>)
 800141c:	f005 fb48 	bl	8006ab0 <siprintf>
 8001420:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001424:	b29a      	uxth	r2, r3
 8001426:	f107 0108 	add.w	r1, r7, #8
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <NEXTION_SenduInt+0x44>)
 8001430:	f004 faa8 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001434:	2364      	movs	r3, #100	; 0x64
 8001436:	2203      	movs	r2, #3
 8001438:	4905      	ldr	r1, [pc, #20]	; (8001450 <NEXTION_SenduInt+0x48>)
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <NEXTION_SenduInt+0x44>)
 800143c:	f004 faa2 	bl	8005984 <HAL_UART_Transmit>
}
 8001440:	bf00      	nop
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	080097d4 	.word	0x080097d4
 800144c:	200002bc 	.word	0x200002bc
 8001450:	20000000 	.word	0x20000000

08001454 <NEXTION_CMD>:

void NEXTION_CMD (char *string){
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7fe fe77 	bl	8000150 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <NEXTION_CMD+0x34>)
 800146e:	f004 fa89 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	2203      	movs	r2, #3
 8001476:	4905      	ldr	r1, [pc, #20]	; (800148c <NEXTION_CMD+0x38>)
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <NEXTION_CMD+0x34>)
 800147a:	f004 fa83 	bl	8005984 <HAL_UART_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200002bc 	.word	0x200002bc
 800148c:	20000000 	.word	0x20000000

08001490 <NextionDrawDot>:
	NEXTION_SendFloat("t4",ReflowParameters.secondHeatUpRate);
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}

void NextionDrawDot(uint32_t x, uint32_t y){
 8001490:	b580      	push	{r7, lr}
 8001492:	b090      	sub	sp, #64	; 0x40
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,BLUE", x, y);
 800149a:	f107 0008 	add.w	r0, r7, #8
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	490b      	ldr	r1, [pc, #44]	; (80014d0 <NextionDrawDot+0x40>)
 80014a4:	f005 fb04 	bl	8006ab0 <siprintf>
 80014a8:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0108 	add.w	r1, r7, #8
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <NextionDrawDot+0x44>)
 80014b8:	f004 fa64 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	2203      	movs	r2, #3
 80014c0:	4905      	ldr	r1, [pc, #20]	; (80014d8 <NextionDrawDot+0x48>)
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <NextionDrawDot+0x44>)
 80014c4:	f004 fa5e 	bl	8005984 <HAL_UART_Transmit>
}
 80014c8:	bf00      	nop
 80014ca:	3740      	adds	r7, #64	; 0x40
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	080097fc 	.word	0x080097fc
 80014d4:	200002bc 	.word	0x200002bc
 80014d8:	20000000 	.word	0x20000000

080014dc <NextionDrawTemp>:

void NextionDrawTemp(uint32_t x, uint32_t y){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b090      	sub	sp, #64	; 0x40
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80014e6:	f107 0008 	add.w	r0, r7, #8
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	490b      	ldr	r1, [pc, #44]	; (800151c <NextionDrawTemp+0x40>)
 80014f0:	f005 fade 	bl	8006ab0 <siprintf>
 80014f4:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f107 0108 	add.w	r1, r7, #8
 80014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <NextionDrawTemp+0x44>)
 8001504:	f004 fa3e 	bl	8005984 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2203      	movs	r2, #3
 800150c:	4905      	ldr	r1, [pc, #20]	; (8001524 <NextionDrawTemp+0x48>)
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <NextionDrawTemp+0x44>)
 8001510:	f004 fa38 	bl	8005984 <HAL_UART_Transmit>
}
 8001514:	bf00      	nop
 8001516:	3740      	adds	r7, #64	; 0x40
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	08009810 	.word	0x08009810
 8001520:	200002bc 	.word	0x200002bc
 8001524:	20000000 	.word	0x20000000

08001528 <HandleKeyPad>:



float32_t HandleKeyPad() {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	e007      	b.n	8001544 <HandleKeyPad+0x1c>
		input[i] = 0;
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <HandleKeyPad+0xb0>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3301      	adds	r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b13      	cmp	r3, #19
 8001548:	ddf4      	ble.n	8001534 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 800154e:	4923      	ldr	r1, [pc, #140]	; (80015dc <HandleKeyPad+0xb4>)
 8001550:	4823      	ldr	r0, [pc, #140]	; (80015e0 <HandleKeyPad+0xb8>)
 8001552:	f7ff ff07 	bl	8001364 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HandleKeyPad+0xbc>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 800155c:	e026      	b.n	80015ac <HandleKeyPad+0x84>

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 800155e:	2205      	movs	r2, #5
 8001560:	4921      	ldr	r1, [pc, #132]	; (80015e8 <HandleKeyPad+0xc0>)
 8001562:	4822      	ldr	r0, [pc, #136]	; (80015ec <HandleKeyPad+0xc4>)
 8001564:	f005 fac4 	bl	8006af0 <strncmp>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HandleKeyPad+0x4a>
				return 9999;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HandleKeyPad+0xc8>)
 8001570:	e02e      	b.n	80015d0 <HandleKeyPad+0xa8>
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8001572:	2205      	movs	r2, #5
 8001574:	491f      	ldr	r1, [pc, #124]	; (80015f4 <HandleKeyPad+0xcc>)
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <HandleKeyPad+0xc4>)
 8001578:	f005 faba 	bl	8006af0 <strncmp>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HandleKeyPad+0x5e>
				return 8888;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HandleKeyPad+0xd0>)
 8001584:	e024      	b.n	80015d0 <HandleKeyPad+0xa8>


		if (UART_Recieved_Flag == 1) {
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HandleKeyPad+0xbc>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d10e      	bne.n	80015ac <HandleKeyPad+0x84>
			input[index] = UART_Recieved_Data[4];
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	4a16      	ldr	r2, [pc, #88]	; (80015ec <HandleKeyPad+0xc4>)
 8001592:	7911      	ldrb	r1, [r2, #4]
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HandleKeyPad+0xb0>)
 8001596:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HandleKeyPad+0xbc>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
			index++;
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	3301      	adds	r3, #1
 80015a2:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <HandleKeyPad+0xb0>)
 80015a6:	480e      	ldr	r0, [pc, #56]	; (80015e0 <HandleKeyPad+0xb8>)
 80015a8:	f7ff fedc 	bl	8001364 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 80015ac:	2205      	movs	r2, #5
 80015ae:	4913      	ldr	r1, [pc, #76]	; (80015fc <HandleKeyPad+0xd4>)
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <HandleKeyPad+0xc4>)
 80015b2:	f005 fa9d 	bl	8006af0 <strncmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1d0      	bne.n	800155e <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 80015bc:	4806      	ldr	r0, [pc, #24]	; (80015d8 <HandleKeyPad+0xb0>)
 80015be:	f004 fdf1 	bl	80061a4 <atof>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	4618      	mov	r0, r3
 80015c8:	4621      	mov	r1, r4
 80015ca:	f7ff fa7d 	bl	8000ac8 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	200002a4 	.word	0x200002a4
 80015dc:	08009824 	.word	0x08009824
 80015e0:	08009828 	.word	0x08009828
 80015e4:	2000021c 	.word	0x2000021c
 80015e8:	0800982c 	.word	0x0800982c
 80015ec:	20000004 	.word	0x20000004
 80015f0:	461c3c00 	.word	0x461c3c00
 80015f4:	08009834 	.word	0x08009834
 80015f8:	460ae000 	.word	0x460ae000
 80015fc:	0800983c 	.word	0x0800983c

08001600 <Update_Page_3>:


void Update_Page_3() {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 8001606:	4a20      	ldr	r2, [pc, #128]	; (8001688 <Update_Page_3+0x88>)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160e:	6018      	str	r0, [r3, #0]
 8001610:	3304      	adds	r3, #4
 8001612:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	e00b      	b.n	8001632 <Update_Page_3+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 800161a:	1d3a      	adds	r2, r7, #4
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	7819      	ldrb	r1, [r3, #0]
 8001622:	4a1a      	ldr	r2, [pc, #104]	; (800168c <Update_Page_3+0x8c>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	460a      	mov	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b04      	cmp	r3, #4
 8001636:	ddf0      	ble.n	800161a <Update_Page_3+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <Update_Page_3+0x90>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4619      	mov	r1, r3
 800163e:	4815      	ldr	r0, [pc, #84]	; (8001694 <Update_Page_3+0x94>)
 8001640:	f7ff feb6 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <Update_Page_3+0x90>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	4619      	mov	r1, r3
 800164a:	4813      	ldr	r0, [pc, #76]	; (8001698 <Update_Page_3+0x98>)
 800164c:	f7ff fedc 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <Update_Page_3+0x90>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <Update_Page_3+0x9c>)
 8001658:	f7ff fed6 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <Update_Page_3+0x90>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4619      	mov	r1, r3
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <Update_Page_3+0xa0>)
 8001664:	f7ff fea4 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <Update_Page_3+0x90>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <Update_Page_3+0xa4>)
 8001670:	f7ff feca 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <Update_Page_3+0x90>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <Update_Page_3+0xa8>)
 800167c:	f7ff fec4 	bl	8001408 <NEXTION_SenduInt>

}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08009844 	.word	0x08009844
 800168c:	20000004 	.word	0x20000004
 8001690:	2000129c 	.word	0x2000129c
 8001694:	08009828 	.word	0x08009828
 8001698:	080097e4 	.word	0x080097e4
 800169c:	080097e8 	.word	0x080097e8
 80016a0:	080097ec 	.word	0x080097ec
 80016a4:	080097f0 	.word	0x080097f0
 80016a8:	080097f4 	.word	0x080097f4

080016ac <Update_Page_0>:

void Update_Page_0() {
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 80016b2:	4a3c      	ldr	r2, [pc, #240]	; (80017a4 <Update_Page_0+0xf8>)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ba:	6018      	str	r0, [r3, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e00b      	b.n	80016de <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80016c6:	1d3a      	adds	r2, r7, #4
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	4413      	add	r3, r2
 80016cc:	7819      	ldrb	r1, [r3, #0]
 80016ce:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <Update_Page_0+0xfc>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	3301      	adds	r3, #1
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	ddf0      	ble.n	80016c6 <Update_Page_0+0x1a>
	}

	float32_t dx = 0.625/4; //275px / 400s
 80016e4:	4b31      	ldr	r3, [pc, #196]	; (80017ac <Update_Page_0+0x100>)
 80016e6:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.8333; //200px / 240 Grad
 80016e8:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <Update_Page_0+0x104>)
 80016ea:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 35;
 80016ec:	2323      	movs	r3, #35	; 0x23
 80016ee:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 230;
 80016f0:	23e6      	movs	r3, #230	; 0xe6
 80016f2:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <Update_Page_0+0x108>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d121      	bne.n	8001740 <Update_Page_0+0x94>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));
 80016fc:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <Update_Page_0+0x10c>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fae7 	bl	8000cd4 <__aeabi_ui2f>
 8001706:	4603      	mov	r3, r0
 8001708:	69b9      	ldr	r1, [r7, #24]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fb3a 	bl	8000d84 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fcfc 	bl	8001110 <__aeabi_f2uiz>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	18d4      	adds	r4, r2, r3
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <Update_Page_0+0x110>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6979      	ldr	r1, [r7, #20]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fb2d 	bl	8000d84 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fcef 	bl	8001110 <__aeabi_f2uiz>
 8001732:	4602      	mov	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	4619      	mov	r1, r3
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fece 	bl	80014dc <NextionDrawTemp>



	NEXTION_SendFloat("t0", temp);
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <Update_Page_0+0x110>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	481e      	ldr	r0, [pc, #120]	; (80017c0 <Update_Page_0+0x114>)
 8001748:	f7ff fe32 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <Update_Page_0+0x118>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4619      	mov	r1, r3
 8001752:	481d      	ldr	r0, [pc, #116]	; (80017c8 <Update_Page_0+0x11c>)
 8001754:	f7ff fe2c 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <Update_Page_0+0x118>)
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	4619      	mov	r1, r3
 800175e:	481b      	ldr	r0, [pc, #108]	; (80017cc <Update_Page_0+0x120>)
 8001760:	f7ff fe52 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <Update_Page_0+0x118>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	4619      	mov	r1, r3
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <Update_Page_0+0x124>)
 800176c:	f7ff fe4c 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <Update_Page_0+0x118>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4619      	mov	r1, r3
 8001776:	4817      	ldr	r0, [pc, #92]	; (80017d4 <Update_Page_0+0x128>)
 8001778:	f7ff fe1a 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <Update_Page_0+0x118>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4619      	mov	r1, r3
 8001782:	4815      	ldr	r0, [pc, #84]	; (80017d8 <Update_Page_0+0x12c>)
 8001784:	f7ff fe40 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <Update_Page_0+0x118>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	4619      	mov	r1, r3
 800178e:	4813      	ldr	r0, [pc, #76]	; (80017dc <Update_Page_0+0x130>)
 8001790:	f7ff fe3a 	bl	8001408 <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 8001794:	4912      	ldr	r1, [pc, #72]	; (80017e0 <Update_Page_0+0x134>)
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <Update_Page_0+0x138>)
 8001798:	f7ff fde4 	bl	8001364 <NEXTION_SendString>

}
 800179c:	bf00      	nop
 800179e:	3724      	adds	r7, #36	; 0x24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	08009850 	.word	0x08009850
 80017a8:	20000004 	.word	0x20000004
 80017ac:	3e200000 	.word	0x3e200000
 80017b0:	3f555326 	.word	0x3f555326
 80017b4:	20000214 	.word	0x20000214
 80017b8:	20000216 	.word	0x20000216
 80017bc:	200002b8 	.word	0x200002b8
 80017c0:	08009828 	.word	0x08009828
 80017c4:	2000129c 	.word	0x2000129c
 80017c8:	080097e4 	.word	0x080097e4
 80017cc:	080097ec 	.word	0x080097ec
 80017d0:	080097e8 	.word	0x080097e8
 80017d4:	080097f0 	.word	0x080097f0
 80017d8:	080097f8 	.word	0x080097f8
 80017dc:	080097f4 	.word	0x080097f4
 80017e0:	20001364 	.word	0x20001364
 80017e4:	0800984c 	.word	0x0800984c

080017e8 <Update_Page_2>:

void Update_Page_2() {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 80017ee:	4a17      	ldr	r2, [pc, #92]	; (800184c <Update_Page_2+0x64>)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f6:	6018      	str	r0, [r3, #0]
 80017f8:	3304      	adds	r3, #4
 80017fa:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e00b      	b.n	800181a <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	7819      	ldrb	r1, [r3, #0]
 800180a:	4a11      	ldr	r2, [pc, #68]	; (8001850 <Update_Page_2+0x68>)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	460a      	mov	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b04      	cmp	r3, #4
 800181e:	ddf0      	ble.n	8001802 <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <Update_Page_2+0x6c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	480c      	ldr	r0, [pc, #48]	; (8001858 <Update_Page_2+0x70>)
 8001828:	f7ff fdc2 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <Update_Page_2+0x6c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4619      	mov	r1, r3
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <Update_Page_2+0x74>)
 8001834:	f7ff fdbc 	bl	80013b0 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <Update_Page_2+0x6c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4619      	mov	r1, r3
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <Update_Page_2+0x78>)
 8001840:	f7ff fdb6 	bl	80013b0 <NEXTION_SendFloat>
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	08009858 	.word	0x08009858
 8001850:	20000004 	.word	0x20000004
 8001854:	2000129c 	.word	0x2000129c
 8001858:	08009828 	.word	0x08009828
 800185c:	080097e4 	.word	0x080097e4
 8001860:	080097e8 	.word	0x080097e8
 8001864:	00000000 	.word	0x00000000

08001868 <HandleGui>:



void HandleGui(){
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	; 0x90
 800186c:	af00      	add	r7, sp, #0
	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 800186e:	2205      	movs	r2, #5
 8001870:	49b8      	ldr	r1, [pc, #736]	; (8001b54 <HandleGui+0x2ec>)
 8001872:	48b9      	ldr	r0, [pc, #740]	; (8001b58 <HandleGui+0x2f0>)
 8001874:	f005 f93c 	bl	8006af0 <strncmp>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HandleGui+0x1a>
			Update_Page_0();
 800187e:	f7ff ff15 	bl	80016ac <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 8001882:	2205      	movs	r2, #5
 8001884:	49b5      	ldr	r1, [pc, #724]	; (8001b5c <HandleGui+0x2f4>)
 8001886:	48b4      	ldr	r0, [pc, #720]	; (8001b58 <HandleGui+0x2f0>)
 8001888:	f005 f932 	bl	8006af0 <strncmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HandleGui+0x2e>
			Update_Page_3();
 8001892:	f7ff feb5 	bl	8001600 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 8001896:	2205      	movs	r2, #5
 8001898:	49b1      	ldr	r1, [pc, #708]	; (8001b60 <HandleGui+0x2f8>)
 800189a:	48af      	ldr	r0, [pc, #700]	; (8001b58 <HandleGui+0x2f0>)
 800189c:	f005 f928 	bl	8006af0 <strncmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HandleGui+0x46>
			startReflow();
 80018a6:	f000 fe73 	bl	8002590 <startReflow>
			Update_Page_0();
 80018aa:	f7ff feff 	bl	80016ac <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80018ae:	2205      	movs	r2, #5
 80018b0:	49ac      	ldr	r1, [pc, #688]	; (8001b64 <HandleGui+0x2fc>)
 80018b2:	48a9      	ldr	r0, [pc, #676]	; (8001b58 <HandleGui+0x2f0>)
 80018b4:	f005 f91c 	bl	8006af0 <strncmp>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <HandleGui+0x5e>
			stopReflow();
 80018be:	f000 fe79 	bl	80025b4 <stopReflow>
			Update_Page_0();
 80018c2:	f7ff fef3 	bl	80016ac <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80018c6:	2205      	movs	r2, #5
 80018c8:	49a4      	ldr	r1, [pc, #656]	; (8001b5c <HandleGui+0x2f4>)
 80018ca:	48a3      	ldr	r0, [pc, #652]	; (8001b58 <HandleGui+0x2f0>)
 80018cc:	f005 f910 	bl	8006af0 <strncmp>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HandleGui+0x72>
			Update_Page_3();
 80018d6:	f7ff fe93 	bl	8001600 <Update_Page_3>
			}


	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 80018da:	2205      	movs	r2, #5
 80018dc:	49a2      	ldr	r1, [pc, #648]	; (8001b68 <HandleGui+0x300>)
 80018de:	489e      	ldr	r0, [pc, #632]	; (8001b58 <HandleGui+0x2f0>)
 80018e0:	f005 f906 	bl	8006af0 <strncmp>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HandleGui+0x86>
		Update_Page_2();
 80018ea:	f7ff ff7d 	bl	80017e8 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 80018ee:	2205      	movs	r2, #5
 80018f0:	499e      	ldr	r1, [pc, #632]	; (8001b6c <HandleGui+0x304>)
 80018f2:	4899      	ldr	r0, [pc, #612]	; (8001b58 <HandleGui+0x2f0>)
 80018f4:	f005 f8fc 	bl	8006af0 <strncmp>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d152      	bne.n	80019a4 <HandleGui+0x13c>
			  float32_t Output =0;
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8001906:	f7ff fe0f 	bl	8001528 <HandleKeyPad>
 800190a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 800190e:	e024      	b.n	800195a <HandleGui+0xf2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001910:	4a97      	ldr	r2, [pc, #604]	; (8001b70 <HandleGui+0x308>)
 8001912:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800191a:	6018      	str	r0, [r3, #0]
 800191c:	3304      	adds	r3, #4
 800191e:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001926:	e010      	b.n	800194a <HandleGui+0xe2>
						UART_Recieved_Data[i]=defaultUart[i];
 8001928:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800192c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001930:	4413      	add	r3, r2
 8001932:	7819      	ldrb	r1, [r3, #0]
 8001934:	4a88      	ldr	r2, [pc, #544]	; (8001b58 <HandleGui+0x2f0>)
 8001936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800193a:	4413      	add	r3, r2
 800193c:	460a      	mov	r2, r1
 800193e:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001940:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001944:	3301      	adds	r3, #1
 8001946:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800194a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800194e:	2b04      	cmp	r3, #4
 8001950:	ddea      	ble.n	8001928 <HandleGui+0xc0>
					}
				  Output = HandleKeyPad();
 8001952:	f7ff fde9 	bl	8001528 <HandleKeyPad>
 8001956:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 800195a:	4986      	ldr	r1, [pc, #536]	; (8001b74 <HandleGui+0x30c>)
 800195c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001960:	f7ff fba4 	bl	80010ac <__aeabi_fcmpeq>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1d2      	bne.n	8001910 <HandleGui+0xa8>
			  }
			  if(Output == 8888){
 800196a:	4983      	ldr	r1, [pc, #524]	; (8001b78 <HandleGui+0x310>)
 800196c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001970:	f7ff fb9c 	bl	80010ac <__aeabi_fcmpeq>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HandleGui+0x11a>
				 Output = ReflowParameters.KP;
 800197a:	4b80      	ldr	r3, [pc, #512]	; (8001b7c <HandleGui+0x314>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }
	    ReflowParameters.KP = Output;
 8001982:	4a7e      	ldr	r2, [pc, #504]	; (8001b7c <HandleGui+0x314>)
 8001984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001988:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 800198a:	4b7c      	ldr	r3, [pc, #496]	; (8001b7c <HandleGui+0x314>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <HandleGui+0x318>)
 8001990:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001992:	2101      	movs	r1, #1
 8001994:	487a      	ldr	r0, [pc, #488]	; (8001b80 <HandleGui+0x318>)
 8001996:	f004 fbdd 	bl	8006154 <arm_pid_init_f32>
		Update_Page_2();
 800199a:	f7ff ff25 	bl	80017e8 <Update_Page_2>
		NEXTION_CMD("page 2");
 800199e:	4879      	ldr	r0, [pc, #484]	; (8001b84 <HandleGui+0x31c>)
 80019a0:	f7ff fd58 	bl	8001454 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 80019a4:	2205      	movs	r2, #5
 80019a6:	4978      	ldr	r1, [pc, #480]	; (8001b88 <HandleGui+0x320>)
 80019a8:	486b      	ldr	r0, [pc, #428]	; (8001b58 <HandleGui+0x2f0>)
 80019aa:	f005 f8a1 	bl	8006af0 <strncmp>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d152      	bne.n	8001a5a <HandleGui+0x1f2>
			  float32_t Output =0;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 80019bc:	f7ff fdb4 	bl	8001528 <HandleKeyPad>
 80019c0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 80019c4:	e024      	b.n	8001a10 <HandleGui+0x1a8>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 80019c6:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HandleGui+0x308>)
 80019c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019d0:	6018      	str	r0, [r3, #0]
 80019d2:	3304      	adds	r3, #4
 80019d4:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019dc:	e010      	b.n	8001a00 <HandleGui+0x198>
						UART_Recieved_Data[i]=defaultUart[i];
 80019de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019e6:	4413      	add	r3, r2
 80019e8:	7819      	ldrb	r1, [r3, #0]
 80019ea:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <HandleGui+0x2f0>)
 80019ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019f0:	4413      	add	r3, r2
 80019f2:	460a      	mov	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80019f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019fa:	3301      	adds	r3, #1
 80019fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	ddea      	ble.n	80019de <HandleGui+0x176>
					}
				  Output = HandleKeyPad();
 8001a08:	f7ff fd8e 	bl	8001528 <HandleKeyPad>
 8001a0c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001a10:	4958      	ldr	r1, [pc, #352]	; (8001b74 <HandleGui+0x30c>)
 8001a12:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a16:	f7ff fb49 	bl	80010ac <__aeabi_fcmpeq>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1d2      	bne.n	80019c6 <HandleGui+0x15e>
			  }
			  if(Output == 8888){
 8001a20:	4955      	ldr	r1, [pc, #340]	; (8001b78 <HandleGui+0x310>)
 8001a22:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a26:	f7ff fb41 	bl	80010ac <__aeabi_fcmpeq>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HandleGui+0x1d0>
				 Output = ReflowParameters.Ki;
 8001a30:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HandleGui+0x314>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HandleGui+0x314>)
 8001a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a3e:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001a40:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <HandleGui+0x314>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HandleGui+0x318>)
 8001a46:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	484d      	ldr	r0, [pc, #308]	; (8001b80 <HandleGui+0x318>)
 8001a4c:	f004 fb82 	bl	8006154 <arm_pid_init_f32>
			Update_Page_2();
 8001a50:	f7ff feca 	bl	80017e8 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001a54:	484b      	ldr	r0, [pc, #300]	; (8001b84 <HandleGui+0x31c>)
 8001a56:	f7ff fcfd 	bl	8001454 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	494b      	ldr	r1, [pc, #300]	; (8001b8c <HandleGui+0x324>)
 8001a5e:	483e      	ldr	r0, [pc, #248]	; (8001b58 <HandleGui+0x2f0>)
 8001a60:	f005 f846 	bl	8006af0 <strncmp>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d145      	bne.n	8001af6 <HandleGui+0x28e>
			  float32_t Output =0;
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001a70:	f7ff fd5a 	bl	8001528 <HandleKeyPad>
 8001a74:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001a76:	e01d      	b.n	8001ab4 <HandleGui+0x24c>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a78:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <HandleGui+0x308>)
 8001a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a82:	6018      	str	r0, [r3, #0]
 8001a84:	3304      	adds	r3, #4
 8001a86:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a88:	2300      	movs	r3, #0
 8001a8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a8c:	e00c      	b.n	8001aa8 <HandleGui+0x240>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a94:	4413      	add	r3, r2
 8001a96:	7819      	ldrb	r1, [r3, #0]
 8001a98:	4a2f      	ldr	r2, [pc, #188]	; (8001b58 <HandleGui+0x2f0>)
 8001a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a9c:	4413      	add	r3, r2
 8001a9e:	460a      	mov	r2, r1
 8001aa0:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	ddef      	ble.n	8001a8e <HandleGui+0x226>
					}
				  Output = HandleKeyPad();
 8001aae:	f7ff fd3b 	bl	8001528 <HandleKeyPad>
 8001ab2:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001ab4:	492f      	ldr	r1, [pc, #188]	; (8001b74 <HandleGui+0x30c>)
 8001ab6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ab8:	f7ff faf8 	bl	80010ac <__aeabi_fcmpeq>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1da      	bne.n	8001a78 <HandleGui+0x210>
			  }
			  if(Output == 8888){
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HandleGui+0x310>)
 8001ac4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001ac6:	f7ff faf1 	bl	80010ac <__aeabi_fcmpeq>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <HandleGui+0x26e>
				 Output = ReflowParameters.KD;
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HandleGui+0x314>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001ad6:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HandleGui+0x314>)
 8001ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ada:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HandleGui+0x314>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <HandleGui+0x318>)
 8001ae2:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4826      	ldr	r0, [pc, #152]	; (8001b80 <HandleGui+0x318>)
 8001ae8:	f004 fb34 	bl	8006154 <arm_pid_init_f32>
			Update_Page_2();
 8001aec:	f7ff fe7c 	bl	80017e8 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001af0:	4824      	ldr	r0, [pc, #144]	; (8001b84 <HandleGui+0x31c>)
 8001af2:	f7ff fcaf 	bl	8001454 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001af6:	2205      	movs	r2, #5
 8001af8:	4925      	ldr	r1, [pc, #148]	; (8001b90 <HandleGui+0x328>)
 8001afa:	4817      	ldr	r0, [pc, #92]	; (8001b58 <HandleGui+0x2f0>)
 8001afc:	f004 fff8 	bl	8006af0 <strncmp>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HandleGui+0x2a2>
			Update_Page_3();
 8001b06:	f7ff fd7b 	bl	8001600 <Update_Page_3>



	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001b0a:	2205      	movs	r2, #5
 8001b0c:	4921      	ldr	r1, [pc, #132]	; (8001b94 <HandleGui+0x32c>)
 8001b0e:	4812      	ldr	r0, [pc, #72]	; (8001b58 <HandleGui+0x2f0>)
 8001b10:	f004 ffee 	bl	8006af0 <strncmp>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HandleGui+0x2b6>
		Update_Page_3();
 8001b1a:	f7ff fd71 	bl	8001600 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001b1e:	2205      	movs	r2, #5
 8001b20:	491d      	ldr	r1, [pc, #116]	; (8001b98 <HandleGui+0x330>)
 8001b22:	480d      	ldr	r0, [pc, #52]	; (8001b58 <HandleGui+0x2f0>)
 8001b24:	f004 ffe4 	bl	8006af0 <strncmp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d171      	bne.n	8001c12 <HandleGui+0x3aa>
			  float32_t Output =0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001b34:	f7ff fcf8 	bl	8001528 <HandleKeyPad>
 8001b38:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001b3a:	e042      	b.n	8001bc2 <HandleGui+0x35a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HandleGui+0x308>)
 8001b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b46:	6018      	str	r0, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b50:	e031      	b.n	8001bb6 <HandleGui+0x34e>
 8001b52:	bf00      	nop
 8001b54:	08009860 	.word	0x08009860
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	08009868 	.word	0x08009868
 8001b60:	08009870 	.word	0x08009870
 8001b64:	08009878 	.word	0x08009878
 8001b68:	08009880 	.word	0x08009880
 8001b6c:	08009888 	.word	0x08009888
 8001b70:	08009900 	.word	0x08009900
 8001b74:	461c3c00 	.word	0x461c3c00
 8001b78:	460ae000 	.word	0x460ae000
 8001b7c:	2000129c 	.word	0x2000129c
 8001b80:	20000280 	.word	0x20000280
 8001b84:	08009890 	.word	0x08009890
 8001b88:	08009898 	.word	0x08009898
 8001b8c:	080098a0 	.word	0x080098a0
 8001b90:	080098a8 	.word	0x080098a8
 8001b94:	080098b0 	.word	0x080098b0
 8001b98:	080098b8 	.word	0x080098b8
						UART_Recieved_Data[i]=defaultUart[i];
 8001b9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	4aa4      	ldr	r2, [pc, #656]	; (8001e38 <HandleGui+0x5d0>)
 8001ba8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001baa:	4413      	add	r3, r2
 8001bac:	460a      	mov	r2, r1
 8001bae:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001bb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	673b      	str	r3, [r7, #112]	; 0x70
 8001bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	ddef      	ble.n	8001b9c <HandleGui+0x334>
					}
				  Output = HandleKeyPad();
 8001bbc:	f7ff fcb4 	bl	8001528 <HandleKeyPad>
 8001bc0:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001bc2:	499e      	ldr	r1, [pc, #632]	; (8001e3c <HandleGui+0x5d4>)
 8001bc4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bc6:	f7ff fa71 	bl	80010ac <__aeabi_fcmpeq>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1b5      	bne.n	8001b3c <HandleGui+0x2d4>
			  }
			  if(Output == 8888){
 8001bd0:	499b      	ldr	r1, [pc, #620]	; (8001e40 <HandleGui+0x5d8>)
 8001bd2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bd4:	f7ff fa6a 	bl	80010ac <__aeabi_fcmpeq>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <HandleGui+0x37c>
				 Output = ReflowParameters.firstHeatUpRate;
 8001bde:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HandleGui+0x5dc>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if(Output < 0.2)
 8001be4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001be6:	f7fe fc1f 	bl	8000428 <__aeabi_f2d>
 8001bea:	a391      	add	r3, pc, #580	; (adr r3, 8001e30 <HandleGui+0x5c8>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fee4 	bl	80009bc <__aeabi_dcmplt>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HandleGui+0x396>
				  Output = 0.2;
 8001bfa:	4b93      	ldr	r3, [pc, #588]	; (8001e48 <HandleGui+0x5e0>)
 8001bfc:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001bfe:	4a91      	ldr	r2, [pc, #580]	; (8001e44 <HandleGui+0x5dc>)
 8001c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c02:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001c04:	f7ff fcfc 	bl	8001600 <Update_Page_3>
		NEXTION_CMD("page 3");
 8001c08:	4890      	ldr	r0, [pc, #576]	; (8001e4c <HandleGui+0x5e4>)
 8001c0a:	f7ff fc23 	bl	8001454 <NEXTION_CMD>
		calculateReflowCurve();
 8001c0e:	f000 fb17 	bl	8002240 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001c12:	2205      	movs	r2, #5
 8001c14:	498e      	ldr	r1, [pc, #568]	; (8001e50 <HandleGui+0x5e8>)
 8001c16:	4888      	ldr	r0, [pc, #544]	; (8001e38 <HandleGui+0x5d0>)
 8001c18:	f004 ff6a 	bl	8006af0 <strncmp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d146      	bne.n	8001cb0 <HandleGui+0x448>
			  float32_t Output =0;
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001c28:	f7ff fc7e 	bl	8001528 <HandleKeyPad>
 8001c2c:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001c2e:	e01d      	b.n	8001c6c <HandleGui+0x404>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001c30:	4a88      	ldr	r2, [pc, #544]	; (8001e54 <HandleGui+0x5ec>)
 8001c32:	f107 0320 	add.w	r3, r7, #32
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001c40:	2300      	movs	r3, #0
 8001c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c44:	e00c      	b.n	8001c60 <HandleGui+0x3f8>
						UART_Recieved_Data[i]=defaultUart[i];
 8001c46:	f107 0220 	add.w	r2, r7, #32
 8001c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c4c:	4413      	add	r3, r2
 8001c4e:	7819      	ldrb	r1, [r3, #0]
 8001c50:	4a79      	ldr	r2, [pc, #484]	; (8001e38 <HandleGui+0x5d0>)
 8001c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c54:	4413      	add	r3, r2
 8001c56:	460a      	mov	r2, r1
 8001c58:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	ddef      	ble.n	8001c46 <HandleGui+0x3de>
					}
				  Output = HandleKeyPad();
 8001c66:	f7ff fc5f 	bl	8001528 <HandleKeyPad>
 8001c6a:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001c6c:	4973      	ldr	r1, [pc, #460]	; (8001e3c <HandleGui+0x5d4>)
 8001c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c70:	f7ff fa1c 	bl	80010ac <__aeabi_fcmpeq>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1da      	bne.n	8001c30 <HandleGui+0x3c8>
			  }
			  if(Output == 8888){
 8001c7a:	4971      	ldr	r1, [pc, #452]	; (8001e40 <HandleGui+0x5d8>)
 8001c7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c7e:	f7ff fa15 	bl	80010ac <__aeabi_fcmpeq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HandleGui+0x42e>
				 Output = ReflowParameters.SoakTime;
 8001c88:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HandleGui+0x5dc>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f821 	bl	8000cd4 <__aeabi_ui2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	66fb      	str	r3, [r7, #108]	; 0x6c
			  }
			ReflowParameters.SoakTime = Output;
 8001c96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c98:	f7ff fa3a 	bl	8001110 <__aeabi_f2uiz>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <HandleGui+0x5dc>)
 8001ca0:	615a      	str	r2, [r3, #20]
			Update_Page_3();
 8001ca2:	f7ff fcad 	bl	8001600 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001ca6:	4869      	ldr	r0, [pc, #420]	; (8001e4c <HandleGui+0x5e4>)
 8001ca8:	f7ff fbd4 	bl	8001454 <NEXTION_CMD>
			calculateReflowCurve();
 8001cac:	f000 fac8 	bl	8002240 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	4969      	ldr	r1, [pc, #420]	; (8001e58 <HandleGui+0x5f0>)
 8001cb4:	4860      	ldr	r0, [pc, #384]	; (8001e38 <HandleGui+0x5d0>)
 8001cb6:	f004 ff1b 	bl	8006af0 <strncmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d146      	bne.n	8001d4e <HandleGui+0x4e6>
			  float32_t Output =0;
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001cc6:	f7ff fc2f 	bl	8001528 <HandleKeyPad>
 8001cca:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001ccc:	e01d      	b.n	8001d0a <HandleGui+0x4a2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001cce:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <HandleGui+0x5ec>)
 8001cd0:	f107 0318 	add.w	r3, r7, #24
 8001cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cd8:	6018      	str	r0, [r3, #0]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001cde:	2300      	movs	r3, #0
 8001ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ce2:	e00c      	b.n	8001cfe <HandleGui+0x496>
						UART_Recieved_Data[i]=defaultUart[i];
 8001ce4:	f107 0218 	add.w	r2, r7, #24
 8001ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cea:	4413      	add	r3, r2
 8001cec:	7819      	ldrb	r1, [r3, #0]
 8001cee:	4a52      	ldr	r2, [pc, #328]	; (8001e38 <HandleGui+0x5d0>)
 8001cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf2:	4413      	add	r3, r2
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001cf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	663b      	str	r3, [r7, #96]	; 0x60
 8001cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	ddef      	ble.n	8001ce4 <HandleGui+0x47c>
					}
				  Output = HandleKeyPad();
 8001d04:	f7ff fc10 	bl	8001528 <HandleKeyPad>
 8001d08:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001d0a:	494c      	ldr	r1, [pc, #304]	; (8001e3c <HandleGui+0x5d4>)
 8001d0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d0e:	f7ff f9cd 	bl	80010ac <__aeabi_fcmpeq>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1da      	bne.n	8001cce <HandleGui+0x466>
			  }
			  if(Output == 8888){
 8001d18:	4949      	ldr	r1, [pc, #292]	; (8001e40 <HandleGui+0x5d8>)
 8001d1a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d1c:	f7ff f9c6 	bl	80010ac <__aeabi_fcmpeq>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <HandleGui+0x4cc>
				 Output = ReflowParameters.SoakTempeture;
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HandleGui+0x5dc>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffd2 	bl	8000cd4 <__aeabi_ui2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	667b      	str	r3, [r7, #100]	; 0x64
			  }
			ReflowParameters.SoakTempeture = Output;
 8001d34:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d36:	f7ff f9eb 	bl	8001110 <__aeabi_f2uiz>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <HandleGui+0x5dc>)
 8001d3e:	611a      	str	r2, [r3, #16]
			Update_Page_3();
 8001d40:	f7ff fc5e 	bl	8001600 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001d44:	4841      	ldr	r0, [pc, #260]	; (8001e4c <HandleGui+0x5e4>)
 8001d46:	f7ff fb85 	bl	8001454 <NEXTION_CMD>
			calculateReflowCurve();
 8001d4a:	f000 fa79 	bl	8002240 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001d4e:	2205      	movs	r2, #5
 8001d50:	4942      	ldr	r1, [pc, #264]	; (8001e5c <HandleGui+0x5f4>)
 8001d52:	4839      	ldr	r0, [pc, #228]	; (8001e38 <HandleGui+0x5d0>)
 8001d54:	f004 fecc 	bl	8006af0 <strncmp>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d14c      	bne.n	8001df8 <HandleGui+0x590>
			  float32_t Output =0;
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001d64:	f7ff fbe0 	bl	8001528 <HandleKeyPad>
 8001d68:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001d6a:	e01d      	b.n	8001da8 <HandleGui+0x540>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001d6c:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HandleGui+0x5ec>)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d76:	6018      	str	r0, [r3, #0]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d80:	e00c      	b.n	8001d9c <HandleGui+0x534>
						UART_Recieved_Data[i]=defaultUart[i];
 8001d82:	f107 0210 	add.w	r2, r7, #16
 8001d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d88:	4413      	add	r3, r2
 8001d8a:	7819      	ldrb	r1, [r3, #0]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HandleGui+0x5d0>)
 8001d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d98:	3301      	adds	r3, #1
 8001d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	ddef      	ble.n	8001d82 <HandleGui+0x51a>
					}
				  Output = HandleKeyPad();
 8001da2:	f7ff fbc1 	bl	8001528 <HandleKeyPad>
 8001da6:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001da8:	4924      	ldr	r1, [pc, #144]	; (8001e3c <HandleGui+0x5d4>)
 8001daa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001dac:	f7ff f97e 	bl	80010ac <__aeabi_fcmpeq>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1da      	bne.n	8001d6c <HandleGui+0x504>
			  }
			  if(Output == 8888){
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HandleGui+0x5d8>)
 8001db8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001dba:	f7ff f977 	bl	80010ac <__aeabi_fcmpeq>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HandleGui+0x562>
				 Output = ReflowParameters.secondHeatUpRate;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HandleGui+0x5dc>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }
			  if(Output < 0.2)
 8001dca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001dcc:	f7fe fb2c 	bl	8000428 <__aeabi_f2d>
 8001dd0:	a317      	add	r3, pc, #92	; (adr r3, 8001e30 <HandleGui+0x5c8>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fdf1 	bl	80009bc <__aeabi_dcmplt>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HandleGui+0x57c>
						  Output = 0.2;
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HandleGui+0x5e0>)
 8001de2:	65fb      	str	r3, [r7, #92]	; 0x5c
			ReflowParameters.secondHeatUpRate = Output;
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HandleGui+0x5dc>)
 8001de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de8:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001dea:	f7ff fc09 	bl	8001600 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <HandleGui+0x5e4>)
 8001df0:	f7ff fb30 	bl	8001454 <NEXTION_CMD>
			calculateReflowCurve();
 8001df4:	f000 fa24 	bl	8002240 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001df8:	2205      	movs	r2, #5
 8001dfa:	4919      	ldr	r1, [pc, #100]	; (8001e60 <HandleGui+0x5f8>)
 8001dfc:	480e      	ldr	r0, [pc, #56]	; (8001e38 <HandleGui+0x5d0>)
 8001dfe:	f004 fe77 	bl	8006af0 <strncmp>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d162      	bne.n	8001ece <HandleGui+0x666>
			  float32_t Output =0;
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001e0e:	f7ff fb8b 	bl	8001528 <HandleKeyPad>
 8001e12:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001e14:	e039      	b.n	8001e8a <HandleGui+0x622>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e16:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <HandleGui+0x5ec>)
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e20:	6018      	str	r0, [r3, #0]
 8001e22:	3304      	adds	r3, #4
 8001e24:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e26:	2300      	movs	r3, #0
 8001e28:	653b      	str	r3, [r7, #80]	; 0x50
 8001e2a:	e028      	b.n	8001e7e <HandleGui+0x616>
 8001e2c:	f3af 8000 	nop.w
 8001e30:	9999999a 	.word	0x9999999a
 8001e34:	3fc99999 	.word	0x3fc99999
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	461c3c00 	.word	0x461c3c00
 8001e40:	460ae000 	.word	0x460ae000
 8001e44:	2000129c 	.word	0x2000129c
 8001e48:	3e4ccccd 	.word	0x3e4ccccd
 8001e4c:	080098c0 	.word	0x080098c0
 8001e50:	080098c8 	.word	0x080098c8
 8001e54:	08009900 	.word	0x08009900
 8001e58:	080098d0 	.word	0x080098d0
 8001e5c:	080098d8 	.word	0x080098d8
 8001e60:	080098e0 	.word	0x080098e0
						UART_Recieved_Data[i]=defaultUart[i];
 8001e64:	f107 0208 	add.w	r2, r7, #8
 8001e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e6a:	4413      	add	r3, r2
 8001e6c:	7819      	ldrb	r1, [r3, #0]
 8001e6e:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HandleGui+0x738>)
 8001e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e72:	4413      	add	r3, r2
 8001e74:	460a      	mov	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	ddef      	ble.n	8001e64 <HandleGui+0x5fc>
					}
				  Output = HandleKeyPad();
 8001e84:	f7ff fb50 	bl	8001528 <HandleKeyPad>
 8001e88:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001e8a:	4946      	ldr	r1, [pc, #280]	; (8001fa4 <HandleGui+0x73c>)
 8001e8c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e8e:	f7ff f90d 	bl	80010ac <__aeabi_fcmpeq>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1be      	bne.n	8001e16 <HandleGui+0x5ae>
			  }
			  if(Output == 8888){
 8001e98:	4943      	ldr	r1, [pc, #268]	; (8001fa8 <HandleGui+0x740>)
 8001e9a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001e9c:	f7ff f906 	bl	80010ac <__aeabi_fcmpeq>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <HandleGui+0x64c>
				 Output = ReflowParameters.ReflowTime;
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <HandleGui+0x744>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff12 	bl	8000cd4 <__aeabi_ui2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
			  }
			ReflowParameters.ReflowTime = Output;
 8001eb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001eb6:	f7ff f92b 	bl	8001110 <__aeabi_f2uiz>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HandleGui+0x744>)
 8001ebe:	621a      	str	r2, [r3, #32]
			Update_Page_3();
 8001ec0:	f7ff fb9e 	bl	8001600 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001ec4:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <HandleGui+0x748>)
 8001ec6:	f7ff fac5 	bl	8001454 <NEXTION_CMD>
			calculateReflowCurve();
 8001eca:	f000 f9b9 	bl	8002240 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 8001ece:	2205      	movs	r2, #5
 8001ed0:	4938      	ldr	r1, [pc, #224]	; (8001fb4 <HandleGui+0x74c>)
 8001ed2:	4833      	ldr	r0, [pc, #204]	; (8001fa0 <HandleGui+0x738>)
 8001ed4:	f004 fe0c 	bl	8006af0 <strncmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d144      	bne.n	8001f68 <HandleGui+0x700>
			  float32_t Output =0;
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8001ee4:	f7ff fb20 	bl	8001528 <HandleKeyPad>
 8001ee8:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8001eea:	e01b      	b.n	8001f24 <HandleGui+0x6bc>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001eec:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <HandleGui+0x750>)
 8001eee:	463b      	mov	r3, r7
 8001ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef4:	6018      	str	r0, [r3, #0]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001efa:	2300      	movs	r3, #0
 8001efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001efe:	e00b      	b.n	8001f18 <HandleGui+0x6b0>
						UART_Recieved_Data[i]=defaultUart[i];
 8001f00:	463a      	mov	r2, r7
 8001f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f04:	4413      	add	r3, r2
 8001f06:	7819      	ldrb	r1, [r3, #0]
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <HandleGui+0x738>)
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	4413      	add	r3, r2
 8001f0e:	460a      	mov	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f14:	3301      	adds	r3, #1
 8001f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	ddf0      	ble.n	8001f00 <HandleGui+0x698>
					}
				  Output = HandleKeyPad();
 8001f1e:	f7ff fb03 	bl	8001528 <HandleKeyPad>
 8001f22:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8001f24:	491f      	ldr	r1, [pc, #124]	; (8001fa4 <HandleGui+0x73c>)
 8001f26:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f28:	f7ff f8c0 	bl	80010ac <__aeabi_fcmpeq>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1dc      	bne.n	8001eec <HandleGui+0x684>
			  }
			  if(Output == 8888){
 8001f32:	491d      	ldr	r1, [pc, #116]	; (8001fa8 <HandleGui+0x740>)
 8001f34:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f36:	f7ff f8b9 	bl	80010ac <__aeabi_fcmpeq>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <HandleGui+0x6e6>
				 Output = ReflowParameters.ReflowTempeture;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HandleGui+0x744>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fec5 	bl	8000cd4 <__aeabi_ui2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			ReflowParameters.ReflowTempeture = Output;
 8001f4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f50:	f7ff f8de 	bl	8001110 <__aeabi_f2uiz>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HandleGui+0x744>)
 8001f58:	61da      	str	r2, [r3, #28]
			Update_Page_3();
 8001f5a:	f7ff fb51 	bl	8001600 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001f5e:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <HandleGui+0x748>)
 8001f60:	f7ff fa78 	bl	8001454 <NEXTION_CMD>
			calculateReflowCurve();
 8001f64:	f000 f96c 	bl	8002240 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 8001f68:	2205      	movs	r2, #5
 8001f6a:	4914      	ldr	r1, [pc, #80]	; (8001fbc <HandleGui+0x754>)
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <HandleGui+0x738>)
 8001f6e:	f004 fdbf 	bl	8006af0 <strncmp>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HandleGui+0x714>
			Update_Page_2();
 8001f78:	f7ff fc36 	bl	80017e8 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 8001f7c:	2205      	movs	r2, #5
 8001f7e:	4910      	ldr	r1, [pc, #64]	; (8001fc0 <HandleGui+0x758>)
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <HandleGui+0x738>)
 8001f82:	f004 fdb5 	bl	8006af0 <strncmp>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HandleGui+0x730>
			Update_Page_0();
 8001f8c:	f7ff fb8e 	bl	80016ac <Update_Page_0>
			Draw_Reflow_Curve();
 8001f90:	f000 faa8 	bl	80024e4 <Draw_Reflow_Curve>
			SaveParameters();
 8001f94:	f7ff f9c2 	bl	800131c <SaveParameters>
//	NEXTION_SenduInt("t1",ReflowParameters.SoakTime );
//	NEXTION_SenduInt("t2",ReflowParameters.SoakTempeture );
//	NEXTION_SendFloat("t3",ReflowParameters.secondHeatUpRate );
//	NEXTION_SenduInt("t4",ReflowParameters.ReflowTime );
//	NEXTION_SenduInt("t5",ReflowParameters.ReflowTempeture );
}
 8001f98:	bf00      	nop
 8001f9a:	3790      	adds	r7, #144	; 0x90
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	461c3c00 	.word	0x461c3c00
 8001fa8:	460ae000 	.word	0x460ae000
 8001fac:	2000129c 	.word	0x2000129c
 8001fb0:	080098c0 	.word	0x080098c0
 8001fb4:	080098e8 	.word	0x080098e8
 8001fb8:	08009900 	.word	0x08009900
 8001fbc:	080098f0 	.word	0x080098f0
 8001fc0:	080098f8 	.word	0x080098f8
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	float32_t dx = 0.625/4; //275px / 880s / 500ms
 8001fd0:	4b6d      	ldr	r3, [pc, #436]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001fd2:	61fb      	str	r3, [r7, #28]
	float32_t dy = 0.8333; //200px / 240 Grad
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001fd6:	61bb      	str	r3, [r7, #24]
	uint32_t OffsetX = 35;
 8001fd8:	2323      	movs	r3, #35	; 0x23
 8001fda:	617b      	str	r3, [r7, #20]
	uint32_t OffsetY = 230;
 8001fdc:	23e6      	movs	r3, #230	; 0xe6
 8001fde:	613b      	str	r3, [r7, #16]

	if (htim == &htim4) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a6b      	ldr	r2, [pc, #428]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80c5 	bne.w	8002174 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		//Thermocouple alle 500ms auslesen:
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2110      	movs	r1, #16
 8001fee:	4869      	ldr	r0, [pc, #420]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001ff0:	f001 fc7c 	bl	80038ec <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, data, 2, 100);
 8001ff4:	2364      	movs	r3, #100	; 0x64
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4967      	ldr	r1, [pc, #412]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ffa:	4868      	ldr	r0, [pc, #416]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001ffc:	f002 f92e 	bl	800425c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8002000:	2201      	movs	r2, #1
 8002002:	2110      	movs	r1, #16
 8002004:	4863      	ldr	r0, [pc, #396]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002006:	f001 fc71 	bl	80038ec <HAL_GPIO_WritePin>
		temp = ((((uint16_t) data[1] << 8) | data[2]) >> 3) * 0.249;
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4a61      	ldr	r2, [pc, #388]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002012:	7892      	ldrb	r2, [r2, #2]
 8002014:	4313      	orrs	r3, r2
 8002016:	10db      	asrs	r3, r3, #3
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe f9f3 	bl	8000404 <__aeabi_i2d>
 800201e:	a358      	add	r3, pc, #352	; (adr r3, 8002180 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f7fe fa58 	bl	80004d8 <__aeabi_dmul>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	4618      	mov	r0, r3
 800202e:	4621      	mov	r1, r4
 8002030:	f7fe fd4a 	bl	8000ac8 <__aeabi_d2f>
 8002034:	4602      	mov	r2, r0
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002038:	601a      	str	r2, [r3, #0]

		//Reflow Prozess Einleiten:
		if (ReflowEnable == 1) {
 800203a:	4b5a      	ldr	r3, [pc, #360]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b01      	cmp	r3, #1
 8002040:	f040 8091 	bne.w	8002166 <HAL_TIM_PeriodElapsedCallback+0x19e>
			//NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));

			if(ReflowIndex == PhaseIndex[0])
 8002044:	4b58      	ldr	r3, [pc, #352]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d104      	bne.n	800205a <HAL_TIM_PeriodElapsedCallback+0x92>
				sprintf(ConsoleMSG,"HEAT UP");
 8002050:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002052:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002054:	cb03      	ldmia	r3!, {r0, r1}
 8002056:	6010      	str	r0, [r2, #0]
 8002058:	6051      	str	r1, [r2, #4]
			if(ReflowIndex == PhaseIndex[1])
 800205a:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800205c:	885a      	ldrh	r2, [r3, #2]
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d105      	bne.n	8002072 <HAL_TIM_PeriodElapsedCallback+0xaa>
				sprintf(ConsoleMSG,"SOAK");
 8002066:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002068:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800206a:	6810      	ldr	r0, [r2, #0]
 800206c:	6018      	str	r0, [r3, #0]
 800206e:	7912      	ldrb	r2, [r2, #4]
 8002070:	711a      	strb	r2, [r3, #4]
			if(ReflowIndex == PhaseIndex[2])
 8002072:	4b4d      	ldr	r3, [pc, #308]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002074:	889a      	ldrh	r2, [r3, #4]
 8002076:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d104      	bne.n	8002088 <HAL_TIM_PeriodElapsedCallback+0xc0>
				sprintf(ConsoleMSG,"HEAT UP");
 800207e:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002082:	cb03      	ldmia	r3!, {r0, r1}
 8002084:	6010      	str	r0, [r2, #0]
 8002086:	6051      	str	r1, [r2, #4]
			if(ReflowIndex == PhaseIndex[3])
 8002088:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800208a:	88da      	ldrh	r2, [r3, #6]
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0xdc>
				sprintf(ConsoleMSG,"REFLOW");
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002096:	4a49      	ldr	r2, [pc, #292]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002098:	6810      	ldr	r0, [r2, #0]
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	8891      	ldrh	r1, [r2, #4]
 800209e:	7992      	ldrb	r2, [r2, #6]
 80020a0:	8099      	strh	r1, [r3, #4]
 80020a2:	719a      	strb	r2, [r3, #6]
			if(ReflowIndex == PhaseIndex[4])
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80020a6:	891a      	ldrh	r2, [r3, #8]
 80020a8:	4b40      	ldr	r3, [pc, #256]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d106      	bne.n	80020be <HAL_TIM_PeriodElapsedCallback+0xf6>
				sprintf(ConsoleMSG,"COOL DOWN");
 80020b0:	4a3f      	ldr	r2, [pc, #252]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80020b4:	cb03      	ldmia	r3!, {r0, r1}
 80020b6:	6010      	str	r0, [r2, #0]
 80020b8:	6051      	str	r1, [r2, #4]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	8113      	strh	r3, [r2, #8]




			//Regelabweichung
			float pid_error =  ReflowCurve[ReflowIndex] - temp;
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe07 	bl	8000cdc <__aeabi_i2f>
 80020ce:	4602      	mov	r2, r0
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7fe fd4a 	bl	8000b70 <__aeabi_fsub>
 80020dc:	4603      	mov	r3, r0
 80020de:	60fb      	str	r3, [r7, #12]
			//Stellgroesse
			duty =  arm_pid_f32(&PID, pid_error);
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	4839      	ldr	r0, [pc, #228]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80020e4:	f7ff f8d8 	bl	8001298 <arm_pid_f32>
 80020e8:	4602      	mov	r2, r0
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 80020ec:	601a      	str	r2, [r3, #0]

			//Stellgrößenbegrenzung
			if (duty > 1000) {
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f801 	bl	80010fc <__aeabi_fcmpgt>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_TIM_PeriodElapsedCallback+0x140>
				duty = 1000;
 8002100:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002102:	4a33      	ldr	r2, [pc, #204]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00d      	b.n	8002124 <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (duty < 0) {
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe ffd5 	bl	80010c0 <__aeabi_fcmplt>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_TIM_PeriodElapsedCallback+0x15c>
				duty = 0;
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
			}

			//Dutycycle Anpassen
			htim1.Instance->CCR1 = (uint16_t)duty;
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fff1 	bl	8001110 <__aeabi_f2uiz>
 800212e:	4603      	mov	r3, r0
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	635a      	str	r2, [r3, #52]	; 0x34

			ReflowIndex++;
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002142:	801a      	strh	r2, [r3, #0]
			//Abbruchbedingung
			if (ReflowIndex == PhaseIndex[4]) {
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002146:	891a      	ldrh	r2, [r3, #8]
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d111      	bne.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x1ac>
				sprintf(ConsoleMSG,"FINISHED");
 8002150:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002154:	cb03      	ldmia	r3!, {r0, r1}
 8002156:	6010      	str	r0, [r2, #0]
 8002158:	6051      	str	r1, [r2, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	7213      	strb	r3, [r2, #8]
				ReflowEnable = 0;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
		}

	}

}
 8002164:	e006      	b.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x1ac>
			ReflowIndex = 0;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002168:	2200      	movs	r2, #0
 800216a:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2200      	movs	r2, #0
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002174:	bf00      	nop
 8002176:	3724      	adds	r7, #36	; 0x24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	f3af 8000 	nop.w
 8002180:	645a1cac 	.word	0x645a1cac
 8002184:	3fcfdf3b 	.word	0x3fcfdf3b
 8002188:	3e200000 	.word	0x3e200000
 800218c:	3f555326 	.word	0x3f555326
 8002190:	20000238 	.word	0x20000238
 8002194:	40010800 	.word	0x40010800
 8002198:	200012c0 	.word	0x200012c0
 800219c:	2000130c 	.word	0x2000130c
 80021a0:	200002b8 	.word	0x200002b8
 80021a4:	20000214 	.word	0x20000214
 80021a8:	20000220 	.word	0x20000220
 80021ac:	20000216 	.word	0x20000216
 80021b0:	20001364 	.word	0x20001364
 80021b4:	08009908 	.word	0x08009908
 80021b8:	08009910 	.word	0x08009910
 80021bc:	08009918 	.word	0x08009918
 80021c0:	08009920 	.word	0x08009920
 80021c4:	200002fc 	.word	0x200002fc
 80021c8:	20000280 	.word	0x20000280
 80021cc:	20001378 	.word	0x20001378
 80021d0:	447a0000 	.word	0x447a0000
 80021d4:	200012c4 	.word	0x200012c4
 80021d8:	0800992c 	.word	0x0800992c

080021dc <setReflowParameters>:

void setReflowParameters(){
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	ReflowParameters.KP = 10;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <setReflowParameters+0x50>)
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <setReflowParameters+0x54>)
 80021e4:	601a      	str	r2, [r3, #0]
	ReflowParameters.Ki = 10;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <setReflowParameters+0x50>)
 80021e8:	4a11      	ldr	r2, [pc, #68]	; (8002230 <setReflowParameters+0x54>)
 80021ea:	605a      	str	r2, [r3, #4]
	ReflowParameters.KD = 0;
 80021ec:	4b0f      	ldr	r3, [pc, #60]	; (800222c <setReflowParameters+0x50>)
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
	ReflowParameters.firstHeatUpRate = 1.2;
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <setReflowParameters+0x50>)
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <setReflowParameters+0x58>)
 80021f8:	60da      	str	r2, [r3, #12]
	ReflowParameters.SoakTempeture = 100;
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <setReflowParameters+0x50>)
 80021fc:	2264      	movs	r2, #100	; 0x64
 80021fe:	611a      	str	r2, [r3, #16]
	ReflowParameters.SoakTime = 100;
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <setReflowParameters+0x50>)
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	615a      	str	r2, [r3, #20]
	ReflowParameters.secondHeatUpRate = 1.2;
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <setReflowParameters+0x50>)
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <setReflowParameters+0x58>)
 800220a:	619a      	str	r2, [r3, #24]
	ReflowParameters.ReflowTempeture = 210;
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <setReflowParameters+0x50>)
 800220e:	22d2      	movs	r2, #210	; 0xd2
 8002210:	61da      	str	r2, [r3, #28]
	ReflowParameters.ReflowTime =100;
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <setReflowParameters+0x50>)
 8002214:	2264      	movs	r2, #100	; 0x64
 8002216:	621a      	str	r2, [r3, #32]
	sprintf(ConsoleMSG,"IDLE");
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <setReflowParameters+0x5c>)
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <setReflowParameters+0x60>)
 800221c:	6810      	ldr	r0, [r2, #0]
 800221e:	6018      	str	r0, [r3, #0]
 8002220:	7912      	ldrb	r2, [r2, #4]
 8002222:	711a      	strb	r2, [r3, #4]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	2000129c 	.word	0x2000129c
 8002230:	41200000 	.word	0x41200000
 8002234:	3f99999a 	.word	0x3f99999a
 8002238:	20001364 	.word	0x20001364
 800223c:	08009938 	.word	0x08009938

08002240 <calculateReflowCurve>:

void calculateReflowCurve(){
 8002240:	b5b0      	push	{r4, r5, r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e007      	b.n	800225c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 800224c:	4aa0      	ldr	r2, [pc, #640]	; (80024d0 <calculateReflowCurve+0x290>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4413      	add	r3, r2
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002262:	dbf3      	blt.n	800224c <calculateReflowCurve+0xc>
	}

	int index = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
	float timestep = 0.5;
 8002268:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800226c:	617b      	str	r3, [r7, #20]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 800226e:	e01f      	b.n	80022b0 <calculateReflowCurve+0x70>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 8002270:	4b98      	ldr	r3, [pc, #608]	; (80024d4 <calculateReflowCurve+0x294>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	6979      	ldr	r1, [r7, #20]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fd84 	bl	8000d84 <__aeabi_fmul>
 800227c:	4603      	mov	r3, r0
 800227e:	4996      	ldr	r1, [pc, #600]	; (80024d8 <calculateReflowCurve+0x298>)
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fc77 	bl	8000b74 <__addsf3>
 8002286:	4603      	mov	r3, r0
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ff41 	bl	8001110 <__aeabi_f2uiz>
 800228e:	4603      	mov	r3, r0
 8002290:	b2d9      	uxtb	r1, r3
 8002292:	4a8f      	ldr	r2, [pc, #572]	; (80024d0 <calculateReflowCurve+0x290>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4413      	add	r3, r2
 8002298:	460a      	mov	r2, r1
 800229a:	701a      	strb	r2, [r3, #0]
	index++;
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	3301      	adds	r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80022a2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7fe fc64 	bl	8000b74 <__addsf3>
 80022ac:	4603      	mov	r3, r0
 80022ae:	617b      	str	r3, [r7, #20]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80022b0:	4b88      	ldr	r3, [pc, #544]	; (80024d4 <calculateReflowCurve+0x294>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	6979      	ldr	r1, [r7, #20]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd64 	bl	8000d84 <__aeabi_fmul>
 80022bc:	4603      	mov	r3, r0
 80022be:	4986      	ldr	r1, [pc, #536]	; (80024d8 <calculateReflowCurve+0x298>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fc57 	bl	8000b74 <__addsf3>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461c      	mov	r4, r3
 80022ca:	4b82      	ldr	r3, [pc, #520]	; (80024d4 <calculateReflowCurve+0x294>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fd00 	bl	8000cd4 <__aeabi_ui2f>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4620      	mov	r0, r4
 80022da:	f7fe fefb 	bl	80010d4 <__aeabi_fcmple>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1c5      	bne.n	8002270 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <calculateReflowCurve+0x29c>)
 80022ea:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <calculateReflowCurve+0x294>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<Soakduration;i++){
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e00a      	b.n	8002310 <calculateReflowCurve+0xd0>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 80022fa:	4b76      	ldr	r3, [pc, #472]	; (80024d4 <calculateReflowCurve+0x294>)
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	b2c9      	uxtb	r1, r1
 8002306:	4a72      	ldr	r2, [pc, #456]	; (80024d0 <calculateReflowCurve+0x290>)
 8002308:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	3301      	adds	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	429a      	cmp	r2, r3
 8002316:	dbf0      	blt.n	80022fa <calculateReflowCurve+0xba>
	}


	//Second Heat Up:
	index = index + Soakduration;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	4413      	add	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
	PhaseIndex[2]=index;
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b6d      	ldr	r3, [pc, #436]	; (80024dc <calculateReflowCurve+0x29c>)
 8002326:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002328:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800232c:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 800232e:	e02e      	b.n	800238e <calculateReflowCurve+0x14e>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 8002330:	4b68      	ldr	r3, [pc, #416]	; (80024d4 <calculateReflowCurve+0x294>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fccd 	bl	8000cd4 <__aeabi_ui2f>
 800233a:	4604      	mov	r4, r0
 800233c:	6978      	ldr	r0, [r7, #20]
 800233e:	f7fe fee7 	bl	8001110 <__aeabi_f2uiz>
 8002342:	4603      	mov	r3, r0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fcc8 	bl	8000cdc <__aeabi_i2f>
 800234c:	4602      	mov	r2, r0
 800234e:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <calculateReflowCurve+0x294>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4619      	mov	r1, r3
 8002354:	4610      	mov	r0, r2
 8002356:	f7fe fd15 	bl	8000d84 <__aeabi_fmul>
 800235a:	4603      	mov	r3, r0
 800235c:	4619      	mov	r1, r3
 800235e:	4620      	mov	r0, r4
 8002360:	f7fe fc08 	bl	8000b74 <__addsf3>
 8002364:	4603      	mov	r3, r0
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fed2 	bl	8001110 <__aeabi_f2uiz>
 800236c:	4603      	mov	r3, r0
 800236e:	b2d9      	uxtb	r1, r3
 8002370:	4a57      	ldr	r2, [pc, #348]	; (80024d0 <calculateReflowCurve+0x290>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	460a      	mov	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
	index++;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	3301      	adds	r3, #1
 800237e:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 8002380:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002384:	6978      	ldr	r0, [r7, #20]
 8002386:	f7fe fbf5 	bl	8000b74 <__addsf3>
 800238a:	4603      	mov	r3, r0
 800238c:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 800238e:	4b51      	ldr	r3, [pc, #324]	; (80024d4 <calculateReflowCurve+0x294>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fc9e 	bl	8000cd4 <__aeabi_ui2f>
 8002398:	4604      	mov	r4, r0
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <calculateReflowCurve+0x294>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	6979      	ldr	r1, [r7, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fcef 	bl	8000d84 <__aeabi_fmul>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7fe fbe2 	bl	8000b74 <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461c      	mov	r4, r3
 80023b4:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <calculateReflowCurve+0x294>)
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fc8b 	bl	8000cd4 <__aeabi_ui2f>
 80023be:	4603      	mov	r3, r0
 80023c0:	4619      	mov	r1, r3
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe fe86 	bl	80010d4 <__aeabi_fcmple>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1b0      	bne.n	8002330 <calculateReflowCurve+0xf0>
	}
	PhaseIndex[3]=index;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b42      	ldr	r3, [pc, #264]	; (80024dc <calculateReflowCurve+0x29c>)
 80023d4:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <calculateReflowCurve+0x294>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	607b      	str	r3, [r7, #4]

	for(int i=0;i<Reflowduration;i++){
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e00a      	b.n	80023fa <calculateReflowCurve+0x1ba>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 80023e4:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <calculateReflowCurve+0x294>)
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4413      	add	r3, r2
 80023ee:	b2c9      	uxtb	r1, r1
 80023f0:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <calculateReflowCurve+0x290>)
 80023f2:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3301      	adds	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	429a      	cmp	r2, r3
 8002400:	dbf0      	blt.n	80023e4 <calculateReflowCurve+0x1a4>
	}

	index = index + Reflowduration;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
	ReflowCurve[index]=0;
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <calculateReflowCurve+0x290>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4413      	add	r3, r2
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b30      	ldr	r3, [pc, #192]	; (80024dc <calculateReflowCurve+0x29c>)
 800241a:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 800241c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002420:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002422:	e02b      	b.n	800247c <calculateReflowCurve+0x23c>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8002424:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <calculateReflowCurve+0x294>)
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ffdb 	bl	80003e4 <__aeabi_ui2d>
 800242e:	4604      	mov	r4, r0
 8002430:	460d      	mov	r5, r1
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7fd fff8 	bl	8000428 <__aeabi_f2d>
 8002438:	a323      	add	r3, pc, #140	; (adr r3, 80024c8 <calculateReflowCurve+0x288>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fe f84b 	bl	80004d8 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4620      	mov	r0, r4
 8002448:	4629      	mov	r1, r5
 800244a:	f7fd fe8d 	bl	8000168 <__aeabi_dsub>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	4618      	mov	r0, r3
 8002454:	4621      	mov	r1, r4
 8002456:	f7fe fb17 	bl	8000a88 <__aeabi_d2uiz>
 800245a:	4603      	mov	r3, r0
 800245c:	b2d9      	uxtb	r1, r3
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <calculateReflowCurve+0x290>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	460a      	mov	r2, r1
 8002466:	701a      	strb	r2, [r3, #0]
	index++;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	3301      	adds	r3, #1
 800246c:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 800246e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7fe fb7e 	bl	8000b74 <__addsf3>
 8002478:	4603      	mov	r3, r0
 800247a:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 800247c:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <calculateReflowCurve+0x294>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fd ffaf 	bl	80003e4 <__aeabi_ui2d>
 8002486:	4604      	mov	r4, r0
 8002488:	460d      	mov	r5, r1
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7fd ffcc 	bl	8000428 <__aeabi_f2d>
 8002490:	a30d      	add	r3, pc, #52	; (adr r3, 80024c8 <calculateReflowCurve+0x288>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f81f 	bl	80004d8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fd fe61 	bl	8000168 <__aeabi_dsub>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	4618      	mov	r0, r3
 80024ac:	4621      	mov	r1, r4
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <calculateReflowCurve+0x2a0>)
 80024b4:	f7fe fa96 	bl	80009e4 <__aeabi_dcmpge>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1b2      	bne.n	8002424 <calculateReflowCurve+0x1e4>
	}




}
 80024be:	bf00      	nop
 80024c0:	3720      	adds	r7, #32
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdb0      	pop	{r4, r5, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	3ffccccc 	.word	0x3ffccccc
 80024d0:	200002fc 	.word	0x200002fc
 80024d4:	2000129c 	.word	0x2000129c
 80024d8:	41c00000 	.word	0x41c00000
 80024dc:	20000220 	.word	0x20000220
 80024e0:	40380000 	.word	0x40380000

080024e4 <Draw_Reflow_Curve>:

void Draw_Reflow_Curve(){
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
	float32_t dx = 0.625 / 4; //275px / 880s / 500 ms
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <Draw_Reflow_Curve+0x98>)
 80024ec:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.8333; //200px / 240 Grad
 80024ee:	4b24      	ldr	r3, [pc, #144]	; (8002580 <Draw_Reflow_Curve+0x9c>)
 80024f0:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 35;
 80024f2:	2323      	movs	r3, #35	; 0x23
 80024f4:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 230;
 80024f6:	23e6      	movs	r3, #230	; 0xe6
 80024f8:	607b      	str	r3, [r7, #4]
	uint32_t index = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]



	while(ReflowCurve[index] != 0){
 80024fe:	e030      	b.n	8002562 <Draw_Reflow_Curve+0x7e>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7fe fbe7 	bl	8000cd4 <__aeabi_ui2f>
 8002506:	4603      	mov	r3, r0
 8002508:	6939      	ldr	r1, [r7, #16]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fc3a 	bl	8000d84 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fdfc 	bl	8001110 <__aeabi_f2uiz>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	18d4      	adds	r4, r2, r3
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <Draw_Reflow_Curve+0xa0>)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	4413      	add	r3, r2
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fbd4 	bl	8000cd4 <__aeabi_ui2f>
 800252c:	4603      	mov	r3, r0
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fc27 	bl	8000d84 <__aeabi_fmul>
 8002536:	4603      	mov	r3, r0
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fde9 	bl	8001110 <__aeabi_f2uiz>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	4619      	mov	r1, r3
 8002546:	4620      	mov	r0, r4
 8002548:	f7fe ffa2 	bl	8001490 <NextionDrawDot>
		index= index + 4;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 8002552:	2205      	movs	r2, #5
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <Draw_Reflow_Curve+0xa4>)
 8002556:	480d      	ldr	r0, [pc, #52]	; (800258c <Draw_Reflow_Curve+0xa8>)
 8002558:	f004 faca 	bl	8006af0 <strncmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <Draw_Reflow_Curve+0x8c>
	while(ReflowCurve[index] != 0){
 8002562:	4a08      	ldr	r2, [pc, #32]	; (8002584 <Draw_Reflow_Curve+0xa0>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1c8      	bne.n	8002500 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 800256e:	e000      	b.n	8002572 <Draw_Reflow_Curve+0x8e>
			break;
 8002570:	bf00      	nop
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	bd90      	pop	{r4, r7, pc}
 800257a:	bf00      	nop
 800257c:	3e200000 	.word	0x3e200000
 8002580:	3f555326 	.word	0x3f555326
 8002584:	200002fc 	.word	0x200002fc
 8002588:	08009868 	.word	0x08009868
 800258c:	20000004 	.word	0x20000004

08002590 <startReflow>:



void startReflow(){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
ReflowEnable = 1;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <startReflow+0x1c>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
NEXTION_CMD("page 0");
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <startReflow+0x20>)
 800259c:	f7fe ff5a 	bl	8001454 <NEXTION_CMD>
Draw_Reflow_Curve();
 80025a0:	f7ff ffa0 	bl	80024e4 <Draw_Reflow_Curve>
Update_Page_0();
 80025a4:	f7ff f882 	bl	80016ac <Update_Page_0>

}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000214 	.word	0x20000214
 80025b0:	08009940 	.word	0x08009940

080025b4 <stopReflow>:

void stopReflow(){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	if(ReflowEnable ==1){
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <stopReflow+0x24>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d109      	bne.n	80025d4 <stopReflow+0x20>
	ReflowEnable = 0;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <stopReflow+0x24>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
	sprintf(ConsoleMSG,"STOPPED");
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <stopReflow+0x28>)
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <stopReflow+0x2c>)
 80025ca:	cb03      	ldmia	r3!, {r0, r1}
 80025cc:	6010      	str	r0, [r2, #0]
 80025ce:	6051      	str	r1, [r2, #4]
	Update_Page_0();
 80025d0:	f7ff f86c 	bl	80016ac <Update_Page_0>
	}
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000214 	.word	0x20000214
 80025dc:	20001364 	.word	0x20001364
 80025e0:	08009948 	.word	0x08009948

080025e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	setReflowParameters();
 80025e8:	f7ff fdf8 	bl	80021dc <setReflowParameters>
	Flash_Read_Data(0x0801FC00, &ReflowParameters);
 80025ec:	492c      	ldr	r1, [pc, #176]	; (80026a0 <main+0xbc>)
 80025ee:	482d      	ldr	r0, [pc, #180]	; (80026a4 <main+0xc0>)
 80025f0:	f7fe fe34 	bl	800125c <Flash_Read_Data>
	calculateReflowCurve();
 80025f4:	f7ff fe24 	bl	8002240 <calculateReflowCurve>




	PID.Kp = ReflowParameters.KP;
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <main+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2a      	ldr	r2, [pc, #168]	; (80026a8 <main+0xc4>)
 80025fe:	6193      	str	r3, [r2, #24]
	PID.Ki = ReflowParameters.Ki;
 8002600:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <main+0xbc>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a28      	ldr	r2, [pc, #160]	; (80026a8 <main+0xc4>)
 8002606:	61d3      	str	r3, [r2, #28]
	PID.Kd = ReflowParameters.KD;
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <main+0xbc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a26      	ldr	r2, [pc, #152]	; (80026a8 <main+0xc4>)
 800260e:	6213      	str	r3, [r2, #32]

	arm_pid_init_f32(&PID, 1);
 8002610:	2101      	movs	r1, #1
 8002612:	4825      	ldr	r0, [pc, #148]	; (80026a8 <main+0xc4>)
 8002614:	f003 fd9e 	bl	8006154 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002618:	f000 fbfc 	bl	8002e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800261c:	f000 f858 	bl	80026d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002620:	f000 f9d0 	bl	80029c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002624:	f000 f89a 	bl	800275c <MX_SPI1_Init>
  MX_TIM4_Init();
 8002628:	f000 f954 	bl	80028d4 <MX_TIM4_Init>
  MX_TIM1_Init();
 800262c:	f000 f8ce 	bl	80027cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002630:	f000 f99e 	bl	8002970 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002634:	481d      	ldr	r0, [pc, #116]	; (80026ac <main+0xc8>)
 8002636:	f002 fa0d 	bl	8004a54 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800263a:	2100      	movs	r1, #0
 800263c:	481c      	ldr	r0, [pc, #112]	; (80026b0 <main+0xcc>)
 800263e:	f002 faab 	bl	8004b98 <HAL_TIM_PWM_Start>

  htim1.Instance->CCR1 = 10;
 8002642:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <main+0xcc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	220a      	movs	r2, #10
 8002648:	635a      	str	r2, [r3, #52]	; 0x34

  //startReflow();
	HAL_Delay(2000);
 800264a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800264e:	f000 fc43 	bl	8002ed8 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002652:	2205      	movs	r2, #5
 8002654:	4917      	ldr	r1, [pc, #92]	; (80026b4 <main+0xd0>)
 8002656:	4818      	ldr	r0, [pc, #96]	; (80026b8 <main+0xd4>)
 8002658:	f003 fa26 	bl	8005aa8 <HAL_UART_Receive_IT>
 sprintf(ConsoleMSG,"IDLE");
 800265c:	4b17      	ldr	r3, [pc, #92]	; (80026bc <main+0xd8>)
 800265e:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <main+0xdc>)
 8002660:	6810      	ldr	r0, [r2, #0]
 8002662:	6018      	str	r0, [r3, #0]
 8002664:	7912      	ldrb	r2, [r2, #4]
 8002666:	711a      	strb	r2, [r3, #4]
 Update_Page_0();
 8002668:	f7ff f820 	bl	80016ac <Update_Page_0>
  Draw_Reflow_Curve();
 800266c:	f7ff ff3a 	bl	80024e4 <Draw_Reflow_Curve>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002670:	2205      	movs	r2, #5
 8002672:	4910      	ldr	r1, [pc, #64]	; (80026b4 <main+0xd0>)
 8002674:	4810      	ldr	r0, [pc, #64]	; (80026b8 <main+0xd4>)
 8002676:	f003 fa17 	bl	8005aa8 <HAL_UART_Receive_IT>
//	  }
//	  else{
//      NEXTION_SendFloat("t0",66);
//      debug = 3;
//	  }
	  HandleGui();
 800267a:	f7ff f8f5 	bl	8001868 <HandleGui>
	  HAL_Delay(500);
 800267e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002682:	f000 fc29 	bl	8002ed8 <HAL_Delay>


	  if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 8002686:	2205      	movs	r2, #5
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <main+0xe0>)
 800268a:	480a      	ldr	r0, [pc, #40]	; (80026b4 <main+0xd0>)
 800268c:	f004 fa30 	bl	8006af0 <strncmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f1      	bne.n	800267a <main+0x96>


		  debug = 5;
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <main+0xe4>)
 8002698:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <main+0xe8>)
 800269a:	601a      	str	r2, [r3, #0]
	  HandleGui();
 800269c:	e7ed      	b.n	800267a <main+0x96>
 800269e:	bf00      	nop
 80026a0:	2000129c 	.word	0x2000129c
 80026a4:	0801fc00 	.word	0x0801fc00
 80026a8:	20000280 	.word	0x20000280
 80026ac:	20000238 	.word	0x20000238
 80026b0:	200012c4 	.word	0x200012c4
 80026b4:	20000004 	.word	0x20000004
 80026b8:	200002bc 	.word	0x200002bc
 80026bc:	20001364 	.word	0x20001364
 80026c0:	08009938 	.word	0x08009938
 80026c4:	08009860 	.word	0x08009860
 80026c8:	20000218 	.word	0x20000218
 80026cc:	40a00000 	.word	0x40a00000

080026d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b090      	sub	sp, #64	; 0x40
 80026d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fd8e 	bl	8006200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002700:	2301      	movs	r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002704:	2302      	movs	r3, #2
 8002706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800270c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800270e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4618      	mov	r0, r3
 800271a:	f001 f8ff 	bl	800391c <HAL_RCC_OscConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002724:	f000 f98c 	bl	8002a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002728:	230f      	movs	r3, #15
 800272a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800272c:	2302      	movs	r3, #2
 800272e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	2102      	movs	r1, #2
 8002742:	4618      	mov	r0, r3
 8002744:	f001 fb6a 	bl	8003e1c <HAL_RCC_ClockConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800274e:	f000 f977 	bl	8002a40 <Error_Handler>
  }
}
 8002752:	bf00      	nop
 8002754:	3740      	adds	r7, #64	; 0x40
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002762:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <MX_SPI1_Init+0x6c>)
 8002764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002766:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800276c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002774:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800277c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_SPI1_Init+0x68>)
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_SPI1_Init+0x68>)
 8002794:	2238      	movs	r2, #56	; 0x38
 8002796:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_SPI1_Init+0x68>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_SPI1_Init+0x68>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_SPI1_Init+0x68>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_SPI1_Init+0x68>)
 80027ac:	220a      	movs	r2, #10
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_SPI1_Init+0x68>)
 80027b2:	f001 fccf 	bl	8004154 <HAL_SPI_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80027bc:	f000 f940 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000130c 	.word	0x2000130c
 80027c8:	40013000 	.word	0x40013000

080027cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b092      	sub	sp, #72	; 0x48
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	615a      	str	r2, [r3, #20]
 80027ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2220      	movs	r2, #32
 80027f4:	2100      	movs	r1, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fd02 	bl	8006200 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <MX_TIM1_Init+0x100>)
 80027fe:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <MX_TIM1_Init+0x104>)
 8002800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8002802:	4b32      	ldr	r3, [pc, #200]	; (80028cc <MX_TIM1_Init+0x100>)
 8002804:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002808:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <MX_TIM1_Init+0x100>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002810:	4b2e      	ldr	r3, [pc, #184]	; (80028cc <MX_TIM1_Init+0x100>)
 8002812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002816:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002818:	4b2c      	ldr	r3, [pc, #176]	; (80028cc <MX_TIM1_Init+0x100>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <MX_TIM1_Init+0x100>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <MX_TIM1_Init+0x100>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800282a:	4828      	ldr	r0, [pc, #160]	; (80028cc <MX_TIM1_Init+0x100>)
 800282c:	f002 f964 	bl	8004af8 <HAL_TIM_PWM_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002836:	f000 f903 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002846:	4619      	mov	r1, r3
 8002848:	4820      	ldr	r0, [pc, #128]	; (80028cc <MX_TIM1_Init+0x100>)
 800284a:	f002 ff8d 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002854:	f000 f8f4 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002858:	2370      	movs	r3, #112	; 0x70
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002860:	2302      	movs	r3, #2
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002864:	2300      	movs	r3, #0
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800286c:	2300      	movs	r3, #0
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	2200      	movs	r2, #0
 800287a:	4619      	mov	r1, r3
 800287c:	4813      	ldr	r0, [pc, #76]	; (80028cc <MX_TIM1_Init+0x100>)
 800287e:	f002 fb35 	bl	8004eec <HAL_TIM_PWM_ConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002888:	f000 f8da 	bl	8002a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028aa:	1d3b      	adds	r3, r7, #4
 80028ac:	4619      	mov	r1, r3
 80028ae:	4807      	ldr	r0, [pc, #28]	; (80028cc <MX_TIM1_Init+0x100>)
 80028b0:	f002 ffb8 	bl	8005824 <HAL_TIMEx_ConfigBreakDeadTime>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80028ba:	f000 f8c1 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028be:	4803      	ldr	r0, [pc, #12]	; (80028cc <MX_TIM1_Init+0x100>)
 80028c0:	f000 f982 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 80028c4:	bf00      	nop
 80028c6:	3748      	adds	r7, #72	; 0x48
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	200012c4 	.word	0x200012c4
 80028d0:	40012c00 	.word	0x40012c00

080028d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028da:	f107 0308 	add.w	r3, r7, #8
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	605a      	str	r2, [r3, #4]
 80028e4:	609a      	str	r2, [r3, #8]
 80028e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e8:	463b      	mov	r3, r7
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <MX_TIM4_Init+0x94>)
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <MX_TIM4_Init+0x98>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <MX_TIM4_Init+0x94>)
 80028f8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80028fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <MX_TIM4_Init+0x94>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <MX_TIM4_Init+0x94>)
 8002906:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800290a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <MX_TIM4_Init+0x94>)
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <MX_TIM4_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002918:	4813      	ldr	r0, [pc, #76]	; (8002968 <MX_TIM4_Init+0x94>)
 800291a:	f002 f84b 	bl	80049b4 <HAL_TIM_Base_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002924:	f000 f88c 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800292c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800292e:	f107 0308 	add.w	r3, r7, #8
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <MX_TIM4_Init+0x94>)
 8002936:	f002 fb97 	bl	8005068 <HAL_TIM_ConfigClockSource>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002940:	f000 f87e 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800294c:	463b      	mov	r3, r7
 800294e:	4619      	mov	r1, r3
 8002950:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_TIM4_Init+0x94>)
 8002952:	f002 ff09 	bl	8005768 <HAL_TIMEx_MasterConfigSynchronization>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800295c:	f000 f870 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002960:	bf00      	nop
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000238 	.word	0x20000238
 800296c:	40000800 	.word	0x40000800

08002970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <MX_USART1_UART_Init+0x50>)
 8002978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800297c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 8002996:	220c      	movs	r2, #12
 8002998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <MX_USART1_UART_Init+0x4c>)
 80029a8:	f002 ff9f 	bl	80058ea <HAL_UART_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029b2:	f000 f845 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200002bc 	.word	0x200002bc
 80029c0:	40013800 	.word	0x40013800

080029c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ca:	f107 0308 	add.w	r3, r7, #8
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
 80029d4:	609a      	str	r2, [r3, #8]
 80029d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a16      	ldr	r2, [pc, #88]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029de:	f043 0320 	orr.w	r3, r3, #32
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <MX_GPIO_Init+0x74>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2110      	movs	r1, #16
 8002a0c:	480b      	ldr	r0, [pc, #44]	; (8002a3c <MX_GPIO_Init+0x78>)
 8002a0e:	f000 ff6d 	bl	80038ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002a12:	2310      	movs	r3, #16
 8002a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a16:	2301      	movs	r3, #1
 8002a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <MX_GPIO_Init+0x78>)
 8002a2a:	f000 fe05 	bl	8003638 <HAL_GPIO_Init>

}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010800 	.word	0x40010800

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a46:	e7fe      	b.n	8002a46 <Error_Handler+0x6>

08002a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6193      	str	r3, [r2, #24]
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_MspInit+0x5c>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	607b      	str	r3, [r7, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_MspInit+0x60>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_MspInit+0x60>)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000

08002aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0310 	add.w	r3, r7, #16
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	; (8002b34 <HAL_SPI_MspInit+0x88>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d12f      	bne.n	8002b2c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ad6:	6193      	str	r3, [r2, #24]
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6193      	str	r3, [r2, #24]
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_SPI_MspInit+0x8c>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002afc:	2320      	movs	r3, #32
 8002afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <HAL_SPI_MspInit+0x90>)
 8002b10:	f000 fd92 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4619      	mov	r1, r3
 8002b26:	4805      	ldr	r0, [pc, #20]	; (8002b3c <HAL_SPI_MspInit+0x90>)
 8002b28:	f000 fd86 	bl	8003638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40013000 	.word	0x40013000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010800 	.word	0x40010800

08002b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_TIM_PWM_MspInit+0x34>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10b      	bne.n	8002b6a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_TIM_PWM_MspInit+0x38>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_TIM_PWM_MspInit+0x38>)
 8002b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b5c:	6193      	str	r3, [r2, #24]
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_TIM_PWM_MspInit+0x38>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_TIM_Base_MspInit+0x44>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d113      	bne.n	8002bb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	61d3      	str	r3, [r2, #28]
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2101      	movs	r1, #1
 8002baa:	201e      	movs	r0, #30
 8002bac:	f000 fa8d 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bb0:	201e      	movs	r0, #30
 8002bb2:	f000 faa6 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0310 	add.w	r3, r7, #16
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <HAL_TIM_MspPostInit+0x5c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d118      	bne.n	8002c1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_TIM_MspPostInit+0x60>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_TIM_MspPostInit+0x60>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_TIM_MspPostInit+0x60>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <HAL_TIM_MspPostInit+0x64>)
 8002c16:	f000 fd0f 	bl	8003638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010800 	.word	0x40010800

08002c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a20      	ldr	r2, [pc, #128]	; (8002ccc <HAL_UART_MspInit+0x9c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d139      	bne.n	8002cc4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c5a:	6193      	str	r3, [r2, #24]
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c6e:	f043 0304 	orr.w	r3, r3, #4
 8002c72:	6193      	str	r3, [r2, #24]
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_UART_MspInit+0xa0>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4619      	mov	r1, r3
 8002c94:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <HAL_UART_MspInit+0xa4>)
 8002c96:	f000 fccf 	bl	8003638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4619      	mov	r1, r3
 8002cae:	4809      	ldr	r0, [pc, #36]	; (8002cd4 <HAL_UART_MspInit+0xa4>)
 8002cb0:	f000 fcc2 	bl	8003638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2025      	movs	r0, #37	; 0x25
 8002cba:	f000 fa06 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cbe:	2025      	movs	r0, #37	; 0x25
 8002cc0:	f000 fa1f 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010800 	.word	0x40010800

08002cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <NMI_Handler+0x4>

08002cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <HardFault_Handler+0x4>

08002ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <MemManage_Handler+0x4>

08002cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cee:	e7fe      	b.n	8002cee <BusFault_Handler+0x4>

08002cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf4:	e7fe      	b.n	8002cf4 <UsageFault_Handler+0x4>

08002cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d1e:	f000 f8bf 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM4_IRQHandler+0x10>)
 8002d2e:	f001 ffd5 	bl	8004cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000238 	.word	0x20000238

08002d3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <USART1_IRQHandler+0x10>)
 8002d42:	f002 ff05 	bl	8005b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	200002bc 	.word	0x200002bc

08002d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <_sbrk+0x5c>)
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <_sbrk+0x60>)
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <_sbrk+0x64>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <_sbrk+0x68>)
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d207      	bcs.n	8002d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d80:	f003 fa14 	bl	80061ac <__errno>
 8002d84:	4602      	mov	r2, r0
 8002d86:	230c      	movs	r3, #12
 8002d88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	e009      	b.n	8002da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <_sbrk+0x64>)
 8002da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20005000 	.word	0x20005000
 8002db0:	00000400 	.word	0x00000400
 8002db4:	2000022c 	.word	0x2000022c
 8002db8:	200013a8 	.word	0x200013a8

08002dbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002dc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002dca:	e003      	b.n	8002dd4 <LoopCopyDataInit>

08002dcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002dce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002dd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002dd2:	3104      	adds	r1, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002dd4:	480a      	ldr	r0, [pc, #40]	; (8002e00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002dd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002dda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ddc:	d3f6      	bcc.n	8002dcc <CopyDataInit>
  ldr r2, =_sbss
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002de0:	e002      	b.n	8002de8 <LoopFillZerobss>

08002de2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002de4:	f842 3b04 	str.w	r3, [r2], #4

08002de8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002dea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002dec:	d3f9      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dee:	f7ff ffe5 	bl	8002dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df2:	f003 f9e1 	bl	80061b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df6:	f7ff fbf5 	bl	80025e4 <main>
  bx lr
 8002dfa:	4770      	bx	lr
  ldr r3, =_sidata
 8002dfc:	08009c30 	.word	0x08009c30
  ldr r0, =_sdata
 8002e00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e04:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002e08:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002e0c:	200013a4 	.word	0x200013a4

08002e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <ADC1_2_IRQHandler>
	...

08002e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_Init+0x28>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_Init+0x28>)
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e24:	2003      	movs	r0, #3
 8002e26:	f000 f945 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f000 f808 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e30:	f7ff fe0a 	bl	8002a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40022000 	.word	0x40022000

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 f95d 	bl	800311e <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f000 f925 	bl	80030ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000000c 	.word	0x2000000c
 8002e98:	20000014 	.word	0x20000014
 8002e9c:	20000010 	.word	0x20000010

08002ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x1c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_IncTick+0x20>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a03      	ldr	r2, [pc, #12]	; (8002ec0 <HAL_IncTick+0x20>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000014 	.word	0x20000014
 8002ec0:	2000137c 	.word	0x2000137c

08002ec4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <HAL_GetTick+0x10>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	2000137c 	.word	0x2000137c

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_GetTick>
 8002ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d005      	beq.n	8002efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_Delay+0x40>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efe:	bf00      	nop
 8002f00:	f7ff ffe0 	bl	8002ec4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d8f7      	bhi.n	8002f00 <HAL_Delay+0x28>
  {
  }
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000014 	.word	0x20000014

08002f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f38:	4013      	ands	r3, r2
 8002f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f4e:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <__NVIC_SetPriorityGrouping+0x44>)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	60d3      	str	r3, [r2, #12]
}
 8002f54:	bf00      	nop
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <__NVIC_GetPriorityGrouping+0x18>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	f003 0307 	and.w	r3, r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	db0b      	blt.n	8002faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4906      	ldr	r1, [pc, #24]	; (8002fb4 <__NVIC_EnableIRQ+0x34>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2001      	movs	r0, #1
 8002fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	6039      	str	r1, [r7, #0]
 8002fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	db0a      	blt.n	8002fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <__NVIC_SetPriority+0x4c>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fe0:	e00a      	b.n	8002ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4908      	ldr	r1, [pc, #32]	; (8003008 <__NVIC_SetPriority+0x50>)
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	3b04      	subs	r3, #4
 8002ff0:	0112      	lsls	r2, r2, #4
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	761a      	strb	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	e000e100 	.word	0xe000e100
 8003008:	e000ed00 	.word	0xe000ed00

0800300c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300c:	b480      	push	{r7}
 800300e:	b089      	sub	sp, #36	; 0x24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f1c3 0307 	rsb	r3, r3, #7
 8003026:	2b04      	cmp	r3, #4
 8003028:	bf28      	it	cs
 800302a:	2304      	movcs	r3, #4
 800302c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3304      	adds	r3, #4
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <NVIC_EncodePriority+0x30>
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3b03      	subs	r3, #3
 800303a:	e000      	b.n	800303e <NVIC_EncodePriority+0x32>
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	401a      	ands	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003054:	f04f 31ff 	mov.w	r1, #4294967295
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	43d9      	mvns	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	4313      	orrs	r3, r2
         );
}
 8003066:	4618      	mov	r0, r3
 8003068:	3724      	adds	r7, #36	; 0x24
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f7ff ff90 	bl	8002fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff2d 	bl	8002f1c <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff42 	bl	8002f64 <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff90 	bl	800300c <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5f 	bl	8002fb8 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff35 	bl	8002f80 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800314a:	2b02      	cmp	r3, #2
 800314c:	d005      	beq.n	800315a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e051      	b.n	80031fe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 020e 	bic.w	r2, r2, #14
 8003168:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a22      	ldr	r2, [pc, #136]	; (8003208 <HAL_DMA_Abort_IT+0xd0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d029      	beq.n	80031d8 <HAL_DMA_Abort_IT+0xa0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a20      	ldr	r2, [pc, #128]	; (800320c <HAL_DMA_Abort_IT+0xd4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x9c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_DMA_Abort_IT+0xd8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01a      	beq.n	80031ce <HAL_DMA_Abort_IT+0x96>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1d      	ldr	r2, [pc, #116]	; (8003214 <HAL_DMA_Abort_IT+0xdc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d012      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x90>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1c      	ldr	r2, [pc, #112]	; (8003218 <HAL_DMA_Abort_IT+0xe0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00a      	beq.n	80031c2 <HAL_DMA_Abort_IT+0x8a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_DMA_Abort_IT+0xe4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d102      	bne.n	80031bc <HAL_DMA_Abort_IT+0x84>
 80031b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ba:	e00e      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c0:	e00b      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c6:	e008      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031cc:	e005      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d2:	e002      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031d4:	2310      	movs	r3, #16
 80031d6:	e000      	b.n	80031da <HAL_DMA_Abort_IT+0xa2>
 80031d8:	2301      	movs	r3, #1
 80031da:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_DMA_Abort_IT+0xe8>)
 80031dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
    } 
  }
  return status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40020008 	.word	0x40020008
 800320c:	4002001c 	.word	0x4002001c
 8003210:	40020030 	.word	0x40020030
 8003214:	40020044 	.word	0x40020044
 8003218:	40020058 	.word	0x40020058
 800321c:	4002006c 	.word	0x4002006c
 8003220:	40020000 	.word	0x40020000

08003224 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800323e:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_FLASH_Program+0xd8>)
 8003240:	7e1b      	ldrb	r3, [r3, #24]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_FLASH_Program+0x26>
 8003246:	2302      	movs	r3, #2
 8003248:	e054      	b.n	80032f4 <HAL_FLASH_Program+0xd0>
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <HAL_FLASH_Program+0xd8>)
 800324c:	2201      	movs	r2, #1
 800324e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003250:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003254:	f000 f8b2 	bl	80033bc <FLASH_WaitForLastOperation>
 8003258:	4603      	mov	r3, r0
 800325a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d144      	bne.n	80032ec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d102      	bne.n	800326e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	757b      	strb	r3, [r7, #21]
 800326c:	e007      	b.n	800327e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d102      	bne.n	800327a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003274:	2302      	movs	r3, #2
 8003276:	757b      	strb	r3, [r7, #21]
 8003278:	e001      	b.n	800327e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800327a:	2304      	movs	r3, #4
 800327c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800327e:	2300      	movs	r3, #0
 8003280:	75bb      	strb	r3, [r7, #22]
 8003282:	e02d      	b.n	80032e0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003284:	7dbb      	ldrb	r3, [r7, #22]
 8003286:	005a      	lsls	r2, r3, #1
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	eb02 0c03 	add.w	ip, r2, r3
 800328e:	7dbb      	ldrb	r3, [r7, #22]
 8003290:	0119      	lsls	r1, r3, #4
 8003292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003296:	f1c1 0620 	rsb	r6, r1, #32
 800329a:	f1a1 0020 	sub.w	r0, r1, #32
 800329e:	fa22 f401 	lsr.w	r4, r2, r1
 80032a2:	fa03 f606 	lsl.w	r6, r3, r6
 80032a6:	4334      	orrs	r4, r6
 80032a8:	fa23 f000 	lsr.w	r0, r3, r0
 80032ac:	4304      	orrs	r4, r0
 80032ae:	fa23 f501 	lsr.w	r5, r3, r1
 80032b2:	b2a3      	uxth	r3, r4
 80032b4:	4619      	mov	r1, r3
 80032b6:	4660      	mov	r0, ip
 80032b8:	f000 f864 	bl	8003384 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032c0:	f000 f87c 	bl	80033bc <FLASH_WaitForLastOperation>
 80032c4:	4603      	mov	r3, r0
 80032c6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <HAL_FLASH_Program+0xdc>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <HAL_FLASH_Program+0xdc>)
 80032ce:	f023 0301 	bic.w	r3, r3, #1
 80032d2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80032da:	7dbb      	ldrb	r3, [r7, #22]
 80032dc:	3301      	adds	r3, #1
 80032de:	75bb      	strb	r3, [r7, #22]
 80032e0:	7dba      	ldrb	r2, [r7, #22]
 80032e2:	7d7b      	ldrb	r3, [r7, #21]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3cd      	bcc.n	8003284 <HAL_FLASH_Program+0x60>
 80032e8:	e000      	b.n	80032ec <HAL_FLASH_Program+0xc8>
      {
        break;
 80032ea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <HAL_FLASH_Program+0xd8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	761a      	strb	r2, [r3, #24]

  return status;
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	371c      	adds	r7, #28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fc:	20001380 	.word	0x20001380
 8003300:	40022000 	.word	0x40022000

08003304 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_FLASH_Unlock+0x40>)
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_FLASH_Unlock+0x40>)
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <HAL_FLASH_Unlock+0x44>)
 800331e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_FLASH_Unlock+0x40>)
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_FLASH_Unlock+0x48>)
 8003324:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <HAL_FLASH_Unlock+0x40>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003336:	79fb      	ldrb	r3, [r7, #7]
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40022000 	.word	0x40022000
 8003348:	45670123 	.word	0x45670123
 800334c:	cdef89ab 	.word	0xcdef89ab

08003350 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_FLASH_Lock+0x1c>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_FLASH_Lock+0x1c>)
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003374:	4b02      	ldr	r3, [pc, #8]	; (8003380 <HAL_FLASH_GetError+0x10>)
 8003376:	69db      	ldr	r3, [r3, #28]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	20001380 	.word	0x20001380

08003384 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003390:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <FLASH_Program_HalfWord+0x30>)
 8003392:	2200      	movs	r2, #0
 8003394:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <FLASH_Program_HalfWord+0x34>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <FLASH_Program_HalfWord+0x34>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	887a      	ldrh	r2, [r7, #2]
 80033a6:	801a      	strh	r2, [r3, #0]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20001380 	.word	0x20001380
 80033b8:	40022000 	.word	0x40022000

080033bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff fd7e 	bl	8002ec4 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80033ca:	e010      	b.n	80033ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d00c      	beq.n	80033ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <FLASH_WaitForLastOperation+0x2e>
 80033da:	f7ff fd73 	bl	8002ec4 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d201      	bcs.n	80033ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e025      	b.n	800343a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80033ee:	4b15      	ldr	r3, [pc, #84]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e8      	bne.n	80033cc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003406:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 8003408:	2220      	movs	r2, #32
 800340a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800340c:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003424:	4b07      	ldr	r3, [pc, #28]	; (8003444 <FLASH_WaitForLastOperation+0x88>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003430:	f000 f80a 	bl	8003448 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e000      	b.n	800343a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000

08003448 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 8003468:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f043 0310 	orr.w	r3, r3, #16
 8003470:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800347e:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 8003488:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <FLASH_SetErrorCode+0x9c>)
 80034a8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80034aa:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f240 1201 	movw	r2, #257	; 0x101
 80034bc:	4293      	cmp	r3, r2
 80034be:	d106      	bne.n	80034ce <FLASH_SetErrorCode+0x86>
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	4a06      	ldr	r2, [pc, #24]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	61d3      	str	r3, [r2, #28]
}  
 80034cc:	e002      	b.n	80034d4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80034ce:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <FLASH_SetErrorCode+0x98>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60d3      	str	r3, [r2, #12]
}  
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40022000 	.word	0x40022000
 80034e4:	20001380 	.word	0x20001380

080034e8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <HAL_FLASHEx_Erase+0xd0>)
 80034fc:	7e1b      	ldrb	r3, [r3, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_FLASHEx_Erase+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e053      	b.n	80035ae <HAL_FLASHEx_Erase+0xc6>
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <HAL_FLASHEx_Erase+0xd0>)
 8003508:	2201      	movs	r2, #1
 800350a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d116      	bne.n	8003542 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003514:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003518:	f7ff ff50 	bl	80033bc <FLASH_WaitForLastOperation>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d141      	bne.n	80035a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003522:	2001      	movs	r0, #1
 8003524:	f000 f84c 	bl	80035c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003528:	f24c 3050 	movw	r0, #50000	; 0xc350
 800352c:	f7ff ff46 	bl	80033bc <FLASH_WaitForLastOperation>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003534:	4b21      	ldr	r3, [pc, #132]	; (80035bc <HAL_FLASHEx_Erase+0xd4>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_FLASHEx_Erase+0xd4>)
 800353a:	f023 0304 	bic.w	r3, r3, #4
 800353e:	6113      	str	r3, [r2, #16]
 8003540:	e031      	b.n	80035a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003542:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003546:	f7ff ff39 	bl	80033bc <FLASH_WaitForLastOperation>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d12a      	bne.n	80035a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f04f 32ff 	mov.w	r2, #4294967295
 8003556:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	e019      	b.n	8003594 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003560:	68b8      	ldr	r0, [r7, #8]
 8003562:	f000 f849 	bl	80035f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003566:	f24c 3050 	movw	r0, #50000	; 0xc350
 800356a:	f7ff ff27 	bl	80033bc <FLASH_WaitForLastOperation>
 800356e:	4603      	mov	r3, r0
 8003570:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <HAL_FLASHEx_Erase+0xd4>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4a11      	ldr	r2, [pc, #68]	; (80035bc <HAL_FLASHEx_Erase+0xd4>)
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	601a      	str	r2, [r3, #0]
            break;
 800358a:	e00c      	b.n	80035a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003592:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	029a      	lsls	r2, r3, #10
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3dc      	bcc.n	8003560 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80035a6:	4b04      	ldr	r3, [pc, #16]	; (80035b8 <HAL_FLASHEx_Erase+0xd0>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	761a      	strb	r2, [r3, #24]

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20001380 	.word	0x20001380
 80035bc:	40022000 	.word	0x40022000

080035c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <FLASH_MassErase+0x30>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <FLASH_MassErase+0x34>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <FLASH_MassErase+0x34>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <FLASH_MassErase+0x34>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <FLASH_MassErase+0x34>)
 80035e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	20001380 	.word	0x20001380
 80035f4:	40022000 	.word	0x40022000

080035f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <FLASH_PageErase+0x38>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <FLASH_PageErase+0x3c>)
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <FLASH_PageErase+0x3c>)
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <FLASH_PageErase+0x3c>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <FLASH_PageErase+0x3c>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	4a05      	ldr	r2, [pc, #20]	; (8003634 <FLASH_PageErase+0x3c>)
 800361e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003622:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20001380 	.word	0x20001380
 8003634:	40022000 	.word	0x40022000

08003638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b08b      	sub	sp, #44	; 0x2c
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364a:	e127      	b.n	800389c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800364c:	2201      	movs	r2, #1
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 8116 	bne.w	8003896 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b12      	cmp	r3, #18
 8003670:	d034      	beq.n	80036dc <HAL_GPIO_Init+0xa4>
 8003672:	2b12      	cmp	r3, #18
 8003674:	d80d      	bhi.n	8003692 <HAL_GPIO_Init+0x5a>
 8003676:	2b02      	cmp	r3, #2
 8003678:	d02b      	beq.n	80036d2 <HAL_GPIO_Init+0x9a>
 800367a:	2b02      	cmp	r3, #2
 800367c:	d804      	bhi.n	8003688 <HAL_GPIO_Init+0x50>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d031      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
 8003682:	2b01      	cmp	r3, #1
 8003684:	d01c      	beq.n	80036c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003686:	e048      	b.n	800371a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003688:	2b03      	cmp	r3, #3
 800368a:	d043      	beq.n	8003714 <HAL_GPIO_Init+0xdc>
 800368c:	2b11      	cmp	r3, #17
 800368e:	d01b      	beq.n	80036c8 <HAL_GPIO_Init+0x90>
          break;
 8003690:	e043      	b.n	800371a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003692:	4a89      	ldr	r2, [pc, #548]	; (80038b8 <HAL_GPIO_Init+0x280>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d026      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
 8003698:	4a87      	ldr	r2, [pc, #540]	; (80038b8 <HAL_GPIO_Init+0x280>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d806      	bhi.n	80036ac <HAL_GPIO_Init+0x74>
 800369e:	4a87      	ldr	r2, [pc, #540]	; (80038bc <HAL_GPIO_Init+0x284>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d020      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
 80036a4:	4a86      	ldr	r2, [pc, #536]	; (80038c0 <HAL_GPIO_Init+0x288>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
          break;
 80036aa:	e036      	b.n	800371a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80036ac:	4a85      	ldr	r2, [pc, #532]	; (80038c4 <HAL_GPIO_Init+0x28c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d019      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
 80036b2:	4a85      	ldr	r2, [pc, #532]	; (80038c8 <HAL_GPIO_Init+0x290>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d016      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
 80036b8:	4a84      	ldr	r2, [pc, #528]	; (80038cc <HAL_GPIO_Init+0x294>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0xae>
          break;
 80036be:	e02c      	b.n	800371a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	623b      	str	r3, [r7, #32]
          break;
 80036c6:	e028      	b.n	800371a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	3304      	adds	r3, #4
 80036ce:	623b      	str	r3, [r7, #32]
          break;
 80036d0:	e023      	b.n	800371a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	3308      	adds	r3, #8
 80036d8:	623b      	str	r3, [r7, #32]
          break;
 80036da:	e01e      	b.n	800371a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	330c      	adds	r3, #12
 80036e2:	623b      	str	r3, [r7, #32]
          break;
 80036e4:	e019      	b.n	800371a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ee:	2304      	movs	r3, #4
 80036f0:	623b      	str	r3, [r7, #32]
          break;
 80036f2:	e012      	b.n	800371a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036fc:	2308      	movs	r3, #8
 80036fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	611a      	str	r2, [r3, #16]
          break;
 8003706:	e008      	b.n	800371a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003708:	2308      	movs	r3, #8
 800370a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	615a      	str	r2, [r3, #20]
          break;
 8003712:	e002      	b.n	800371a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
          break;
 8003718:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2bff      	cmp	r3, #255	; 0xff
 800371e:	d801      	bhi.n	8003724 <HAL_GPIO_Init+0xec>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	e001      	b.n	8003728 <HAL_GPIO_Init+0xf0>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2bff      	cmp	r3, #255	; 0xff
 800372e:	d802      	bhi.n	8003736 <HAL_GPIO_Init+0xfe>
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	e002      	b.n	800373c <HAL_GPIO_Init+0x104>
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	3b08      	subs	r3, #8
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	210f      	movs	r1, #15
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	fa01 f303 	lsl.w	r3, r1, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	6a39      	ldr	r1, [r7, #32]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	431a      	orrs	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8096 	beq.w	8003896 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800376a:	4b59      	ldr	r3, [pc, #356]	; (80038d0 <HAL_GPIO_Init+0x298>)
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4a58      	ldr	r2, [pc, #352]	; (80038d0 <HAL_GPIO_Init+0x298>)
 8003770:	f043 0301 	orr.w	r3, r3, #1
 8003774:	6193      	str	r3, [r2, #24]
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <HAL_GPIO_Init+0x298>)
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003782:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <HAL_GPIO_Init+0x29c>)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	089b      	lsrs	r3, r3, #2
 8003788:	3302      	adds	r3, #2
 800378a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800378e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	220f      	movs	r2, #15
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43db      	mvns	r3, r3
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <HAL_GPIO_Init+0x2a0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_GPIO_Init+0x19e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <HAL_GPIO_Init+0x2a4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00d      	beq.n	80037d2 <HAL_GPIO_Init+0x19a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a49      	ldr	r2, [pc, #292]	; (80038e0 <HAL_GPIO_Init+0x2a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x196>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a48      	ldr	r2, [pc, #288]	; (80038e4 <HAL_GPIO_Init+0x2ac>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_GPIO_Init+0x192>
 80037c6:	2303      	movs	r3, #3
 80037c8:	e006      	b.n	80037d8 <HAL_GPIO_Init+0x1a0>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e004      	b.n	80037d8 <HAL_GPIO_Init+0x1a0>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e002      	b.n	80037d8 <HAL_GPIO_Init+0x1a0>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_GPIO_Init+0x1a0>
 80037d6:	2300      	movs	r3, #0
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	f002 0203 	and.w	r2, r2, #3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	4093      	lsls	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037e8:	493a      	ldr	r1, [pc, #232]	; (80038d4 <HAL_GPIO_Init+0x29c>)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	3302      	adds	r3, #2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003802:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4938      	ldr	r1, [pc, #224]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
 800380e:	e006      	b.n	800381e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	43db      	mvns	r3, r3
 8003818:	4933      	ldr	r1, [pc, #204]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800381a:	4013      	ands	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800382a:	4b2f      	ldr	r3, [pc, #188]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	492e      	ldr	r1, [pc, #184]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 8003836:	e006      	b.n	8003846 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	43db      	mvns	r3, r3
 8003840:	4929      	ldr	r1, [pc, #164]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003842:	4013      	ands	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003852:	4b25      	ldr	r3, [pc, #148]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	4924      	ldr	r1, [pc, #144]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
 800385e:	e006      	b.n	800386e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	43db      	mvns	r3, r3
 8003868:	491f      	ldr	r1, [pc, #124]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800386a:	4013      	ands	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	491a      	ldr	r1, [pc, #104]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
 8003886:	e006      	b.n	8003896 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003888:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	43db      	mvns	r3, r3
 8003890:	4915      	ldr	r1, [pc, #84]	; (80038e8 <HAL_GPIO_Init+0x2b0>)
 8003892:	4013      	ands	r3, r2
 8003894:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f47f aed0 	bne.w	800364c <HAL_GPIO_Init+0x14>
  }
}
 80038ac:	bf00      	nop
 80038ae:	372c      	adds	r7, #44	; 0x2c
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	10210000 	.word	0x10210000
 80038bc:	10110000 	.word	0x10110000
 80038c0:	10120000 	.word	0x10120000
 80038c4:	10310000 	.word	0x10310000
 80038c8:	10320000 	.word	0x10320000
 80038cc:	10220000 	.word	0x10220000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40010800 	.word	0x40010800
 80038dc:	40010c00 	.word	0x40010c00
 80038e0:	40011000 	.word	0x40011000
 80038e4:	40011400 	.word	0x40011400
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
 80038f8:	4613      	mov	r3, r2
 80038fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038fc:	787b      	ldrb	r3, [r7, #1]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003902:	887a      	ldrh	r2, [r7, #2]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003908:	e003      	b.n	8003912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e26c      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8087 	beq.w	8003a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800393c:	4b92      	ldr	r3, [pc, #584]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b04      	cmp	r3, #4
 8003946:	d00c      	beq.n	8003962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003948:	4b8f      	ldr	r3, [pc, #572]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d112      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
 8003954:	4b8c      	ldr	r3, [pc, #560]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d10b      	bne.n	800397a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d06c      	beq.n	8003a48 <HAL_RCC_OscConfig+0x12c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d168      	bne.n	8003a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e246      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x76>
 8003984:	4b80      	ldr	r3, [pc, #512]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a7f      	ldr	r2, [pc, #508]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800398a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e02e      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10c      	bne.n	80039b4 <HAL_RCC_OscConfig+0x98>
 800399a:	4b7b      	ldr	r3, [pc, #492]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7a      	ldr	r2, [pc, #488]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	4b78      	ldr	r3, [pc, #480]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a77      	ldr	r2, [pc, #476]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e01d      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0xbc>
 80039be:	4b72      	ldr	r3, [pc, #456]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a71      	ldr	r2, [pc, #452]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b6f      	ldr	r3, [pc, #444]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6e      	ldr	r2, [pc, #440]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0xd4>
 80039d8:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b68      	ldr	r3, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a67      	ldr	r2, [pc, #412]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 80039ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d013      	beq.n	8003a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fa64 	bl	8002ec4 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff fa60 	bl	8002ec4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e1fa      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b5d      	ldr	r3, [pc, #372]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe4>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7ff fa50 	bl	8002ec4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7ff fa4c 	bl	8002ec4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1e6      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x10c>
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d063      	beq.n	8003b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a56:	4b4c      	ldr	r3, [pc, #304]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a62:	4b49      	ldr	r3, [pc, #292]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
 8003a6e:	4b46      	ldr	r3, [pc, #280]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e1ba      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4939      	ldr	r1, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa6:	e03a      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d020      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab0:	4b36      	ldr	r3, [pc, #216]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7ff fa05 	bl	8002ec4 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003abe:	f7ff fa01 	bl	8002ec4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e19b      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4927      	ldr	r1, [pc, #156]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
 8003af0:	e015      	b.n	8003b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_RCC_OscConfig+0x270>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7ff f9e4 	bl	8002ec4 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b00:	f7ff f9e0 	bl	8002ec4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e17a      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d03a      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d019      	beq.n	8003b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b32:	4b17      	ldr	r3, [pc, #92]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b38:	f7ff f9c4 	bl	8002ec4 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b40:	f7ff f9c0 	bl	8002ec4 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e15a      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f000 fada 	bl	8004118 <RCC_Delay>
 8003b64:	e01c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_RCC_OscConfig+0x274>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7ff f9aa 	bl	8002ec4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b72:	e00f      	b.n	8003b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b74:	f7ff f9a6 	bl	8002ec4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d908      	bls.n	8003b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e140      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	42420000 	.word	0x42420000
 8003b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b9e      	ldr	r3, [pc, #632]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e9      	bne.n	8003b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a6 	beq.w	8003cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bb2:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4a93      	ldr	r2, [pc, #588]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	61d3      	str	r3, [r2, #28]
 8003bca:	4b91      	ldr	r3, [pc, #580]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b8e      	ldr	r3, [pc, #568]	; (8003e14 <HAL_RCC_OscConfig+0x4f8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b8b      	ldr	r3, [pc, #556]	; (8003e14 <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a8a      	ldr	r2, [pc, #552]	; (8003e14 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7ff f967 	bl	8002ec4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7ff f963 	bl	8002ec4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b64      	cmp	r3, #100	; 0x64
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0fd      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b81      	ldr	r3, [pc, #516]	; (8003e14 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x312>
 8003c20:	4b7b      	ldr	r3, [pc, #492]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	4a7a      	ldr	r2, [pc, #488]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6213      	str	r3, [r2, #32]
 8003c2c:	e02d      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x334>
 8003c36:	4b76      	ldr	r3, [pc, #472]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	6213      	str	r3, [r2, #32]
 8003c42:	4b73      	ldr	r3, [pc, #460]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a72      	ldr	r2, [pc, #456]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	f023 0304 	bic.w	r3, r3, #4
 8003c4c:	6213      	str	r3, [r2, #32]
 8003c4e:	e01c      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d10c      	bne.n	8003c72 <HAL_RCC_OscConfig+0x356>
 8003c58:	4b6d      	ldr	r3, [pc, #436]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	4a6c      	ldr	r2, [pc, #432]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6213      	str	r3, [r2, #32]
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4a69      	ldr	r2, [pc, #420]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6213      	str	r3, [r2, #32]
 8003c70:	e00b      	b.n	8003c8a <HAL_RCC_OscConfig+0x36e>
 8003c72:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a66      	ldr	r2, [pc, #408]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a63      	ldr	r2, [pc, #396]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c92:	f7ff f917 	bl	8002ec4 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	e00a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7ff f913 	bl	8002ec4 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e0ab      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb0:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0ee      	beq.n	8003c9a <HAL_RCC_OscConfig+0x37e>
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7ff f901 	bl	8002ec4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7ff f8fd 	bl	8002ec4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e095      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1ee      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4a47      	ldr	r2, [pc, #284]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8081 	beq.w	8003e06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d04:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d061      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d146      	bne.n	8003da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <HAL_RCC_OscConfig+0x4fc>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1e:	f7ff f8d1 	bl	8002ec4 <HAL_GetTick>
 8003d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d26:	f7ff f8cd 	bl	8002ec4 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e067      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d38:	4b35      	ldr	r3, [pc, #212]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f0      	bne.n	8003d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d108      	bne.n	8003d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d4e:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	492d      	ldr	r1, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a19      	ldr	r1, [r3, #32]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	430b      	orrs	r3, r1
 8003d72:	4927      	ldr	r1, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_OscConfig+0x4fc>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7ff f8a1 	bl	8002ec4 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7ff f89d 	bl	8002ec4 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e037      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x46a>
 8003da4:	e02f      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da6:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <HAL_RCC_OscConfig+0x4fc>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dac:	f7ff f88a 	bl	8002ec4 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7ff f886 	bl	8002ec4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e020      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x498>
 8003dd2:	e018      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e013      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de0:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <HAL_RCC_OscConfig+0x4f4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d106      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42420060 	.word	0x42420060

08003e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0d0      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d910      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b67      	ldr	r3, [pc, #412]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 0207 	bic.w	r2, r3, #7
 8003e46:	4965      	ldr	r1, [pc, #404]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e0b8      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e78:	4b59      	ldr	r3, [pc, #356]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e90:	4b53      	ldr	r3, [pc, #332]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a52      	ldr	r2, [pc, #328]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	494d      	ldr	r1, [pc, #308]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d040      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b47      	ldr	r3, [pc, #284]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d115      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e07f      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b41      	ldr	r3, [pc, #260]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e073      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b3d      	ldr	r3, [pc, #244]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06b      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b39      	ldr	r3, [pc, #228]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4936      	ldr	r1, [pc, #216]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fe ffda 	bl	8002ec4 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fe ffd6 	bl	8002ec4 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e053      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d210      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 0207 	bic.w	r2, r3, #7
 8003f52:	4922      	ldr	r1, [pc, #136]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b20      	ldr	r3, [pc, #128]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e032      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	4916      	ldr	r1, [pc, #88]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003faa:	f000 f821 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fae:	4601      	mov	r1, r0
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8003fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x1d0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe ff38 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	08009964 	.word	0x08009964
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	20000010 	.word	0x20000010

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b490      	push	{r4, r7}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	; (80040a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ff8:	1d3c      	adds	r4, r7, #4
 8003ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004000:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b04      	cmp	r3, #4
 8004028:	d002      	beq.n	8004030 <HAL_RCC_GetSysClockFreq+0x40>
 800402a:	2b08      	cmp	r3, #8
 800402c:	d003      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x46>
 800402e:	e02d      	b.n	800408c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004032:	623b      	str	r3, [r7, #32]
      break;
 8004034:	e02d      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	0c9b      	lsrs	r3, r3, #18
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004042:	4413      	add	r3, r2
 8004044:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004048:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004054:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c5b      	lsrs	r3, r3, #17
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004062:	4413      	add	r3, r2
 8004064:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004068:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800406e:	fb02 f203 	mul.w	r2, r2, r3
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	fbb2 f3f3 	udiv	r3, r2, r3
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
 800407a:	e004      	b.n	8004086 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4a0c      	ldr	r2, [pc, #48]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	623b      	str	r3, [r7, #32]
      break;
 800408a:	e002      	b.n	8004092 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b07      	ldr	r3, [pc, #28]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800408e:	623b      	str	r3, [r7, #32]
      break;
 8004090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004092:	6a3b      	ldr	r3, [r7, #32]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3728      	adds	r7, #40	; 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bc90      	pop	{r4, r7}
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	08009950 	.word	0x08009950
 80040a4:	08009960 	.word	0x08009960
 80040a8:	40021000 	.word	0x40021000
 80040ac:	007a1200 	.word	0x007a1200
 80040b0:	003d0900 	.word	0x003d0900

080040b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b02      	ldr	r3, [pc, #8]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff2 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d0:	4601      	mov	r1, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4a03      	ldr	r2, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5cd3      	ldrb	r3, [r2, r3]
 80040e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	08009974 	.word	0x08009974

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffde 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040f8:	4601      	mov	r1, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	0adb      	lsrs	r3, r3, #11
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4a03      	ldr	r2, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5cd3      	ldrb	r3, [r2, r3]
 8004108:	fa21 f303 	lsr.w	r3, r1, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000
 8004114:	08009974 	.word	0x08009974

08004118 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <RCC_Delay+0x34>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <RCC_Delay+0x38>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a5b      	lsrs	r3, r3, #9
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004134:	bf00      	nop
  }
  while (Delay --);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1e5a      	subs	r2, r3, #1
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <RCC_Delay+0x1c>
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	2000000c 	.word	0x2000000c
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e076      	b.n	8004254 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004176:	d009      	beq.n	800418c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
 800417e:	e005      	b.n	800418c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe fc80 	bl	8002aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	0c1a      	lsrs	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f002 0204 	and.w	r2, r2, #4
 8004232:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004242:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004278:	d112      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10e      	bne.n	80042a0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2204      	movs	r2, #4
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f8f1 	bl	800447e <HAL_SPI_TransmitReceive>
 800429c:	4603      	mov	r3, r0
 800429e:	e0ea      	b.n	8004476 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Receive+0x52>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0e3      	b.n	8004476 <HAL_SPI_Receive+0x21a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042b6:	f7fe fe05 	bl	8002ec4 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d002      	beq.n	80042ce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
 80042ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042cc:	e0ca      	b.n	8004464 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <HAL_SPI_Receive+0x7e>
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042de:	e0c1      	b.n	8004464 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2204      	movs	r2, #4
 80042e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	88fa      	ldrh	r2, [r7, #6]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d10f      	bne.n	8004348 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004336:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004346:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d007      	beq.n	8004366 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004364:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d162      	bne.n	8004434 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800436e:	e02e      	b.n	80043ce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d115      	bne.n	80043aa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f103 020c 	add.w	r2, r3, #12
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	7812      	ldrb	r2, [r2, #0]
 800438c:	b2d2      	uxtb	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043a8:	e011      	b.n	80043ce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043aa:	f7fe fd8b 	bl	8002ec4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d803      	bhi.n	80043c2 <HAL_SPI_Receive+0x166>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c0:	d102      	bne.n	80043c8 <HAL_SPI_Receive+0x16c>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043cc:	e04a      	b.n	8004464 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1cb      	bne.n	8004370 <HAL_SPI_Receive+0x114>
 80043d8:	e031      	b.n	800443e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d113      	bne.n	8004410 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	b292      	uxth	r2, r2
 80043f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800440e:	e011      	b.n	8004434 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004410:	f7fe fd58 	bl	8002ec4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d803      	bhi.n	8004428 <HAL_SPI_Receive+0x1cc>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d102      	bne.n	800442e <HAL_SPI_Receive+0x1d2>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004432:	e017      	b.n	8004464 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cd      	bne.n	80043da <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fa46 	bl	80048d4 <SPI_EndRxTransaction>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	75fb      	strb	r3, [r7, #23]
 8004460:	e000      	b.n	8004464 <HAL_SPI_Receive+0x208>
  }

error :
 8004462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08c      	sub	sp, #48	; 0x30
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x26>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e18a      	b.n	80047ba <HAL_SPI_TransmitReceive+0x33c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ac:	f7fe fd0a 	bl	8002ec4 <HAL_GetTick>
 80044b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d00f      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x70>
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d4:	d107      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x68>
 80044de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d003      	beq.n	80044ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
 80044e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80044ec:	e15b      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x82>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x82>
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004506:	e14e      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b04      	cmp	r3, #4
 8004512:	d003      	beq.n	800451c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2205      	movs	r2, #5
 8004518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	887a      	ldrh	r2, [r7, #2]
 800452c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d007      	beq.n	8004570 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800456e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004578:	d178      	bne.n	800466c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x10a>
 8004582:	8b7b      	ldrh	r3, [r7, #26]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d166      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ac:	e053      	b.n	8004656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d11b      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x176>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x176>
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d113      	bne.n	80045f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	881a      	ldrh	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	1c9a      	adds	r2, r3, #2
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d119      	bne.n	8004636 <HAL_SPI_TransmitReceive+0x1b8>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d014      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	b292      	uxth	r2, r2
 8004618:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004632:	2301      	movs	r3, #1
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004636:	f7fe fc45 	bl	8002ec4 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004642:	429a      	cmp	r2, r3
 8004644:	d807      	bhi.n	8004656 <HAL_SPI_TransmitReceive+0x1d8>
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d003      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004654:	e0a7      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1a6      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x130>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1a1      	bne.n	80045ae <HAL_SPI_TransmitReceive+0x130>
 800466a:	e07c      	b.n	8004766 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_TransmitReceive+0x1fc>
 8004674:	8b7b      	ldrh	r3, [r7, #26]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d16b      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a0:	e057      	b.n	8004752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d11c      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x26c>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x26c>
 80046ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d114      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <HAL_SPI_TransmitReceive+0x2ae>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d014      	beq.n	800472c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800472c:	f7fe fbca 	bl	8002ec4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_TransmitReceive+0x2c6>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2cc>
 8004744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004750:	e029      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004756:	b29b      	uxth	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1a2      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x224>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d19d      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f904 	bl	8004978 <SPI_EndRxTxTransaction>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004782:	e010      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e000      	b.n	80047a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3730      	adds	r7, #48	; 0x30
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047d4:	f7fe fb76 	bl	8002ec4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	4413      	add	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047e4:	f7fe fb6e 	bl	8002ec4 <HAL_GetTick>
 80047e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047ea:	4b39      	ldr	r3, [pc, #228]	; (80048d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	015b      	lsls	r3, r3, #5
 80047f0:	0d1b      	lsrs	r3, r3, #20
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047fa:	e054      	b.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d050      	beq.n	80048a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004804:	f7fe fb5e 	bl	8002ec4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	d902      	bls.n	800481a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d13d      	bne.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d111      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483c:	d004      	beq.n	8004848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004846:	d107      	bne.n	8004858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004860:	d10f      	bne.n	8004882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e017      	b.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d19b      	bne.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3720      	adds	r7, #32
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000000c 	.word	0x2000000c

080048d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af02      	add	r7, sp, #8
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e8:	d111      	bne.n	800490e <SPI_EndRxTransaction+0x3a>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f2:	d004      	beq.n	80048fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fc:	d107      	bne.n	800490e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d117      	bne.n	8004948 <SPI_EndRxTransaction+0x74>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d112      	bne.n	8004948 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	2101      	movs	r1, #1
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff ff49 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01a      	beq.n	800496e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e013      	b.n	8004970 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ff36 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e000      	b.n	8004970 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2200      	movs	r2, #0
 800498c:	2180      	movs	r1, #128	; 0x80
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff ff18 	bl	80047c4 <SPI_WaitFlagStateUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d007      	beq.n	80049aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e000      	b.n	80049ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e041      	b.n	8004a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe f8ce 	bl	8002b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f000 fc14 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e03a      	b.n	8004ae2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <HAL_TIM_Base_Start_IT+0x98>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00e      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d009      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x58>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d111      	bne.n	8004ad0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d010      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0201 	orr.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	e007      	b.n	8004ae0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800

08004af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fe f80e 	bl	8002b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fb72 	bl	8005220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x24>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e022      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d109      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x3e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e015      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x58>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e008      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e05e      	b.n	8004cc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x82>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	e013      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x92>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	e00b      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fd68 	bl	8005720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_TIM_PWM_Start+0x138>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIM_PWM_Start+0x138>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <HAL_TIM_PWM_Start+0x13c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_PWM_Start+0xfa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a12      	ldr	r2, [pc, #72]	; (8004cd8 <HAL_TIM_PWM_Start+0x140>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d111      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d010      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	e007      	b.n	8004cc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800

08004cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0202 	mvn.w	r2, #2
 8004d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa62 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa55 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fa64 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d122      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d11b      	bne.n	8004d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0204 	mvn.w	r2, #4
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fa38 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa2b 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fa3a 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d122      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d11b      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0208 	mvn.w	r2, #8
 8004db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fa0e 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fa01 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa10 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d122      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d11b      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0210 	mvn.w	r2, #16
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f9e4 	bl	80051e8 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f9d7 	bl	80051d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9e6 	bl	80051fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0201 	mvn.w	r2, #1
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd f8b4 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e78:	2b80      	cmp	r3, #128	; 0x80
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fd26 	bl	80058d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9aa 	bl	800520c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0220 	mvn.w	r2, #32
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fcf1 	bl	80058c6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e0ac      	b.n	8005060 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	f200 809f 	bhi.w	8005054 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08005055 	.word	0x08005055
 8004f24:	08005055 	.word	0x08005055
 8004f28:	08005055 	.word	0x08005055
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	08005055 	.word	0x08005055
 8004f34:	08005055 	.word	0x08005055
 8004f38:	08005055 	.word	0x08005055
 8004f3c:	08004fd3 	.word	0x08004fd3
 8004f40:	08005055 	.word	0x08005055
 8004f44:	08005055 	.word	0x08005055
 8004f48:	08005055 	.word	0x08005055
 8004f4c:	08005013 	.word	0x08005013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9c4 	bl	80052e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0208 	orr.w	r2, r2, #8
 8004f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 0204 	bic.w	r2, r2, #4
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	619a      	str	r2, [r3, #24]
      break;
 8004f8e:	e062      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fa0a 	bl	80053b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699a      	ldr	r2, [r3, #24]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	021a      	lsls	r2, r3, #8
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	619a      	str	r2, [r3, #24]
      break;
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa53 	bl	8005484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0208 	orr.w	r2, r2, #8
 8004fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0204 	bic.w	r2, r2, #4
 8004ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69d9      	ldr	r1, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
      break;
 8005010:	e021      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 fa9d 	bl	8005558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69d9      	ldr	r1, [r3, #28]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	021a      	lsls	r2, r3, #8
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	61da      	str	r2, [r3, #28]
      break;
 8005052:	e000      	b.n	8005056 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005054:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_TIM_ConfigClockSource+0x18>
 800507c:	2302      	movs	r3, #2
 800507e:	e0a6      	b.n	80051ce <HAL_TIM_ConfigClockSource+0x166>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800509e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b40      	cmp	r3, #64	; 0x40
 80050b6:	d067      	beq.n	8005188 <HAL_TIM_ConfigClockSource+0x120>
 80050b8:	2b40      	cmp	r3, #64	; 0x40
 80050ba:	d80b      	bhi.n	80050d4 <HAL_TIM_ConfigClockSource+0x6c>
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d073      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0x140>
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d802      	bhi.n	80050ca <HAL_TIM_ConfigClockSource+0x62>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d06f      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050c8:	e078      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d06c      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0x140>
 80050ce:	2b30      	cmp	r3, #48	; 0x30
 80050d0:	d06a      	beq.n	80051a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050d2:	e073      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d00d      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0x8c>
 80050d8:	2b70      	cmp	r3, #112	; 0x70
 80050da:	d804      	bhi.n	80050e6 <HAL_TIM_ConfigClockSource+0x7e>
 80050dc:	2b50      	cmp	r3, #80	; 0x50
 80050de:	d033      	beq.n	8005148 <HAL_TIM_ConfigClockSource+0xe0>
 80050e0:	2b60      	cmp	r3, #96	; 0x60
 80050e2:	d041      	beq.n	8005168 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050e4:	e06a      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ea:	d066      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x152>
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d017      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050f2:	e063      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 faed 	bl	80056e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005116:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]
      break;
 8005120:	e04c      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f000 fad6 	bl	80056e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005144:	609a      	str	r2, [r3, #8]
      break;
 8005146:	e039      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	461a      	mov	r2, r3
 8005156:	f000 fa4d 	bl	80055f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2150      	movs	r1, #80	; 0x50
 8005160:	4618      	mov	r0, r3
 8005162:	f000 faa4 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8005166:	e029      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	461a      	mov	r2, r3
 8005176:	f000 fa6b 	bl	8005650 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2160      	movs	r1, #96	; 0x60
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fa94 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 8005186:	e019      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	461a      	mov	r2, r3
 8005196:	f000 fa2d 	bl	80055f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2140      	movs	r1, #64	; 0x40
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fa84 	bl	80056ae <TIM_ITRx_SetConfig>
      break;
 80051a6:	e009      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fa7b 	bl	80056ae <TIM_ITRx_SetConfig>
        break;
 80051b8:	e000      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
	...

08005220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a29      	ldr	r2, [pc, #164]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00b      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d007      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d003      	beq.n	8005250 <TIM_Base_SetConfig+0x30>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d108      	bne.n	8005262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00b      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d007      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <TIM_Base_SetConfig+0xbc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_Base_SetConfig+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_Base_SetConfig+0xc0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d108      	bne.n	8005294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a07      	ldr	r2, [pc, #28]	; (80052d8 <TIM_Base_SetConfig+0xb8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	615a      	str	r2, [r3, #20]
}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800

080052e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0302 	bic.w	r3, r3, #2
 800532c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <TIM_OC1_SetConfig+0xc8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10c      	bne.n	800535a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0308 	bic.w	r3, r3, #8
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f023 0304 	bic.w	r3, r3, #4
 8005358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <TIM_OC1_SetConfig+0xc8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d111      	bne.n	8005386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40012c00 	.word	0x40012c00

080053b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0210 	bic.w	r2, r3, #16
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0320 	bic.w	r3, r3, #32
 80053fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <TIM_OC2_SetConfig+0xd0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d10d      	bne.n	800542c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800542a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a14      	ldr	r2, [pc, #80]	; (8005480 <TIM_OC2_SetConfig+0xd0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d113      	bne.n	800545c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800543a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr
 8005480:	40012c00 	.word	0x40012c00

08005484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <TIM_OC3_SetConfig+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10d      	bne.n	80054fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a14      	ldr	r2, [pc, #80]	; (8005554 <TIM_OC3_SetConfig+0xd0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d113      	bne.n	800552e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800550c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	621a      	str	r2, [r3, #32]
}
 8005548:	bf00      	nop
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00

08005558 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <TIM_OC4_SetConfig+0x98>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d109      	bne.n	80055cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	019b      	lsls	r3, r3, #6
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bc80      	pop	{r7}
 80055ee:	4770      	bx	lr
 80055f0:	40012c00 	.word	0x40012c00

080055f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	f023 0201 	bic.w	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800561e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f023 030a 	bic.w	r3, r3, #10
 8005630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr

08005650 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f023 0210 	bic.w	r2, r3, #16
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800567a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	031b      	lsls	r3, r3, #12
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800568c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f043 0307 	orr.w	r3, r3, #7
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	021a      	lsls	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	431a      	orrs	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	609a      	str	r2, [r3, #8]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1a      	ldr	r2, [r3, #32]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
}
 800575e:	bf00      	nop
 8005760:	371c      	adds	r7, #28
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800577c:	2302      	movs	r3, #2
 800577e:	e046      	b.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a16      	ldr	r2, [pc, #88]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057cc:	d009      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a10      	ldr	r2, [pc, #64]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10c      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	bc80      	pop	{r7}
 8005816:	4770      	bx	lr
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800

08005824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e03d      	b.n	80058bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e03f      	b.n	800597c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fd f98d 	bl	8002c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2224      	movs	r2, #36	; 0x24
 800591a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800592c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb82 	bl	8006038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005942:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005952:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005962:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af02      	add	r7, sp, #8
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	4613      	mov	r3, r2
 8005992:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d17c      	bne.n	8005a9e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Transmit+0x2c>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e075      	b.n	8005aa0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Transmit+0x3e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e06e      	b.n	8005aa0 <HAL_UART_Transmit+0x11c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2221      	movs	r2, #33	; 0x21
 80059d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80059d8:	f7fd fa74 	bl	8002ec4 <HAL_GetTick>
 80059dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f2:	d108      	bne.n	8005a06 <HAL_UART_Transmit+0x82>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	e003      	b.n	8005a0e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005a16:	e02a      	b.n	8005a6e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 f9a6 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e036      	b.n	8005aa0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a46:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e007      	b.n	8005a60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	781a      	ldrb	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1cf      	bne.n	8005a18 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2140      	movs	r1, #64	; 0x40
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f976 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e006      	b.n	8005aa0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e000      	b.n	8005aa0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
  }
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d140      	bne.n	8005b44 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_UART_Receive_IT+0x26>
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e039      	b.n	8005b46 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Receive_IT+0x38>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e032      	b.n	8005b46 <HAL_UART_Receive_IT+0x9e>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2222      	movs	r2, #34	; 0x22
 8005b04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b1e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0220 	orr.w	r2, r2, #32
 8005b3e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
  }
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b088      	sub	sp, #32
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10d      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x52>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f9cc 	bl	8005f38 <UART_Receive_IT>
      return;
 8005ba0:	e0d1      	b.n	8005d46 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80b0 	beq.w	8005d0a <HAL_UART_IRQHandler+0x1ba>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x70>
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 80a5 	beq.w	8005d0a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_UART_IRQHandler+0x90>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd8:	f043 0201 	orr.w	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_UART_IRQHandler+0xb0>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	f043 0202 	orr.w	r2, r3, #2
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_UART_IRQHandler+0xd0>
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c18:	f043 0204 	orr.w	r2, r3, #4
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00f      	beq.n	8005c4a <HAL_UART_IRQHandler+0xfa>
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_UART_IRQHandler+0xee>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	f043 0208 	orr.w	r2, r3, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d078      	beq.n	8005d44 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <HAL_UART_IRQHandler+0x11c>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f966 	bl	8005f38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bf14      	ite	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	2300      	moveq	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <HAL_UART_IRQHandler+0x144>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d031      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f8b7 	bl	8005e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cb6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d013      	beq.n	8005ce8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <HAL_UART_IRQHandler+0x1fc>)
 8005cc6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fd fa33 	bl	8003138 <HAL_DMA_Abort_IT>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d016      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce6:	e00e      	b.n	8005d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f83a 	bl	8005d62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cee:	e00a      	b.n	8005d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f836 	bl	8005d62 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf6:	e006      	b.n	8005d06 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f832 	bl	8005d62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d04:	e01e      	b.n	8005d44 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d06:	bf00      	nop
    return;
 8005d08:	e01c      	b.n	8005d44 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_UART_IRQHandler+0x1d6>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8a3 	bl	8005e6a <UART_Transmit_IT>
    return;
 8005d24:	e00f      	b.n	8005d46 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_UART_IRQHandler+0x1f6>
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d005      	beq.n	8005d46 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8e4 	bl	8005f08 <UART_EndTransmit_IT>
    return;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d44:	bf00      	nop
  }
}
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	08005e43 	.word	0x08005e43

08005d50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d84:	e02c      	b.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d028      	beq.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d94:	f7fd f896 	bl	8002ec4 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d21d      	bcs.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00f      	b.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d0c3      	beq.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695a      	ldr	r2, [r3, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr

08005e42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f7ff ff80 	bl	8005d62 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b21      	cmp	r3, #33	; 0x21
 8005e7c:	d13e      	bne.n	8005efc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	d114      	bne.n	8005eb2 <UART_Transmit_IT+0x48>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	1c9a      	adds	r2, r3, #2
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	621a      	str	r2, [r3, #32]
 8005eb0:	e008      	b.n	8005ec4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6211      	str	r1, [r2, #32]
 8005ebc:	781a      	ldrb	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10f      	bne.n	8005ef8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ee6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ef6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff11 	bl	8005d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b22      	cmp	r3, #34	; 0x22
 8005f4a:	d170      	bne.n	800602e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	d117      	bne.n	8005f86 <UART_Receive_IT+0x4e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d113      	bne.n	8005f86 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	; 0x28
 8005f84:	e026      	b.n	8005fd4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f98:	d007      	beq.n	8005faa <UART_Receive_IT+0x72>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <UART_Receive_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e008      	b.n	8005fca <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d120      	bne.n	800602a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0220 	bic.w	r2, r2, #32
 8005ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7fb f989 	bl	8001338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e002      	b.n	8006030 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	4313      	orrs	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006072:	f023 030c 	bic.w	r3, r3, #12
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	430b      	orrs	r3, r1
 800607e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2c      	ldr	r2, [pc, #176]	; (800614c <UART_SetConfig+0x114>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060a0:	f7fe f826 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	e002      	b.n	80060ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fe f80e 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80060ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009a      	lsls	r2, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	4a22      	ldr	r2, [pc, #136]	; (8006150 <UART_SetConfig+0x118>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	095b      	lsrs	r3, r3, #5
 80060cc:	0119      	lsls	r1, r3, #4
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4613      	mov	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	009a      	lsls	r2, r3, #2
 80060d8:	441a      	add	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <UART_SetConfig+0x118>)
 80060e6:	fba3 0302 	umull	r0, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2064      	movs	r0, #100	; 0x64
 80060ee:	fb00 f303 	mul.w	r3, r0, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <UART_SetConfig+0x118>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006104:	4419      	add	r1, r3
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	fbb2 f2f3 	udiv	r2, r2, r3
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <UART_SetConfig+0x118>)
 800611e:	fba3 0302 	umull	r0, r3, r3, r2
 8006122:	095b      	lsrs	r3, r3, #5
 8006124:	2064      	movs	r0, #100	; 0x64
 8006126:	fb00 f303 	mul.w	r3, r0, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	3332      	adds	r3, #50	; 0x32
 8006130:	4a07      	ldr	r2, [pc, #28]	; (8006150 <UART_SetConfig+0x118>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	095b      	lsrs	r3, r3, #5
 8006138:	f003 020f 	and.w	r2, r3, #15
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	440a      	add	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006144:	bf00      	nop
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40013800 	.word	0x40013800
 8006150:	51eb851f 	.word	0x51eb851f

08006154 <arm_pid_init_f32>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	6986      	ldr	r6, [r0, #24]
 800615a:	6a25      	ldr	r5, [r4, #32]
 800615c:	4630      	mov	r0, r6
 800615e:	460f      	mov	r7, r1
 8006160:	69e1      	ldr	r1, [r4, #28]
 8006162:	f7fa fd07 	bl	8000b74 <__addsf3>
 8006166:	4629      	mov	r1, r5
 8006168:	f7fa fd04 	bl	8000b74 <__addsf3>
 800616c:	4629      	mov	r1, r5
 800616e:	6020      	str	r0, [r4, #0]
 8006170:	4628      	mov	r0, r5
 8006172:	f7fa fcff 	bl	8000b74 <__addsf3>
 8006176:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800617a:	4601      	mov	r1, r0
 800617c:	4630      	mov	r0, r6
 800617e:	f7fa fcf7 	bl	8000b70 <__aeabi_fsub>
 8006182:	60a5      	str	r5, [r4, #8]
 8006184:	6060      	str	r0, [r4, #4]
 8006186:	b167      	cbz	r7, 80061a2 <arm_pid_init_f32+0x4e>
 8006188:	2300      	movs	r3, #0
 800618a:	7323      	strb	r3, [r4, #12]
 800618c:	7363      	strb	r3, [r4, #13]
 800618e:	73a3      	strb	r3, [r4, #14]
 8006190:	73e3      	strb	r3, [r4, #15]
 8006192:	7423      	strb	r3, [r4, #16]
 8006194:	7463      	strb	r3, [r4, #17]
 8006196:	74a3      	strb	r3, [r4, #18]
 8006198:	74e3      	strb	r3, [r4, #19]
 800619a:	7523      	strb	r3, [r4, #20]
 800619c:	7563      	strb	r3, [r4, #21]
 800619e:	75a3      	strb	r3, [r4, #22]
 80061a0:	75e3      	strb	r3, [r4, #23]
 80061a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061a4 <atof>:
 80061a4:	2100      	movs	r1, #0
 80061a6:	f001 bad7 	b.w	8007758 <strtod>
	...

080061ac <__errno>:
 80061ac:	4b01      	ldr	r3, [pc, #4]	; (80061b4 <__errno+0x8>)
 80061ae:	6818      	ldr	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000018 	.word	0x20000018

080061b8 <__libc_init_array>:
 80061b8:	b570      	push	{r4, r5, r6, lr}
 80061ba:	2500      	movs	r5, #0
 80061bc:	4e0c      	ldr	r6, [pc, #48]	; (80061f0 <__libc_init_array+0x38>)
 80061be:	4c0d      	ldr	r4, [pc, #52]	; (80061f4 <__libc_init_array+0x3c>)
 80061c0:	1ba4      	subs	r4, r4, r6
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	42a5      	cmp	r5, r4
 80061c6:	d109      	bne.n	80061dc <__libc_init_array+0x24>
 80061c8:	f003 faea 	bl	80097a0 <_init>
 80061cc:	2500      	movs	r5, #0
 80061ce:	4e0a      	ldr	r6, [pc, #40]	; (80061f8 <__libc_init_array+0x40>)
 80061d0:	4c0a      	ldr	r4, [pc, #40]	; (80061fc <__libc_init_array+0x44>)
 80061d2:	1ba4      	subs	r4, r4, r6
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	42a5      	cmp	r5, r4
 80061d8:	d105      	bne.n	80061e6 <__libc_init_array+0x2e>
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061e0:	4798      	blx	r3
 80061e2:	3501      	adds	r5, #1
 80061e4:	e7ee      	b.n	80061c4 <__libc_init_array+0xc>
 80061e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ea:	4798      	blx	r3
 80061ec:	3501      	adds	r5, #1
 80061ee:	e7f2      	b.n	80061d6 <__libc_init_array+0x1e>
 80061f0:	08009c28 	.word	0x08009c28
 80061f4:	08009c28 	.word	0x08009c28
 80061f8:	08009c28 	.word	0x08009c28
 80061fc:	08009c2c 	.word	0x08009c2c

08006200 <memset>:
 8006200:	4603      	mov	r3, r0
 8006202:	4402      	add	r2, r0
 8006204:	4293      	cmp	r3, r2
 8006206:	d100      	bne.n	800620a <memset+0xa>
 8006208:	4770      	bx	lr
 800620a:	f803 1b01 	strb.w	r1, [r3], #1
 800620e:	e7f9      	b.n	8006204 <memset+0x4>

08006210 <__cvt>:
 8006210:	2b00      	cmp	r3, #0
 8006212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006216:	461e      	mov	r6, r3
 8006218:	bfbb      	ittet	lt
 800621a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800621e:	461e      	movlt	r6, r3
 8006220:	2300      	movge	r3, #0
 8006222:	232d      	movlt	r3, #45	; 0x2d
 8006224:	b088      	sub	sp, #32
 8006226:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006228:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800622c:	f027 0720 	bic.w	r7, r7, #32
 8006230:	2f46      	cmp	r7, #70	; 0x46
 8006232:	4614      	mov	r4, r2
 8006234:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006236:	700b      	strb	r3, [r1, #0]
 8006238:	d004      	beq.n	8006244 <__cvt+0x34>
 800623a:	2f45      	cmp	r7, #69	; 0x45
 800623c:	d100      	bne.n	8006240 <__cvt+0x30>
 800623e:	3501      	adds	r5, #1
 8006240:	2302      	movs	r3, #2
 8006242:	e000      	b.n	8006246 <__cvt+0x36>
 8006244:	2303      	movs	r3, #3
 8006246:	aa07      	add	r2, sp, #28
 8006248:	9204      	str	r2, [sp, #16]
 800624a:	aa06      	add	r2, sp, #24
 800624c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006250:	e9cd 3500 	strd	r3, r5, [sp]
 8006254:	4622      	mov	r2, r4
 8006256:	4633      	mov	r3, r6
 8006258:	f001 fb1e 	bl	8007898 <_dtoa_r>
 800625c:	2f47      	cmp	r7, #71	; 0x47
 800625e:	4680      	mov	r8, r0
 8006260:	d102      	bne.n	8006268 <__cvt+0x58>
 8006262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006264:	07db      	lsls	r3, r3, #31
 8006266:	d526      	bpl.n	80062b6 <__cvt+0xa6>
 8006268:	2f46      	cmp	r7, #70	; 0x46
 800626a:	eb08 0905 	add.w	r9, r8, r5
 800626e:	d111      	bne.n	8006294 <__cvt+0x84>
 8006270:	f898 3000 	ldrb.w	r3, [r8]
 8006274:	2b30      	cmp	r3, #48	; 0x30
 8006276:	d10a      	bne.n	800628e <__cvt+0x7e>
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	4620      	mov	r0, r4
 800627e:	4631      	mov	r1, r6
 8006280:	f7fa fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8006284:	b918      	cbnz	r0, 800628e <__cvt+0x7e>
 8006286:	f1c5 0501 	rsb	r5, r5, #1
 800628a:	f8ca 5000 	str.w	r5, [sl]
 800628e:	f8da 3000 	ldr.w	r3, [sl]
 8006292:	4499      	add	r9, r3
 8006294:	2200      	movs	r2, #0
 8006296:	2300      	movs	r3, #0
 8006298:	4620      	mov	r0, r4
 800629a:	4631      	mov	r1, r6
 800629c:	f7fa fb84 	bl	80009a8 <__aeabi_dcmpeq>
 80062a0:	b938      	cbnz	r0, 80062b2 <__cvt+0xa2>
 80062a2:	2230      	movs	r2, #48	; 0x30
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	454b      	cmp	r3, r9
 80062a8:	d205      	bcs.n	80062b6 <__cvt+0xa6>
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	9107      	str	r1, [sp, #28]
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e7f8      	b.n	80062a4 <__cvt+0x94>
 80062b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80062b6:	4640      	mov	r0, r8
 80062b8:	9b07      	ldr	r3, [sp, #28]
 80062ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062bc:	eba3 0308 	sub.w	r3, r3, r8
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	b008      	add	sp, #32
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080062c8 <__exponent>:
 80062c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062ca:	2900      	cmp	r1, #0
 80062cc:	bfb4      	ite	lt
 80062ce:	232d      	movlt	r3, #45	; 0x2d
 80062d0:	232b      	movge	r3, #43	; 0x2b
 80062d2:	4604      	mov	r4, r0
 80062d4:	bfb8      	it	lt
 80062d6:	4249      	neglt	r1, r1
 80062d8:	2909      	cmp	r1, #9
 80062da:	f804 2b02 	strb.w	r2, [r4], #2
 80062de:	7043      	strb	r3, [r0, #1]
 80062e0:	dd21      	ble.n	8006326 <__exponent+0x5e>
 80062e2:	f10d 0307 	add.w	r3, sp, #7
 80062e6:	461f      	mov	r7, r3
 80062e8:	260a      	movs	r6, #10
 80062ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80062ee:	fb06 1115 	mls	r1, r6, r5, r1
 80062f2:	2d09      	cmp	r5, #9
 80062f4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80062f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062fc:	f103 32ff 	add.w	r2, r3, #4294967295
 8006300:	4629      	mov	r1, r5
 8006302:	dc09      	bgt.n	8006318 <__exponent+0x50>
 8006304:	3130      	adds	r1, #48	; 0x30
 8006306:	3b02      	subs	r3, #2
 8006308:	f802 1c01 	strb.w	r1, [r2, #-1]
 800630c:	42bb      	cmp	r3, r7
 800630e:	4622      	mov	r2, r4
 8006310:	d304      	bcc.n	800631c <__exponent+0x54>
 8006312:	1a10      	subs	r0, r2, r0
 8006314:	b003      	add	sp, #12
 8006316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006318:	4613      	mov	r3, r2
 800631a:	e7e6      	b.n	80062ea <__exponent+0x22>
 800631c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006320:	f804 2b01 	strb.w	r2, [r4], #1
 8006324:	e7f2      	b.n	800630c <__exponent+0x44>
 8006326:	2330      	movs	r3, #48	; 0x30
 8006328:	4419      	add	r1, r3
 800632a:	7083      	strb	r3, [r0, #2]
 800632c:	1d02      	adds	r2, r0, #4
 800632e:	70c1      	strb	r1, [r0, #3]
 8006330:	e7ef      	b.n	8006312 <__exponent+0x4a>
	...

08006334 <_printf_float>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	b091      	sub	sp, #68	; 0x44
 800633a:	460c      	mov	r4, r1
 800633c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800633e:	4693      	mov	fp, r2
 8006340:	461e      	mov	r6, r3
 8006342:	4605      	mov	r5, r0
 8006344:	f002 fb86 	bl	8008a54 <_localeconv_r>
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	9309      	str	r3, [sp, #36]	; 0x24
 800634e:	f7f9 feff 	bl	8000150 <strlen>
 8006352:	2300      	movs	r3, #0
 8006354:	930e      	str	r3, [sp, #56]	; 0x38
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	900a      	str	r0, [sp, #40]	; 0x28
 800635a:	3307      	adds	r3, #7
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	f103 0208 	add.w	r2, r3, #8
 8006364:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006368:	f8d4 a000 	ldr.w	sl, [r4]
 800636c:	603a      	str	r2, [r7, #0]
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006376:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800637a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800637e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	4ba6      	ldr	r3, [pc, #664]	; (8006620 <_printf_float+0x2ec>)
 8006386:	4638      	mov	r0, r7
 8006388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800638a:	f7fa fb3f 	bl	8000a0c <__aeabi_dcmpun>
 800638e:	bb68      	cbnz	r0, 80063ec <_printf_float+0xb8>
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	4ba2      	ldr	r3, [pc, #648]	; (8006620 <_printf_float+0x2ec>)
 8006396:	4638      	mov	r0, r7
 8006398:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800639a:	f7fa fb19 	bl	80009d0 <__aeabi_dcmple>
 800639e:	bb28      	cbnz	r0, 80063ec <_printf_float+0xb8>
 80063a0:	2200      	movs	r2, #0
 80063a2:	2300      	movs	r3, #0
 80063a4:	4638      	mov	r0, r7
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fb08 	bl	80009bc <__aeabi_dcmplt>
 80063ac:	b110      	cbz	r0, 80063b4 <_printf_float+0x80>
 80063ae:	232d      	movs	r3, #45	; 0x2d
 80063b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b4:	4f9b      	ldr	r7, [pc, #620]	; (8006624 <_printf_float+0x2f0>)
 80063b6:	4b9c      	ldr	r3, [pc, #624]	; (8006628 <_printf_float+0x2f4>)
 80063b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063bc:	bf98      	it	ls
 80063be:	461f      	movls	r7, r3
 80063c0:	2303      	movs	r3, #3
 80063c2:	f04f 0900 	mov.w	r9, #0
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	f02a 0304 	bic.w	r3, sl, #4
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	9600      	str	r6, [sp, #0]
 80063d0:	465b      	mov	r3, fp
 80063d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80063d4:	4621      	mov	r1, r4
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f9e2 	bl	80067a0 <_printf_common>
 80063dc:	3001      	adds	r0, #1
 80063de:	f040 8090 	bne.w	8006502 <_printf_float+0x1ce>
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	b011      	add	sp, #68	; 0x44
 80063e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ec:	463a      	mov	r2, r7
 80063ee:	464b      	mov	r3, r9
 80063f0:	4638      	mov	r0, r7
 80063f2:	4649      	mov	r1, r9
 80063f4:	f7fa fb0a 	bl	8000a0c <__aeabi_dcmpun>
 80063f8:	b110      	cbz	r0, 8006400 <_printf_float+0xcc>
 80063fa:	4f8c      	ldr	r7, [pc, #560]	; (800662c <_printf_float+0x2f8>)
 80063fc:	4b8c      	ldr	r3, [pc, #560]	; (8006630 <_printf_float+0x2fc>)
 80063fe:	e7db      	b.n	80063b8 <_printf_float+0x84>
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006406:	1c59      	adds	r1, r3, #1
 8006408:	a80d      	add	r0, sp, #52	; 0x34
 800640a:	a90e      	add	r1, sp, #56	; 0x38
 800640c:	d140      	bne.n	8006490 <_printf_float+0x15c>
 800640e:	2306      	movs	r3, #6
 8006410:	6063      	str	r3, [r4, #4]
 8006412:	f04f 0c00 	mov.w	ip, #0
 8006416:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800641a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800641e:	6863      	ldr	r3, [r4, #4]
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	463a      	mov	r2, r7
 800642a:	464b      	mov	r3, r9
 800642c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006430:	4628      	mov	r0, r5
 8006432:	f7ff feed 	bl	8006210 <__cvt>
 8006436:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800643a:	2b47      	cmp	r3, #71	; 0x47
 800643c:	4607      	mov	r7, r0
 800643e:	d109      	bne.n	8006454 <_printf_float+0x120>
 8006440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006442:	1cd8      	adds	r0, r3, #3
 8006444:	db02      	blt.n	800644c <_printf_float+0x118>
 8006446:	6862      	ldr	r2, [r4, #4]
 8006448:	4293      	cmp	r3, r2
 800644a:	dd47      	ble.n	80064dc <_printf_float+0x1a8>
 800644c:	f1a8 0802 	sub.w	r8, r8, #2
 8006450:	fa5f f888 	uxtb.w	r8, r8
 8006454:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006458:	990d      	ldr	r1, [sp, #52]	; 0x34
 800645a:	d824      	bhi.n	80064a6 <_printf_float+0x172>
 800645c:	3901      	subs	r1, #1
 800645e:	4642      	mov	r2, r8
 8006460:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006464:	910d      	str	r1, [sp, #52]	; 0x34
 8006466:	f7ff ff2f 	bl	80062c8 <__exponent>
 800646a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800646c:	4681      	mov	r9, r0
 800646e:	1813      	adds	r3, r2, r0
 8006470:	2a01      	cmp	r2, #1
 8006472:	6123      	str	r3, [r4, #16]
 8006474:	dc02      	bgt.n	800647c <_printf_float+0x148>
 8006476:	6822      	ldr	r2, [r4, #0]
 8006478:	07d1      	lsls	r1, r2, #31
 800647a:	d501      	bpl.n	8006480 <_printf_float+0x14c>
 800647c:	3301      	adds	r3, #1
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0a2      	beq.n	80063ce <_printf_float+0x9a>
 8006488:	232d      	movs	r3, #45	; 0x2d
 800648a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800648e:	e79e      	b.n	80063ce <_printf_float+0x9a>
 8006490:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006494:	f000 816e 	beq.w	8006774 <_printf_float+0x440>
 8006498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800649c:	d1b9      	bne.n	8006412 <_printf_float+0xde>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1b7      	bne.n	8006412 <_printf_float+0xde>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7b4      	b.n	8006410 <_printf_float+0xdc>
 80064a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80064aa:	d119      	bne.n	80064e0 <_printf_float+0x1ac>
 80064ac:	2900      	cmp	r1, #0
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	dd0c      	ble.n	80064cc <_printf_float+0x198>
 80064b2:	6121      	str	r1, [r4, #16]
 80064b4:	b913      	cbnz	r3, 80064bc <_printf_float+0x188>
 80064b6:	6822      	ldr	r2, [r4, #0]
 80064b8:	07d2      	lsls	r2, r2, #31
 80064ba:	d502      	bpl.n	80064c2 <_printf_float+0x18e>
 80064bc:	3301      	adds	r3, #1
 80064be:	440b      	add	r3, r1
 80064c0:	6123      	str	r3, [r4, #16]
 80064c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c4:	f04f 0900 	mov.w	r9, #0
 80064c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80064ca:	e7d9      	b.n	8006480 <_printf_float+0x14c>
 80064cc:	b913      	cbnz	r3, 80064d4 <_printf_float+0x1a0>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	07d0      	lsls	r0, r2, #31
 80064d2:	d501      	bpl.n	80064d8 <_printf_float+0x1a4>
 80064d4:	3302      	adds	r3, #2
 80064d6:	e7f3      	b.n	80064c0 <_printf_float+0x18c>
 80064d8:	2301      	movs	r3, #1
 80064da:	e7f1      	b.n	80064c0 <_printf_float+0x18c>
 80064dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80064e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064e4:	4293      	cmp	r3, r2
 80064e6:	db05      	blt.n	80064f4 <_printf_float+0x1c0>
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	6123      	str	r3, [r4, #16]
 80064ec:	07d1      	lsls	r1, r2, #31
 80064ee:	d5e8      	bpl.n	80064c2 <_printf_float+0x18e>
 80064f0:	3301      	adds	r3, #1
 80064f2:	e7e5      	b.n	80064c0 <_printf_float+0x18c>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bfcc      	ite	gt
 80064f8:	2301      	movgt	r3, #1
 80064fa:	f1c3 0302 	rsble	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	e7de      	b.n	80064c0 <_printf_float+0x18c>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	055a      	lsls	r2, r3, #21
 8006506:	d407      	bmi.n	8006518 <_printf_float+0x1e4>
 8006508:	6923      	ldr	r3, [r4, #16]
 800650a:	463a      	mov	r2, r7
 800650c:	4659      	mov	r1, fp
 800650e:	4628      	mov	r0, r5
 8006510:	47b0      	blx	r6
 8006512:	3001      	adds	r0, #1
 8006514:	d129      	bne.n	800656a <_printf_float+0x236>
 8006516:	e764      	b.n	80063e2 <_printf_float+0xae>
 8006518:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800651c:	f240 80d7 	bls.w	80066ce <_printf_float+0x39a>
 8006520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	f7fa fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800652c:	b388      	cbz	r0, 8006592 <_printf_float+0x25e>
 800652e:	2301      	movs	r3, #1
 8006530:	4a40      	ldr	r2, [pc, #256]	; (8006634 <_printf_float+0x300>)
 8006532:	4659      	mov	r1, fp
 8006534:	4628      	mov	r0, r5
 8006536:	47b0      	blx	r6
 8006538:	3001      	adds	r0, #1
 800653a:	f43f af52 	beq.w	80063e2 <_printf_float+0xae>
 800653e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006542:	429a      	cmp	r2, r3
 8006544:	db02      	blt.n	800654c <_printf_float+0x218>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	07d8      	lsls	r0, r3, #31
 800654a:	d50e      	bpl.n	800656a <_printf_float+0x236>
 800654c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006550:	4659      	mov	r1, fp
 8006552:	4628      	mov	r0, r5
 8006554:	47b0      	blx	r6
 8006556:	3001      	adds	r0, #1
 8006558:	f43f af43 	beq.w	80063e2 <_printf_float+0xae>
 800655c:	2700      	movs	r7, #0
 800655e:	f104 081a 	add.w	r8, r4, #26
 8006562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006564:	3b01      	subs	r3, #1
 8006566:	42bb      	cmp	r3, r7
 8006568:	dc09      	bgt.n	800657e <_printf_float+0x24a>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	079f      	lsls	r7, r3, #30
 800656e:	f100 80fd 	bmi.w	800676c <_printf_float+0x438>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e733      	b.n	80063e6 <_printf_float+0xb2>
 800657e:	2301      	movs	r3, #1
 8006580:	4642      	mov	r2, r8
 8006582:	4659      	mov	r1, fp
 8006584:	4628      	mov	r0, r5
 8006586:	47b0      	blx	r6
 8006588:	3001      	adds	r0, #1
 800658a:	f43f af2a 	beq.w	80063e2 <_printf_float+0xae>
 800658e:	3701      	adds	r7, #1
 8006590:	e7e7      	b.n	8006562 <_printf_float+0x22e>
 8006592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	dc2b      	bgt.n	80065f0 <_printf_float+0x2bc>
 8006598:	2301      	movs	r3, #1
 800659a:	4a26      	ldr	r2, [pc, #152]	; (8006634 <_printf_float+0x300>)
 800659c:	4659      	mov	r1, fp
 800659e:	4628      	mov	r0, r5
 80065a0:	47b0      	blx	r6
 80065a2:	3001      	adds	r0, #1
 80065a4:	f43f af1d 	beq.w	80063e2 <_printf_float+0xae>
 80065a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065aa:	b923      	cbnz	r3, 80065b6 <_printf_float+0x282>
 80065ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065ae:	b913      	cbnz	r3, 80065b6 <_printf_float+0x282>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	07d9      	lsls	r1, r3, #31
 80065b4:	d5d9      	bpl.n	800656a <_printf_float+0x236>
 80065b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ba:	4659      	mov	r1, fp
 80065bc:	4628      	mov	r0, r5
 80065be:	47b0      	blx	r6
 80065c0:	3001      	adds	r0, #1
 80065c2:	f43f af0e 	beq.w	80063e2 <_printf_float+0xae>
 80065c6:	f04f 0800 	mov.w	r8, #0
 80065ca:	f104 091a 	add.w	r9, r4, #26
 80065ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065d0:	425b      	negs	r3, r3
 80065d2:	4543      	cmp	r3, r8
 80065d4:	dc01      	bgt.n	80065da <_printf_float+0x2a6>
 80065d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d8:	e797      	b.n	800650a <_printf_float+0x1d6>
 80065da:	2301      	movs	r3, #1
 80065dc:	464a      	mov	r2, r9
 80065de:	4659      	mov	r1, fp
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b0      	blx	r6
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f aefc 	beq.w	80063e2 <_printf_float+0xae>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	e7ee      	b.n	80065ce <_printf_float+0x29a>
 80065f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f4:	429a      	cmp	r2, r3
 80065f6:	bfa8      	it	ge
 80065f8:	461a      	movge	r2, r3
 80065fa:	2a00      	cmp	r2, #0
 80065fc:	4690      	mov	r8, r2
 80065fe:	dd07      	ble.n	8006610 <_printf_float+0x2dc>
 8006600:	4613      	mov	r3, r2
 8006602:	4659      	mov	r1, fp
 8006604:	463a      	mov	r2, r7
 8006606:	4628      	mov	r0, r5
 8006608:	47b0      	blx	r6
 800660a:	3001      	adds	r0, #1
 800660c:	f43f aee9 	beq.w	80063e2 <_printf_float+0xae>
 8006610:	f104 031a 	add.w	r3, r4, #26
 8006614:	f04f 0a00 	mov.w	sl, #0
 8006618:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800661c:	930b      	str	r3, [sp, #44]	; 0x2c
 800661e:	e015      	b.n	800664c <_printf_float+0x318>
 8006620:	7fefffff 	.word	0x7fefffff
 8006624:	08009980 	.word	0x08009980
 8006628:	0800997c 	.word	0x0800997c
 800662c:	08009988 	.word	0x08009988
 8006630:	08009984 	.word	0x08009984
 8006634:	0800998c 	.word	0x0800998c
 8006638:	2301      	movs	r3, #1
 800663a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800663c:	4659      	mov	r1, fp
 800663e:	4628      	mov	r0, r5
 8006640:	47b0      	blx	r6
 8006642:	3001      	adds	r0, #1
 8006644:	f43f aecd 	beq.w	80063e2 <_printf_float+0xae>
 8006648:	f10a 0a01 	add.w	sl, sl, #1
 800664c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006650:	eba9 0308 	sub.w	r3, r9, r8
 8006654:	4553      	cmp	r3, sl
 8006656:	dcef      	bgt.n	8006638 <_printf_float+0x304>
 8006658:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800665c:	429a      	cmp	r2, r3
 800665e:	444f      	add	r7, r9
 8006660:	db14      	blt.n	800668c <_printf_float+0x358>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	07da      	lsls	r2, r3, #31
 8006666:	d411      	bmi.n	800668c <_printf_float+0x358>
 8006668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800666a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800666c:	eba3 0209 	sub.w	r2, r3, r9
 8006670:	eba3 0901 	sub.w	r9, r3, r1
 8006674:	4591      	cmp	r9, r2
 8006676:	bfa8      	it	ge
 8006678:	4691      	movge	r9, r2
 800667a:	f1b9 0f00 	cmp.w	r9, #0
 800667e:	dc0d      	bgt.n	800669c <_printf_float+0x368>
 8006680:	2700      	movs	r7, #0
 8006682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006686:	f104 081a 	add.w	r8, r4, #26
 800668a:	e018      	b.n	80066be <_printf_float+0x38a>
 800668c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006690:	4659      	mov	r1, fp
 8006692:	4628      	mov	r0, r5
 8006694:	47b0      	blx	r6
 8006696:	3001      	adds	r0, #1
 8006698:	d1e6      	bne.n	8006668 <_printf_float+0x334>
 800669a:	e6a2      	b.n	80063e2 <_printf_float+0xae>
 800669c:	464b      	mov	r3, r9
 800669e:	463a      	mov	r2, r7
 80066a0:	4659      	mov	r1, fp
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b0      	blx	r6
 80066a6:	3001      	adds	r0, #1
 80066a8:	d1ea      	bne.n	8006680 <_printf_float+0x34c>
 80066aa:	e69a      	b.n	80063e2 <_printf_float+0xae>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4642      	mov	r2, r8
 80066b0:	4659      	mov	r1, fp
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b0      	blx	r6
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f ae93 	beq.w	80063e2 <_printf_float+0xae>
 80066bc:	3701      	adds	r7, #1
 80066be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	eba3 0309 	sub.w	r3, r3, r9
 80066c8:	42bb      	cmp	r3, r7
 80066ca:	dcef      	bgt.n	80066ac <_printf_float+0x378>
 80066cc:	e74d      	b.n	800656a <_printf_float+0x236>
 80066ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066d0:	2a01      	cmp	r2, #1
 80066d2:	dc01      	bgt.n	80066d8 <_printf_float+0x3a4>
 80066d4:	07db      	lsls	r3, r3, #31
 80066d6:	d538      	bpl.n	800674a <_printf_float+0x416>
 80066d8:	2301      	movs	r3, #1
 80066da:	463a      	mov	r2, r7
 80066dc:	4659      	mov	r1, fp
 80066de:	4628      	mov	r0, r5
 80066e0:	47b0      	blx	r6
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f ae7d 	beq.w	80063e2 <_printf_float+0xae>
 80066e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ec:	4659      	mov	r1, fp
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b0      	blx	r6
 80066f2:	3001      	adds	r0, #1
 80066f4:	f107 0701 	add.w	r7, r7, #1
 80066f8:	f43f ae73 	beq.w	80063e2 <_printf_float+0xae>
 80066fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006702:	2200      	movs	r2, #0
 8006704:	f103 38ff 	add.w	r8, r3, #4294967295
 8006708:	2300      	movs	r3, #0
 800670a:	f7fa f94d 	bl	80009a8 <__aeabi_dcmpeq>
 800670e:	b9c0      	cbnz	r0, 8006742 <_printf_float+0x40e>
 8006710:	4643      	mov	r3, r8
 8006712:	463a      	mov	r2, r7
 8006714:	4659      	mov	r1, fp
 8006716:	4628      	mov	r0, r5
 8006718:	47b0      	blx	r6
 800671a:	3001      	adds	r0, #1
 800671c:	d10d      	bne.n	800673a <_printf_float+0x406>
 800671e:	e660      	b.n	80063e2 <_printf_float+0xae>
 8006720:	2301      	movs	r3, #1
 8006722:	4642      	mov	r2, r8
 8006724:	4659      	mov	r1, fp
 8006726:	4628      	mov	r0, r5
 8006728:	47b0      	blx	r6
 800672a:	3001      	adds	r0, #1
 800672c:	f43f ae59 	beq.w	80063e2 <_printf_float+0xae>
 8006730:	3701      	adds	r7, #1
 8006732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006734:	3b01      	subs	r3, #1
 8006736:	42bb      	cmp	r3, r7
 8006738:	dcf2      	bgt.n	8006720 <_printf_float+0x3ec>
 800673a:	464b      	mov	r3, r9
 800673c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006740:	e6e4      	b.n	800650c <_printf_float+0x1d8>
 8006742:	2700      	movs	r7, #0
 8006744:	f104 081a 	add.w	r8, r4, #26
 8006748:	e7f3      	b.n	8006732 <_printf_float+0x3fe>
 800674a:	2301      	movs	r3, #1
 800674c:	e7e1      	b.n	8006712 <_printf_float+0x3de>
 800674e:	2301      	movs	r3, #1
 8006750:	4642      	mov	r2, r8
 8006752:	4659      	mov	r1, fp
 8006754:	4628      	mov	r0, r5
 8006756:	47b0      	blx	r6
 8006758:	3001      	adds	r0, #1
 800675a:	f43f ae42 	beq.w	80063e2 <_printf_float+0xae>
 800675e:	3701      	adds	r7, #1
 8006760:	68e3      	ldr	r3, [r4, #12]
 8006762:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	42bb      	cmp	r3, r7
 8006768:	dcf1      	bgt.n	800674e <_printf_float+0x41a>
 800676a:	e702      	b.n	8006572 <_printf_float+0x23e>
 800676c:	2700      	movs	r7, #0
 800676e:	f104 0819 	add.w	r8, r4, #25
 8006772:	e7f5      	b.n	8006760 <_printf_float+0x42c>
 8006774:	2b00      	cmp	r3, #0
 8006776:	f43f ae94 	beq.w	80064a2 <_printf_float+0x16e>
 800677a:	f04f 0c00 	mov.w	ip, #0
 800677e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006782:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006786:	6022      	str	r2, [r4, #0]
 8006788:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800678c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	463a      	mov	r2, r7
 8006794:	464b      	mov	r3, r9
 8006796:	4628      	mov	r0, r5
 8006798:	f7ff fd3a 	bl	8006210 <__cvt>
 800679c:	4607      	mov	r7, r0
 800679e:	e64f      	b.n	8006440 <_printf_float+0x10c>

080067a0 <_printf_common>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4691      	mov	r9, r2
 80067a6:	461f      	mov	r7, r3
 80067a8:	688a      	ldr	r2, [r1, #8]
 80067aa:	690b      	ldr	r3, [r1, #16]
 80067ac:	4606      	mov	r6, r0
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bfb8      	it	lt
 80067b2:	4613      	movlt	r3, r2
 80067b4:	f8c9 3000 	str.w	r3, [r9]
 80067b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067bc:	460c      	mov	r4, r1
 80067be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c2:	b112      	cbz	r2, 80067ca <_printf_common+0x2a>
 80067c4:	3301      	adds	r3, #1
 80067c6:	f8c9 3000 	str.w	r3, [r9]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	0699      	lsls	r1, r3, #26
 80067ce:	bf42      	ittt	mi
 80067d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80067d4:	3302      	addmi	r3, #2
 80067d6:	f8c9 3000 	strmi.w	r3, [r9]
 80067da:	6825      	ldr	r5, [r4, #0]
 80067dc:	f015 0506 	ands.w	r5, r5, #6
 80067e0:	d107      	bne.n	80067f2 <_printf_common+0x52>
 80067e2:	f104 0a19 	add.w	sl, r4, #25
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	f8d9 2000 	ldr.w	r2, [r9]
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	42ab      	cmp	r3, r5
 80067f0:	dc29      	bgt.n	8006846 <_printf_common+0xa6>
 80067f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	3300      	adds	r3, #0
 80067fa:	bf18      	it	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	0692      	lsls	r2, r2, #26
 8006800:	d42e      	bmi.n	8006860 <_printf_common+0xc0>
 8006802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006806:	4639      	mov	r1, r7
 8006808:	4630      	mov	r0, r6
 800680a:	47c0      	blx	r8
 800680c:	3001      	adds	r0, #1
 800680e:	d021      	beq.n	8006854 <_printf_common+0xb4>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	68e5      	ldr	r5, [r4, #12]
 8006814:	f003 0306 	and.w	r3, r3, #6
 8006818:	2b04      	cmp	r3, #4
 800681a:	bf18      	it	ne
 800681c:	2500      	movne	r5, #0
 800681e:	f8d9 2000 	ldr.w	r2, [r9]
 8006822:	f04f 0900 	mov.w	r9, #0
 8006826:	bf08      	it	eq
 8006828:	1aad      	subeq	r5, r5, r2
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	bf08      	it	eq
 8006830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006834:	4293      	cmp	r3, r2
 8006836:	bfc4      	itt	gt
 8006838:	1a9b      	subgt	r3, r3, r2
 800683a:	18ed      	addgt	r5, r5, r3
 800683c:	341a      	adds	r4, #26
 800683e:	454d      	cmp	r5, r9
 8006840:	d11a      	bne.n	8006878 <_printf_common+0xd8>
 8006842:	2000      	movs	r0, #0
 8006844:	e008      	b.n	8006858 <_printf_common+0xb8>
 8006846:	2301      	movs	r3, #1
 8006848:	4652      	mov	r2, sl
 800684a:	4639      	mov	r1, r7
 800684c:	4630      	mov	r0, r6
 800684e:	47c0      	blx	r8
 8006850:	3001      	adds	r0, #1
 8006852:	d103      	bne.n	800685c <_printf_common+0xbc>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800685c:	3501      	adds	r5, #1
 800685e:	e7c2      	b.n	80067e6 <_printf_common+0x46>
 8006860:	2030      	movs	r0, #48	; 0x30
 8006862:	18e1      	adds	r1, r4, r3
 8006864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800686e:	4422      	add	r2, r4
 8006870:	3302      	adds	r3, #2
 8006872:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006876:	e7c4      	b.n	8006802 <_printf_common+0x62>
 8006878:	2301      	movs	r3, #1
 800687a:	4622      	mov	r2, r4
 800687c:	4639      	mov	r1, r7
 800687e:	4630      	mov	r0, r6
 8006880:	47c0      	blx	r8
 8006882:	3001      	adds	r0, #1
 8006884:	d0e6      	beq.n	8006854 <_printf_common+0xb4>
 8006886:	f109 0901 	add.w	r9, r9, #1
 800688a:	e7d8      	b.n	800683e <_printf_common+0x9e>

0800688c <_printf_i>:
 800688c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006890:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006894:	460c      	mov	r4, r1
 8006896:	7e09      	ldrb	r1, [r1, #24]
 8006898:	b085      	sub	sp, #20
 800689a:	296e      	cmp	r1, #110	; 0x6e
 800689c:	4617      	mov	r7, r2
 800689e:	4606      	mov	r6, r0
 80068a0:	4698      	mov	r8, r3
 80068a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068a4:	f000 80b3 	beq.w	8006a0e <_printf_i+0x182>
 80068a8:	d822      	bhi.n	80068f0 <_printf_i+0x64>
 80068aa:	2963      	cmp	r1, #99	; 0x63
 80068ac:	d036      	beq.n	800691c <_printf_i+0x90>
 80068ae:	d80a      	bhi.n	80068c6 <_printf_i+0x3a>
 80068b0:	2900      	cmp	r1, #0
 80068b2:	f000 80b9 	beq.w	8006a28 <_printf_i+0x19c>
 80068b6:	2958      	cmp	r1, #88	; 0x58
 80068b8:	f000 8083 	beq.w	80069c2 <_printf_i+0x136>
 80068bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80068c4:	e032      	b.n	800692c <_printf_i+0xa0>
 80068c6:	2964      	cmp	r1, #100	; 0x64
 80068c8:	d001      	beq.n	80068ce <_printf_i+0x42>
 80068ca:	2969      	cmp	r1, #105	; 0x69
 80068cc:	d1f6      	bne.n	80068bc <_printf_i+0x30>
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	0605      	lsls	r5, r0, #24
 80068d4:	f103 0104 	add.w	r1, r3, #4
 80068d8:	d52a      	bpl.n	8006930 <_printf_i+0xa4>
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6011      	str	r1, [r2, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da03      	bge.n	80068ea <_printf_i+0x5e>
 80068e2:	222d      	movs	r2, #45	; 0x2d
 80068e4:	425b      	negs	r3, r3
 80068e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80068ea:	486f      	ldr	r0, [pc, #444]	; (8006aa8 <_printf_i+0x21c>)
 80068ec:	220a      	movs	r2, #10
 80068ee:	e039      	b.n	8006964 <_printf_i+0xd8>
 80068f0:	2973      	cmp	r1, #115	; 0x73
 80068f2:	f000 809d 	beq.w	8006a30 <_printf_i+0x1a4>
 80068f6:	d808      	bhi.n	800690a <_printf_i+0x7e>
 80068f8:	296f      	cmp	r1, #111	; 0x6f
 80068fa:	d020      	beq.n	800693e <_printf_i+0xb2>
 80068fc:	2970      	cmp	r1, #112	; 0x70
 80068fe:	d1dd      	bne.n	80068bc <_printf_i+0x30>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	f043 0320 	orr.w	r3, r3, #32
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e003      	b.n	8006912 <_printf_i+0x86>
 800690a:	2975      	cmp	r1, #117	; 0x75
 800690c:	d017      	beq.n	800693e <_printf_i+0xb2>
 800690e:	2978      	cmp	r1, #120	; 0x78
 8006910:	d1d4      	bne.n	80068bc <_printf_i+0x30>
 8006912:	2378      	movs	r3, #120	; 0x78
 8006914:	4865      	ldr	r0, [pc, #404]	; (8006aac <_printf_i+0x220>)
 8006916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800691a:	e055      	b.n	80069c8 <_printf_i+0x13c>
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006922:	1d19      	adds	r1, r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6011      	str	r1, [r2, #0]
 8006928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800692c:	2301      	movs	r3, #1
 800692e:	e08c      	b.n	8006a4a <_printf_i+0x1be>
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006936:	6011      	str	r1, [r2, #0]
 8006938:	bf18      	it	ne
 800693a:	b21b      	sxthne	r3, r3
 800693c:	e7cf      	b.n	80068de <_printf_i+0x52>
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	1d18      	adds	r0, r3, #4
 8006944:	6010      	str	r0, [r2, #0]
 8006946:	0628      	lsls	r0, r5, #24
 8006948:	d501      	bpl.n	800694e <_printf_i+0xc2>
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	e002      	b.n	8006954 <_printf_i+0xc8>
 800694e:	0668      	lsls	r0, r5, #25
 8006950:	d5fb      	bpl.n	800694a <_printf_i+0xbe>
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	296f      	cmp	r1, #111	; 0x6f
 8006956:	bf14      	ite	ne
 8006958:	220a      	movne	r2, #10
 800695a:	2208      	moveq	r2, #8
 800695c:	4852      	ldr	r0, [pc, #328]	; (8006aa8 <_printf_i+0x21c>)
 800695e:	2100      	movs	r1, #0
 8006960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006964:	6865      	ldr	r5, [r4, #4]
 8006966:	2d00      	cmp	r5, #0
 8006968:	60a5      	str	r5, [r4, #8]
 800696a:	f2c0 8095 	blt.w	8006a98 <_printf_i+0x20c>
 800696e:	6821      	ldr	r1, [r4, #0]
 8006970:	f021 0104 	bic.w	r1, r1, #4
 8006974:	6021      	str	r1, [r4, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d13d      	bne.n	80069f6 <_printf_i+0x16a>
 800697a:	2d00      	cmp	r5, #0
 800697c:	f040 808e 	bne.w	8006a9c <_printf_i+0x210>
 8006980:	4665      	mov	r5, ip
 8006982:	2a08      	cmp	r2, #8
 8006984:	d10b      	bne.n	800699e <_printf_i+0x112>
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	07db      	lsls	r3, r3, #31
 800698a:	d508      	bpl.n	800699e <_printf_i+0x112>
 800698c:	6923      	ldr	r3, [r4, #16]
 800698e:	6862      	ldr	r2, [r4, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	bfde      	ittt	le
 8006994:	2330      	movle	r3, #48	; 0x30
 8006996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800699a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800699e:	ebac 0305 	sub.w	r3, ip, r5
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	f8cd 8000 	str.w	r8, [sp]
 80069a8:	463b      	mov	r3, r7
 80069aa:	aa03      	add	r2, sp, #12
 80069ac:	4621      	mov	r1, r4
 80069ae:	4630      	mov	r0, r6
 80069b0:	f7ff fef6 	bl	80067a0 <_printf_common>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d14d      	bne.n	8006a54 <_printf_i+0x1c8>
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	b005      	add	sp, #20
 80069be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069c2:	4839      	ldr	r0, [pc, #228]	; (8006aa8 <_printf_i+0x21c>)
 80069c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80069c8:	6813      	ldr	r3, [r2, #0]
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	1d1d      	adds	r5, r3, #4
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6015      	str	r5, [r2, #0]
 80069d2:	060a      	lsls	r2, r1, #24
 80069d4:	d50b      	bpl.n	80069ee <_printf_i+0x162>
 80069d6:	07ca      	lsls	r2, r1, #31
 80069d8:	bf44      	itt	mi
 80069da:	f041 0120 	orrmi.w	r1, r1, #32
 80069de:	6021      	strmi	r1, [r4, #0]
 80069e0:	b91b      	cbnz	r3, 80069ea <_printf_i+0x15e>
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	f022 0220 	bic.w	r2, r2, #32
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	e7b7      	b.n	800695e <_printf_i+0xd2>
 80069ee:	064d      	lsls	r5, r1, #25
 80069f0:	bf48      	it	mi
 80069f2:	b29b      	uxthmi	r3, r3
 80069f4:	e7ef      	b.n	80069d6 <_printf_i+0x14a>
 80069f6:	4665      	mov	r5, ip
 80069f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80069fc:	fb02 3311 	mls	r3, r2, r1, r3
 8006a00:	5cc3      	ldrb	r3, [r0, r3]
 8006a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a06:	460b      	mov	r3, r1
 8006a08:	2900      	cmp	r1, #0
 8006a0a:	d1f5      	bne.n	80069f8 <_printf_i+0x16c>
 8006a0c:	e7b9      	b.n	8006982 <_printf_i+0xf6>
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1d18      	adds	r0, r3, #4
 8006a14:	6961      	ldr	r1, [r4, #20]
 8006a16:	6010      	str	r0, [r2, #0]
 8006a18:	0628      	lsls	r0, r5, #24
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	d501      	bpl.n	8006a22 <_printf_i+0x196>
 8006a1e:	6019      	str	r1, [r3, #0]
 8006a20:	e002      	b.n	8006a28 <_printf_i+0x19c>
 8006a22:	066a      	lsls	r2, r5, #25
 8006a24:	d5fb      	bpl.n	8006a1e <_printf_i+0x192>
 8006a26:	8019      	strh	r1, [r3, #0]
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4665      	mov	r5, ip
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	e7b9      	b.n	80069a4 <_printf_i+0x118>
 8006a30:	6813      	ldr	r3, [r2, #0]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	681d      	ldr	r5, [r3, #0]
 8006a38:	6862      	ldr	r2, [r4, #4]
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f002 f831 	bl	8008aa4 <memchr>
 8006a42:	b108      	cbz	r0, 8006a48 <_printf_i+0x1bc>
 8006a44:	1b40      	subs	r0, r0, r5
 8006a46:	6060      	str	r0, [r4, #4]
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	6123      	str	r3, [r4, #16]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a52:	e7a7      	b.n	80069a4 <_printf_i+0x118>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	462a      	mov	r2, r5
 8006a58:	4639      	mov	r1, r7
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0aa      	beq.n	80069b8 <_printf_i+0x12c>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	079b      	lsls	r3, r3, #30
 8006a66:	d413      	bmi.n	8006a90 <_printf_i+0x204>
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	9b03      	ldr	r3, [sp, #12]
 8006a6c:	4298      	cmp	r0, r3
 8006a6e:	bfb8      	it	lt
 8006a70:	4618      	movlt	r0, r3
 8006a72:	e7a3      	b.n	80069bc <_printf_i+0x130>
 8006a74:	2301      	movs	r3, #1
 8006a76:	464a      	mov	r2, r9
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	47c0      	blx	r8
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d09a      	beq.n	80069b8 <_printf_i+0x12c>
 8006a82:	3501      	adds	r5, #1
 8006a84:	68e3      	ldr	r3, [r4, #12]
 8006a86:	9a03      	ldr	r2, [sp, #12]
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	42ab      	cmp	r3, r5
 8006a8c:	dcf2      	bgt.n	8006a74 <_printf_i+0x1e8>
 8006a8e:	e7eb      	b.n	8006a68 <_printf_i+0x1dc>
 8006a90:	2500      	movs	r5, #0
 8006a92:	f104 0919 	add.w	r9, r4, #25
 8006a96:	e7f5      	b.n	8006a84 <_printf_i+0x1f8>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1ac      	bne.n	80069f6 <_printf_i+0x16a>
 8006a9c:	7803      	ldrb	r3, [r0, #0]
 8006a9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa6:	e76c      	b.n	8006982 <_printf_i+0xf6>
 8006aa8:	0800998e 	.word	0x0800998e
 8006aac:	0800999f 	.word	0x0800999f

08006ab0 <siprintf>:
 8006ab0:	b40e      	push	{r1, r2, r3}
 8006ab2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ab6:	b500      	push	{lr}
 8006ab8:	b09c      	sub	sp, #112	; 0x70
 8006aba:	ab1d      	add	r3, sp, #116	; 0x74
 8006abc:	9002      	str	r0, [sp, #8]
 8006abe:	9006      	str	r0, [sp, #24]
 8006ac0:	9107      	str	r1, [sp, #28]
 8006ac2:	9104      	str	r1, [sp, #16]
 8006ac4:	4808      	ldr	r0, [pc, #32]	; (8006ae8 <siprintf+0x38>)
 8006ac6:	4909      	ldr	r1, [pc, #36]	; (8006aec <siprintf+0x3c>)
 8006ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006acc:	9105      	str	r1, [sp, #20]
 8006ace:	6800      	ldr	r0, [r0, #0]
 8006ad0:	a902      	add	r1, sp, #8
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	f002 fd06 	bl	80094e4 <_svfiprintf_r>
 8006ad8:	2200      	movs	r2, #0
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	b01c      	add	sp, #112	; 0x70
 8006ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae4:	b003      	add	sp, #12
 8006ae6:	4770      	bx	lr
 8006ae8:	20000018 	.word	0x20000018
 8006aec:	ffff0208 	.word	0xffff0208

08006af0 <strncmp>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	b16a      	cbz	r2, 8006b10 <strncmp+0x20>
 8006af4:	3901      	subs	r1, #1
 8006af6:	1884      	adds	r4, r0, r2
 8006af8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006afc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d103      	bne.n	8006b0c <strncmp+0x1c>
 8006b04:	42a0      	cmp	r0, r4
 8006b06:	d001      	beq.n	8006b0c <strncmp+0x1c>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f5      	bne.n	8006af8 <strncmp+0x8>
 8006b0c:	1a98      	subs	r0, r3, r2
 8006b0e:	bd10      	pop	{r4, pc}
 8006b10:	4610      	mov	r0, r2
 8006b12:	e7fc      	b.n	8006b0e <strncmp+0x1e>

08006b14 <sulp>:
 8006b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b18:	460f      	mov	r7, r1
 8006b1a:	4690      	mov	r8, r2
 8006b1c:	f002 faa6 	bl	800906c <__ulp>
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	f1b8 0f00 	cmp.w	r8, #0
 8006b28:	d011      	beq.n	8006b4e <sulp+0x3a>
 8006b2a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006b2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	dd0b      	ble.n	8006b4e <sulp+0x3a>
 8006b36:	2400      	movs	r4, #0
 8006b38:	051b      	lsls	r3, r3, #20
 8006b3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006b3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006b42:	4622      	mov	r2, r4
 8006b44:	462b      	mov	r3, r5
 8006b46:	f7f9 fcc7 	bl	80004d8 <__aeabi_dmul>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006b58 <_strtod_l>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	461f      	mov	r7, r3
 8006b5e:	2300      	movs	r3, #0
 8006b60:	b0a1      	sub	sp, #132	; 0x84
 8006b62:	4683      	mov	fp, r0
 8006b64:	4638      	mov	r0, r7
 8006b66:	460e      	mov	r6, r1
 8006b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8006b6c:	f001 ff70 	bl	8008a50 <__localeconv_l>
 8006b70:	4680      	mov	r8, r0
 8006b72:	6800      	ldr	r0, [r0, #0]
 8006b74:	f7f9 faec 	bl	8000150 <strlen>
 8006b78:	f04f 0900 	mov.w	r9, #0
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	f04f 0a00 	mov.w	sl, #0
 8006b82:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	2a0d      	cmp	r2, #13
 8006b8a:	d832      	bhi.n	8006bf2 <_strtod_l+0x9a>
 8006b8c:	2a09      	cmp	r2, #9
 8006b8e:	d236      	bcs.n	8006bfe <_strtod_l+0xa6>
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d03e      	beq.n	8006c12 <_strtod_l+0xba>
 8006b94:	2300      	movs	r3, #0
 8006b96:	930d      	str	r3, [sp, #52]	; 0x34
 8006b98:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006b9a:	782b      	ldrb	r3, [r5, #0]
 8006b9c:	2b30      	cmp	r3, #48	; 0x30
 8006b9e:	f040 80ac 	bne.w	8006cfa <_strtod_l+0x1a2>
 8006ba2:	786b      	ldrb	r3, [r5, #1]
 8006ba4:	2b58      	cmp	r3, #88	; 0x58
 8006ba6:	d001      	beq.n	8006bac <_strtod_l+0x54>
 8006ba8:	2b78      	cmp	r3, #120	; 0x78
 8006baa:	d167      	bne.n	8006c7c <_strtod_l+0x124>
 8006bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bae:	9702      	str	r7, [sp, #8]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	ab1c      	add	r3, sp, #112	; 0x70
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	4a89      	ldr	r2, [pc, #548]	; (8006ddc <_strtod_l+0x284>)
 8006bb8:	ab1d      	add	r3, sp, #116	; 0x74
 8006bba:	a91b      	add	r1, sp, #108	; 0x6c
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	f001 fc6f 	bl	80084a0 <__gethex>
 8006bc2:	f010 0407 	ands.w	r4, r0, #7
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	d005      	beq.n	8006bd6 <_strtod_l+0x7e>
 8006bca:	2c06      	cmp	r4, #6
 8006bcc:	d12b      	bne.n	8006c26 <_strtod_l+0xce>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8006bd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f040 85a6 	bne.w	800772a <_strtod_l+0xbd2>
 8006bde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be0:	b1e3      	cbz	r3, 8006c1c <_strtod_l+0xc4>
 8006be2:	464a      	mov	r2, r9
 8006be4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006be8:	4610      	mov	r0, r2
 8006bea:	4619      	mov	r1, r3
 8006bec:	b021      	add	sp, #132	; 0x84
 8006bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf2:	2a2b      	cmp	r2, #43	; 0x2b
 8006bf4:	d015      	beq.n	8006c22 <_strtod_l+0xca>
 8006bf6:	2a2d      	cmp	r2, #45	; 0x2d
 8006bf8:	d004      	beq.n	8006c04 <_strtod_l+0xac>
 8006bfa:	2a20      	cmp	r2, #32
 8006bfc:	d1ca      	bne.n	8006b94 <_strtod_l+0x3c>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c02:	e7bf      	b.n	8006b84 <_strtod_l+0x2c>
 8006c04:	2201      	movs	r2, #1
 8006c06:	920d      	str	r2, [sp, #52]	; 0x34
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1c2      	bne.n	8006b98 <_strtod_l+0x40>
 8006c12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c14:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 8585 	bne.w	8007726 <_strtod_l+0xbce>
 8006c1c:	464a      	mov	r2, r9
 8006c1e:	4653      	mov	r3, sl
 8006c20:	e7e2      	b.n	8006be8 <_strtod_l+0x90>
 8006c22:	2200      	movs	r2, #0
 8006c24:	e7ef      	b.n	8006c06 <_strtod_l+0xae>
 8006c26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c28:	b13a      	cbz	r2, 8006c3a <_strtod_l+0xe2>
 8006c2a:	2135      	movs	r1, #53	; 0x35
 8006c2c:	a81e      	add	r0, sp, #120	; 0x78
 8006c2e:	f002 fb10 	bl	8009252 <__copybits>
 8006c32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c34:	4658      	mov	r0, fp
 8006c36:	f001 ff82 	bl	8008b3e <_Bfree>
 8006c3a:	3c01      	subs	r4, #1
 8006c3c:	2c04      	cmp	r4, #4
 8006c3e:	d806      	bhi.n	8006c4e <_strtod_l+0xf6>
 8006c40:	e8df f004 	tbb	[pc, r4]
 8006c44:	1714030a 	.word	0x1714030a
 8006c48:	0a          	.byte	0x0a
 8006c49:	00          	.byte	0x00
 8006c4a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006c4e:	0731      	lsls	r1, r6, #28
 8006c50:	d5c1      	bpl.n	8006bd6 <_strtod_l+0x7e>
 8006c52:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006c56:	e7be      	b.n	8006bd6 <_strtod_l+0x7e>
 8006c58:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c5a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006c5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c66:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006c6a:	e7f0      	b.n	8006c4e <_strtod_l+0xf6>
 8006c6c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8006de0 <_strtod_l+0x288>
 8006c70:	e7ed      	b.n	8006c4e <_strtod_l+0xf6>
 8006c72:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006c76:	f04f 39ff 	mov.w	r9, #4294967295
 8006c7a:	e7e8      	b.n	8006c4e <_strtod_l+0xf6>
 8006c7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c82:	785b      	ldrb	r3, [r3, #1]
 8006c84:	2b30      	cmp	r3, #48	; 0x30
 8006c86:	d0f9      	beq.n	8006c7c <_strtod_l+0x124>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0a4      	beq.n	8006bd6 <_strtod_l+0x7e>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	2500      	movs	r5, #0
 8006c90:	220a      	movs	r2, #10
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c96:	9506      	str	r5, [sp, #24]
 8006c98:	9308      	str	r3, [sp, #32]
 8006c9a:	9504      	str	r5, [sp, #16]
 8006c9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006c9e:	7807      	ldrb	r7, [r0, #0]
 8006ca0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006ca4:	b2d9      	uxtb	r1, r3
 8006ca6:	2909      	cmp	r1, #9
 8006ca8:	d929      	bls.n	8006cfe <_strtod_l+0x1a6>
 8006caa:	4622      	mov	r2, r4
 8006cac:	f8d8 1000 	ldr.w	r1, [r8]
 8006cb0:	f7ff ff1e 	bl	8006af0 <strncmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d031      	beq.n	8006d1c <_strtod_l+0x1c4>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	463b      	mov	r3, r7
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	9c04      	ldr	r4, [sp, #16]
 8006cc0:	9005      	str	r0, [sp, #20]
 8006cc2:	2b65      	cmp	r3, #101	; 0x65
 8006cc4:	d001      	beq.n	8006cca <_strtod_l+0x172>
 8006cc6:	2b45      	cmp	r3, #69	; 0x45
 8006cc8:	d114      	bne.n	8006cf4 <_strtod_l+0x19c>
 8006cca:	b924      	cbnz	r4, 8006cd6 <_strtod_l+0x17e>
 8006ccc:	b910      	cbnz	r0, 8006cd4 <_strtod_l+0x17c>
 8006cce:	9b07      	ldr	r3, [sp, #28]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d09e      	beq.n	8006c12 <_strtod_l+0xba>
 8006cd4:	2400      	movs	r4, #0
 8006cd6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006cd8:	1c73      	adds	r3, r6, #1
 8006cda:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cdc:	7873      	ldrb	r3, [r6, #1]
 8006cde:	2b2b      	cmp	r3, #43	; 0x2b
 8006ce0:	d078      	beq.n	8006dd4 <_strtod_l+0x27c>
 8006ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ce4:	d070      	beq.n	8006dc8 <_strtod_l+0x270>
 8006ce6:	f04f 0c00 	mov.w	ip, #0
 8006cea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006cee:	2f09      	cmp	r7, #9
 8006cf0:	d97c      	bls.n	8006dec <_strtod_l+0x294>
 8006cf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006cf4:	f04f 0e00 	mov.w	lr, #0
 8006cf8:	e09a      	b.n	8006e30 <_strtod_l+0x2d8>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e7c7      	b.n	8006c8e <_strtod_l+0x136>
 8006cfe:	9904      	ldr	r1, [sp, #16]
 8006d00:	3001      	adds	r0, #1
 8006d02:	2908      	cmp	r1, #8
 8006d04:	bfd7      	itett	le
 8006d06:	9906      	ldrle	r1, [sp, #24]
 8006d08:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006d0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d10:	9306      	strle	r3, [sp, #24]
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	901b      	str	r0, [sp, #108]	; 0x6c
 8006d16:	3301      	adds	r3, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	e7bf      	b.n	8006c9c <_strtod_l+0x144>
 8006d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d1e:	191a      	adds	r2, r3, r4
 8006d20:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d22:	9a04      	ldr	r2, [sp, #16]
 8006d24:	5d1b      	ldrb	r3, [r3, r4]
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	d037      	beq.n	8006d9a <_strtod_l+0x242>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	9c04      	ldr	r4, [sp, #16]
 8006d2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006d32:	2909      	cmp	r1, #9
 8006d34:	d913      	bls.n	8006d5e <_strtod_l+0x206>
 8006d36:	2101      	movs	r1, #1
 8006d38:	9105      	str	r1, [sp, #20]
 8006d3a:	e7c2      	b.n	8006cc2 <_strtod_l+0x16a>
 8006d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d3e:	3001      	adds	r0, #1
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b30      	cmp	r3, #48	; 0x30
 8006d48:	d0f8      	beq.n	8006d3c <_strtod_l+0x1e4>
 8006d4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006d4e:	2a08      	cmp	r2, #8
 8006d50:	f200 84f0 	bhi.w	8007734 <_strtod_l+0xbdc>
 8006d54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006d56:	9208      	str	r2, [sp, #32]
 8006d58:	4602      	mov	r2, r0
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006d62:	f100 0101 	add.w	r1, r0, #1
 8006d66:	d012      	beq.n	8006d8e <_strtod_l+0x236>
 8006d68:	440a      	add	r2, r1
 8006d6a:	270a      	movs	r7, #10
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	eb00 0c04 	add.w	ip, r0, r4
 8006d72:	458c      	cmp	ip, r1
 8006d74:	d113      	bne.n	8006d9e <_strtod_l+0x246>
 8006d76:	1821      	adds	r1, r4, r0
 8006d78:	2908      	cmp	r1, #8
 8006d7a:	f104 0401 	add.w	r4, r4, #1
 8006d7e:	4404      	add	r4, r0
 8006d80:	dc19      	bgt.n	8006db6 <_strtod_l+0x25e>
 8006d82:	210a      	movs	r1, #10
 8006d84:	9b06      	ldr	r3, [sp, #24]
 8006d86:	fb01 e303 	mla	r3, r1, r3, lr
 8006d8a:	9306      	str	r3, [sp, #24]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d90:	1c58      	adds	r0, r3, #1
 8006d92:	901b      	str	r0, [sp, #108]	; 0x6c
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	4608      	mov	r0, r1
 8006d98:	e7c9      	b.n	8006d2e <_strtod_l+0x1d6>
 8006d9a:	9804      	ldr	r0, [sp, #16]
 8006d9c:	e7d3      	b.n	8006d46 <_strtod_l+0x1ee>
 8006d9e:	2908      	cmp	r1, #8
 8006da0:	f101 0101 	add.w	r1, r1, #1
 8006da4:	dc03      	bgt.n	8006dae <_strtod_l+0x256>
 8006da6:	9b06      	ldr	r3, [sp, #24]
 8006da8:	437b      	muls	r3, r7
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	e7e1      	b.n	8006d72 <_strtod_l+0x21a>
 8006dae:	2910      	cmp	r1, #16
 8006db0:	bfd8      	it	le
 8006db2:	437d      	mulle	r5, r7
 8006db4:	e7dd      	b.n	8006d72 <_strtod_l+0x21a>
 8006db6:	2c10      	cmp	r4, #16
 8006db8:	bfdc      	itt	le
 8006dba:	210a      	movle	r1, #10
 8006dbc:	fb01 e505 	mlale	r5, r1, r5, lr
 8006dc0:	e7e4      	b.n	8006d8c <_strtod_l+0x234>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	e781      	b.n	8006ccc <_strtod_l+0x174>
 8006dc8:	f04f 0c01 	mov.w	ip, #1
 8006dcc:	1cb3      	adds	r3, r6, #2
 8006dce:	931b      	str	r3, [sp, #108]	; 0x6c
 8006dd0:	78b3      	ldrb	r3, [r6, #2]
 8006dd2:	e78a      	b.n	8006cea <_strtod_l+0x192>
 8006dd4:	f04f 0c00 	mov.w	ip, #0
 8006dd8:	e7f8      	b.n	8006dcc <_strtod_l+0x274>
 8006dda:	bf00      	nop
 8006ddc:	080099b0 	.word	0x080099b0
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006de6:	1c5f      	adds	r7, r3, #1
 8006de8:	971b      	str	r7, [sp, #108]	; 0x6c
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b30      	cmp	r3, #48	; 0x30
 8006dee:	d0f9      	beq.n	8006de4 <_strtod_l+0x28c>
 8006df0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006df4:	2f08      	cmp	r7, #8
 8006df6:	f63f af7d 	bhi.w	8006cf4 <_strtod_l+0x19c>
 8006dfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006dfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e00:	9309      	str	r3, [sp, #36]	; 0x24
 8006e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e04:	1c5f      	adds	r7, r3, #1
 8006e06:	971b      	str	r7, [sp, #108]	; 0x6c
 8006e08:	785b      	ldrb	r3, [r3, #1]
 8006e0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006e0e:	f1b8 0f09 	cmp.w	r8, #9
 8006e12:	d937      	bls.n	8006e84 <_strtod_l+0x32c>
 8006e14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e16:	1a7f      	subs	r7, r7, r1
 8006e18:	2f08      	cmp	r7, #8
 8006e1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006e1e:	dc37      	bgt.n	8006e90 <_strtod_l+0x338>
 8006e20:	45be      	cmp	lr, r7
 8006e22:	bfa8      	it	ge
 8006e24:	46be      	movge	lr, r7
 8006e26:	f1bc 0f00 	cmp.w	ip, #0
 8006e2a:	d001      	beq.n	8006e30 <_strtod_l+0x2d8>
 8006e2c:	f1ce 0e00 	rsb	lr, lr, #0
 8006e30:	2c00      	cmp	r4, #0
 8006e32:	d151      	bne.n	8006ed8 <_strtod_l+0x380>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f47f aece 	bne.w	8006bd6 <_strtod_l+0x7e>
 8006e3a:	9a07      	ldr	r2, [sp, #28]
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	f47f aeca 	bne.w	8006bd6 <_strtod_l+0x7e>
 8006e42:	9a05      	ldr	r2, [sp, #20]
 8006e44:	2a00      	cmp	r2, #0
 8006e46:	f47f aee4 	bne.w	8006c12 <_strtod_l+0xba>
 8006e4a:	2b4e      	cmp	r3, #78	; 0x4e
 8006e4c:	d027      	beq.n	8006e9e <_strtod_l+0x346>
 8006e4e:	dc21      	bgt.n	8006e94 <_strtod_l+0x33c>
 8006e50:	2b49      	cmp	r3, #73	; 0x49
 8006e52:	f47f aede 	bne.w	8006c12 <_strtod_l+0xba>
 8006e56:	49a4      	ldr	r1, [pc, #656]	; (80070e8 <_strtod_l+0x590>)
 8006e58:	a81b      	add	r0, sp, #108	; 0x6c
 8006e5a:	f001 fd55 	bl	8008908 <__match>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aed7 	beq.w	8006c12 <_strtod_l+0xba>
 8006e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e66:	49a1      	ldr	r1, [pc, #644]	; (80070ec <_strtod_l+0x594>)
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	a81b      	add	r0, sp, #108	; 0x6c
 8006e6c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e6e:	f001 fd4b 	bl	8008908 <__match>
 8006e72:	b910      	cbnz	r0, 8006e7a <_strtod_l+0x322>
 8006e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e76:	3301      	adds	r3, #1
 8006e78:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e7a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007100 <_strtod_l+0x5a8>
 8006e7e:	f04f 0900 	mov.w	r9, #0
 8006e82:	e6a8      	b.n	8006bd6 <_strtod_l+0x7e>
 8006e84:	210a      	movs	r1, #10
 8006e86:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006e8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006e8e:	e7b8      	b.n	8006e02 <_strtod_l+0x2aa>
 8006e90:	46be      	mov	lr, r7
 8006e92:	e7c8      	b.n	8006e26 <_strtod_l+0x2ce>
 8006e94:	2b69      	cmp	r3, #105	; 0x69
 8006e96:	d0de      	beq.n	8006e56 <_strtod_l+0x2fe>
 8006e98:	2b6e      	cmp	r3, #110	; 0x6e
 8006e9a:	f47f aeba 	bne.w	8006c12 <_strtod_l+0xba>
 8006e9e:	4994      	ldr	r1, [pc, #592]	; (80070f0 <_strtod_l+0x598>)
 8006ea0:	a81b      	add	r0, sp, #108	; 0x6c
 8006ea2:	f001 fd31 	bl	8008908 <__match>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f43f aeb3 	beq.w	8006c12 <_strtod_l+0xba>
 8006eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b28      	cmp	r3, #40	; 0x28
 8006eb2:	d10e      	bne.n	8006ed2 <_strtod_l+0x37a>
 8006eb4:	aa1e      	add	r2, sp, #120	; 0x78
 8006eb6:	498f      	ldr	r1, [pc, #572]	; (80070f4 <_strtod_l+0x59c>)
 8006eb8:	a81b      	add	r0, sp, #108	; 0x6c
 8006eba:	f001 fd39 	bl	8008930 <__hexnan>
 8006ebe:	2805      	cmp	r0, #5
 8006ec0:	d107      	bne.n	8006ed2 <_strtod_l+0x37a>
 8006ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ec4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8006ec8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8006ecc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8006ed0:	e681      	b.n	8006bd6 <_strtod_l+0x7e>
 8006ed2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007108 <_strtod_l+0x5b0>
 8006ed6:	e7d2      	b.n	8006e7e <_strtod_l+0x326>
 8006ed8:	ebae 0302 	sub.w	r3, lr, r2
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	9b04      	ldr	r3, [sp, #16]
 8006ee0:	9806      	ldr	r0, [sp, #24]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf08      	it	eq
 8006ee6:	4623      	moveq	r3, r4
 8006ee8:	2c10      	cmp	r4, #16
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	46a0      	mov	r8, r4
 8006eee:	bfa8      	it	ge
 8006ef0:	f04f 0810 	movge.w	r8, #16
 8006ef4:	f7f9 fa76 	bl	80003e4 <__aeabi_ui2d>
 8006ef8:	2c09      	cmp	r4, #9
 8006efa:	4681      	mov	r9, r0
 8006efc:	468a      	mov	sl, r1
 8006efe:	dc13      	bgt.n	8006f28 <_strtod_l+0x3d0>
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f43f ae67 	beq.w	8006bd6 <_strtod_l+0x7e>
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	dd7e      	ble.n	800700a <_strtod_l+0x4b2>
 8006f0c:	2b16      	cmp	r3, #22
 8006f0e:	dc65      	bgt.n	8006fdc <_strtod_l+0x484>
 8006f10:	4a79      	ldr	r2, [pc, #484]	; (80070f8 <_strtod_l+0x5a0>)
 8006f12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006f16:	464a      	mov	r2, r9
 8006f18:	e9de 0100 	ldrd	r0, r1, [lr]
 8006f1c:	4653      	mov	r3, sl
 8006f1e:	f7f9 fadb 	bl	80004d8 <__aeabi_dmul>
 8006f22:	4681      	mov	r9, r0
 8006f24:	468a      	mov	sl, r1
 8006f26:	e656      	b.n	8006bd6 <_strtod_l+0x7e>
 8006f28:	4b73      	ldr	r3, [pc, #460]	; (80070f8 <_strtod_l+0x5a0>)
 8006f2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f32:	f7f9 fad1 	bl	80004d8 <__aeabi_dmul>
 8006f36:	4606      	mov	r6, r0
 8006f38:	4628      	mov	r0, r5
 8006f3a:	460f      	mov	r7, r1
 8006f3c:	f7f9 fa52 	bl	80003e4 <__aeabi_ui2d>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4630      	mov	r0, r6
 8006f46:	4639      	mov	r1, r7
 8006f48:	f7f9 f910 	bl	800016c <__adddf3>
 8006f4c:	2c0f      	cmp	r4, #15
 8006f4e:	4681      	mov	r9, r0
 8006f50:	468a      	mov	sl, r1
 8006f52:	ddd5      	ble.n	8006f00 <_strtod_l+0x3a8>
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	eba4 0808 	sub.w	r8, r4, r8
 8006f5a:	4498      	add	r8, r3
 8006f5c:	f1b8 0f00 	cmp.w	r8, #0
 8006f60:	f340 809a 	ble.w	8007098 <_strtod_l+0x540>
 8006f64:	f018 030f 	ands.w	r3, r8, #15
 8006f68:	d00a      	beq.n	8006f80 <_strtod_l+0x428>
 8006f6a:	4963      	ldr	r1, [pc, #396]	; (80070f8 <_strtod_l+0x5a0>)
 8006f6c:	464a      	mov	r2, r9
 8006f6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f76:	4653      	mov	r3, sl
 8006f78:	f7f9 faae 	bl	80004d8 <__aeabi_dmul>
 8006f7c:	4681      	mov	r9, r0
 8006f7e:	468a      	mov	sl, r1
 8006f80:	f038 080f 	bics.w	r8, r8, #15
 8006f84:	d077      	beq.n	8007076 <_strtod_l+0x51e>
 8006f86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006f8a:	dd4b      	ble.n	8007024 <_strtod_l+0x4cc>
 8006f8c:	f04f 0800 	mov.w	r8, #0
 8006f90:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f94:	f8cd 8020 	str.w	r8, [sp, #32]
 8006f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f9c:	2322      	movs	r3, #34	; 0x22
 8006f9e:	f04f 0900 	mov.w	r9, #0
 8006fa2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007100 <_strtod_l+0x5a8>
 8006fa6:	f8cb 3000 	str.w	r3, [fp]
 8006faa:	9b08      	ldr	r3, [sp, #32]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f43f ae12 	beq.w	8006bd6 <_strtod_l+0x7e>
 8006fb2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	f001 fdc2 	bl	8008b3e <_Bfree>
 8006fba:	9906      	ldr	r1, [sp, #24]
 8006fbc:	4658      	mov	r0, fp
 8006fbe:	f001 fdbe 	bl	8008b3e <_Bfree>
 8006fc2:	9904      	ldr	r1, [sp, #16]
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f001 fdba 	bl	8008b3e <_Bfree>
 8006fca:	9908      	ldr	r1, [sp, #32]
 8006fcc:	4658      	mov	r0, fp
 8006fce:	f001 fdb6 	bl	8008b3e <_Bfree>
 8006fd2:	4641      	mov	r1, r8
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f001 fdb2 	bl	8008b3e <_Bfree>
 8006fda:	e5fc      	b.n	8006bd6 <_strtod_l+0x7e>
 8006fdc:	9a07      	ldr	r2, [sp, #28]
 8006fde:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	dbb6      	blt.n	8006f54 <_strtod_l+0x3fc>
 8006fe6:	4d44      	ldr	r5, [pc, #272]	; (80070f8 <_strtod_l+0x5a0>)
 8006fe8:	f1c4 040f 	rsb	r4, r4, #15
 8006fec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006ff0:	464a      	mov	r2, r9
 8006ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ff6:	4653      	mov	r3, sl
 8006ff8:	f7f9 fa6e 	bl	80004d8 <__aeabi_dmul>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	1b1c      	subs	r4, r3, r4
 8007000:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007004:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007008:	e789      	b.n	8006f1e <_strtod_l+0x3c6>
 800700a:	f113 0f16 	cmn.w	r3, #22
 800700e:	dba1      	blt.n	8006f54 <_strtod_l+0x3fc>
 8007010:	4a39      	ldr	r2, [pc, #228]	; (80070f8 <_strtod_l+0x5a0>)
 8007012:	4648      	mov	r0, r9
 8007014:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007018:	e9d2 2300 	ldrd	r2, r3, [r2]
 800701c:	4651      	mov	r1, sl
 800701e:	f7f9 fb85 	bl	800072c <__aeabi_ddiv>
 8007022:	e77e      	b.n	8006f22 <_strtod_l+0x3ca>
 8007024:	2300      	movs	r3, #0
 8007026:	4648      	mov	r0, r9
 8007028:	4651      	mov	r1, sl
 800702a:	461d      	mov	r5, r3
 800702c:	4e33      	ldr	r6, [pc, #204]	; (80070fc <_strtod_l+0x5a4>)
 800702e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007032:	f1b8 0f01 	cmp.w	r8, #1
 8007036:	dc21      	bgt.n	800707c <_strtod_l+0x524>
 8007038:	b10b      	cbz	r3, 800703e <_strtod_l+0x4e6>
 800703a:	4681      	mov	r9, r0
 800703c:	468a      	mov	sl, r1
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <_strtod_l+0x5a4>)
 8007040:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007044:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007048:	464a      	mov	r2, r9
 800704a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800704e:	4653      	mov	r3, sl
 8007050:	f7f9 fa42 	bl	80004d8 <__aeabi_dmul>
 8007054:	4b2a      	ldr	r3, [pc, #168]	; (8007100 <_strtod_l+0x5a8>)
 8007056:	460a      	mov	r2, r1
 8007058:	400b      	ands	r3, r1
 800705a:	492a      	ldr	r1, [pc, #168]	; (8007104 <_strtod_l+0x5ac>)
 800705c:	4681      	mov	r9, r0
 800705e:	428b      	cmp	r3, r1
 8007060:	d894      	bhi.n	8006f8c <_strtod_l+0x434>
 8007062:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007066:	428b      	cmp	r3, r1
 8007068:	bf86      	itte	hi
 800706a:	f04f 39ff 	movhi.w	r9, #4294967295
 800706e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800710c <_strtod_l+0x5b4>
 8007072:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007076:	2300      	movs	r3, #0
 8007078:	9305      	str	r3, [sp, #20]
 800707a:	e07b      	b.n	8007174 <_strtod_l+0x61c>
 800707c:	f018 0f01 	tst.w	r8, #1
 8007080:	d006      	beq.n	8007090 <_strtod_l+0x538>
 8007082:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 fa25 	bl	80004d8 <__aeabi_dmul>
 800708e:	2301      	movs	r3, #1
 8007090:	3501      	adds	r5, #1
 8007092:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007096:	e7cc      	b.n	8007032 <_strtod_l+0x4da>
 8007098:	d0ed      	beq.n	8007076 <_strtod_l+0x51e>
 800709a:	f1c8 0800 	rsb	r8, r8, #0
 800709e:	f018 020f 	ands.w	r2, r8, #15
 80070a2:	d00a      	beq.n	80070ba <_strtod_l+0x562>
 80070a4:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <_strtod_l+0x5a0>)
 80070a6:	4648      	mov	r0, r9
 80070a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070ac:	4651      	mov	r1, sl
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 fb3b 	bl	800072c <__aeabi_ddiv>
 80070b6:	4681      	mov	r9, r0
 80070b8:	468a      	mov	sl, r1
 80070ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80070be:	d0da      	beq.n	8007076 <_strtod_l+0x51e>
 80070c0:	f1b8 0f1f 	cmp.w	r8, #31
 80070c4:	dd24      	ble.n	8007110 <_strtod_l+0x5b8>
 80070c6:	f04f 0800 	mov.w	r8, #0
 80070ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80070ce:	f8cd 8020 	str.w	r8, [sp, #32]
 80070d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80070d6:	2322      	movs	r3, #34	; 0x22
 80070d8:	f04f 0900 	mov.w	r9, #0
 80070dc:	f04f 0a00 	mov.w	sl, #0
 80070e0:	f8cb 3000 	str.w	r3, [fp]
 80070e4:	e761      	b.n	8006faa <_strtod_l+0x452>
 80070e6:	bf00      	nop
 80070e8:	08009981 	.word	0x08009981
 80070ec:	08009a03 	.word	0x08009a03
 80070f0:	08009989 	.word	0x08009989
 80070f4:	080099c4 	.word	0x080099c4
 80070f8:	08009a40 	.word	0x08009a40
 80070fc:	08009a18 	.word	0x08009a18
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	7ca00000 	.word	0x7ca00000
 8007108:	fff80000 	.word	0xfff80000
 800710c:	7fefffff 	.word	0x7fefffff
 8007110:	f018 0310 	ands.w	r3, r8, #16
 8007114:	bf18      	it	ne
 8007116:	236a      	movne	r3, #106	; 0x6a
 8007118:	4648      	mov	r0, r9
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	4651      	mov	r1, sl
 800711e:	2300      	movs	r3, #0
 8007120:	4da1      	ldr	r5, [pc, #644]	; (80073a8 <_strtod_l+0x850>)
 8007122:	f1b8 0f00 	cmp.w	r8, #0
 8007126:	f300 8113 	bgt.w	8007350 <_strtod_l+0x7f8>
 800712a:	b10b      	cbz	r3, 8007130 <_strtod_l+0x5d8>
 800712c:	4681      	mov	r9, r0
 800712e:	468a      	mov	sl, r1
 8007130:	9b05      	ldr	r3, [sp, #20]
 8007132:	b1bb      	cbz	r3, 8007164 <_strtod_l+0x60c>
 8007134:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007138:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800713c:	2b00      	cmp	r3, #0
 800713e:	4651      	mov	r1, sl
 8007140:	dd10      	ble.n	8007164 <_strtod_l+0x60c>
 8007142:	2b1f      	cmp	r3, #31
 8007144:	f340 8110 	ble.w	8007368 <_strtod_l+0x810>
 8007148:	2b34      	cmp	r3, #52	; 0x34
 800714a:	bfd8      	it	le
 800714c:	f04f 32ff 	movle.w	r2, #4294967295
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	bfcf      	iteee	gt
 8007156:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800715a:	3b20      	suble	r3, #32
 800715c:	fa02 f303 	lslle.w	r3, r2, r3
 8007160:	ea03 0a01 	andle.w	sl, r3, r1
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	4648      	mov	r0, r9
 800716a:	4651      	mov	r1, sl
 800716c:	f7f9 fc1c 	bl	80009a8 <__aeabi_dcmpeq>
 8007170:	2800      	cmp	r0, #0
 8007172:	d1a8      	bne.n	80070c6 <_strtod_l+0x56e>
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	9a04      	ldr	r2, [sp, #16]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	9908      	ldr	r1, [sp, #32]
 800717c:	4623      	mov	r3, r4
 800717e:	4658      	mov	r0, fp
 8007180:	f001 fd2f 	bl	8008be2 <__s2b>
 8007184:	9008      	str	r0, [sp, #32]
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f af00 	beq.w	8006f8c <_strtod_l+0x434>
 800718c:	9a07      	ldr	r2, [sp, #28]
 800718e:	9b07      	ldr	r3, [sp, #28]
 8007190:	2a00      	cmp	r2, #0
 8007192:	f1c3 0300 	rsb	r3, r3, #0
 8007196:	bfa8      	it	ge
 8007198:	2300      	movge	r3, #0
 800719a:	f04f 0800 	mov.w	r8, #0
 800719e:	930e      	str	r3, [sp, #56]	; 0x38
 80071a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071a4:	9316      	str	r3, [sp, #88]	; 0x58
 80071a6:	f8cd 8010 	str.w	r8, [sp, #16]
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	4658      	mov	r0, fp
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	f001 fc91 	bl	8008ad6 <_Balloc>
 80071b4:	9006      	str	r0, [sp, #24]
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f43f aef0 	beq.w	8006f9c <_strtod_l+0x444>
 80071bc:	9b08      	ldr	r3, [sp, #32]
 80071be:	300c      	adds	r0, #12
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	f103 010c 	add.w	r1, r3, #12
 80071c6:	3202      	adds	r2, #2
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	f001 fc79 	bl	8008ac0 <memcpy>
 80071ce:	ab1e      	add	r3, sp, #120	; 0x78
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	ab1d      	add	r3, sp, #116	; 0x74
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	464a      	mov	r2, r9
 80071d8:	4653      	mov	r3, sl
 80071da:	4658      	mov	r0, fp
 80071dc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80071e0:	f001 ffba 	bl	8009158 <__d2b>
 80071e4:	901c      	str	r0, [sp, #112]	; 0x70
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f aed8 	beq.w	8006f9c <_strtod_l+0x444>
 80071ec:	2101      	movs	r1, #1
 80071ee:	4658      	mov	r0, fp
 80071f0:	f001 fd83 	bl	8008cfa <__i2b>
 80071f4:	9004      	str	r0, [sp, #16]
 80071f6:	4603      	mov	r3, r0
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f43f aecf 	beq.w	8006f9c <_strtod_l+0x444>
 80071fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007200:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007202:	2d00      	cmp	r5, #0
 8007204:	bfab      	itete	ge
 8007206:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007208:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800720a:	18ee      	addge	r6, r5, r3
 800720c:	1b5c      	sublt	r4, r3, r5
 800720e:	9b05      	ldr	r3, [sp, #20]
 8007210:	bfa8      	it	ge
 8007212:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007214:	eba5 0503 	sub.w	r5, r5, r3
 8007218:	4415      	add	r5, r2
 800721a:	4b64      	ldr	r3, [pc, #400]	; (80073ac <_strtod_l+0x854>)
 800721c:	f105 35ff 	add.w	r5, r5, #4294967295
 8007220:	bfb8      	it	lt
 8007222:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007224:	429d      	cmp	r5, r3
 8007226:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800722a:	f280 80af 	bge.w	800738c <_strtod_l+0x834>
 800722e:	1b5b      	subs	r3, r3, r5
 8007230:	2b1f      	cmp	r3, #31
 8007232:	eba2 0203 	sub.w	r2, r2, r3
 8007236:	f04f 0701 	mov.w	r7, #1
 800723a:	f300 809c 	bgt.w	8007376 <_strtod_l+0x81e>
 800723e:	2500      	movs	r5, #0
 8007240:	fa07 f303 	lsl.w	r3, r7, r3
 8007244:	930f      	str	r3, [sp, #60]	; 0x3c
 8007246:	18b7      	adds	r7, r6, r2
 8007248:	9b05      	ldr	r3, [sp, #20]
 800724a:	42be      	cmp	r6, r7
 800724c:	4414      	add	r4, r2
 800724e:	441c      	add	r4, r3
 8007250:	4633      	mov	r3, r6
 8007252:	bfa8      	it	ge
 8007254:	463b      	movge	r3, r7
 8007256:	42a3      	cmp	r3, r4
 8007258:	bfa8      	it	ge
 800725a:	4623      	movge	r3, r4
 800725c:	2b00      	cmp	r3, #0
 800725e:	bfc2      	ittt	gt
 8007260:	1aff      	subgt	r7, r7, r3
 8007262:	1ae4      	subgt	r4, r4, r3
 8007264:	1af6      	subgt	r6, r6, r3
 8007266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007268:	b1bb      	cbz	r3, 800729a <_strtod_l+0x742>
 800726a:	461a      	mov	r2, r3
 800726c:	9904      	ldr	r1, [sp, #16]
 800726e:	4658      	mov	r0, fp
 8007270:	f001 fde2 	bl	8008e38 <__pow5mult>
 8007274:	9004      	str	r0, [sp, #16]
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f ae90 	beq.w	8006f9c <_strtod_l+0x444>
 800727c:	4601      	mov	r1, r0
 800727e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007280:	4658      	mov	r0, fp
 8007282:	f001 fd43 	bl	8008d0c <__multiply>
 8007286:	9009      	str	r0, [sp, #36]	; 0x24
 8007288:	2800      	cmp	r0, #0
 800728a:	f43f ae87 	beq.w	8006f9c <_strtod_l+0x444>
 800728e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007290:	4658      	mov	r0, fp
 8007292:	f001 fc54 	bl	8008b3e <_Bfree>
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	931c      	str	r3, [sp, #112]	; 0x70
 800729a:	2f00      	cmp	r7, #0
 800729c:	dc7a      	bgt.n	8007394 <_strtod_l+0x83c>
 800729e:	9b07      	ldr	r3, [sp, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	dd08      	ble.n	80072b6 <_strtod_l+0x75e>
 80072a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80072a6:	9906      	ldr	r1, [sp, #24]
 80072a8:	4658      	mov	r0, fp
 80072aa:	f001 fdc5 	bl	8008e38 <__pow5mult>
 80072ae:	9006      	str	r0, [sp, #24]
 80072b0:	2800      	cmp	r0, #0
 80072b2:	f43f ae73 	beq.w	8006f9c <_strtod_l+0x444>
 80072b6:	2c00      	cmp	r4, #0
 80072b8:	dd08      	ble.n	80072cc <_strtod_l+0x774>
 80072ba:	4622      	mov	r2, r4
 80072bc:	9906      	ldr	r1, [sp, #24]
 80072be:	4658      	mov	r0, fp
 80072c0:	f001 fe08 	bl	8008ed4 <__lshift>
 80072c4:	9006      	str	r0, [sp, #24]
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f43f ae68 	beq.w	8006f9c <_strtod_l+0x444>
 80072cc:	2e00      	cmp	r6, #0
 80072ce:	dd08      	ble.n	80072e2 <_strtod_l+0x78a>
 80072d0:	4632      	mov	r2, r6
 80072d2:	9904      	ldr	r1, [sp, #16]
 80072d4:	4658      	mov	r0, fp
 80072d6:	f001 fdfd 	bl	8008ed4 <__lshift>
 80072da:	9004      	str	r0, [sp, #16]
 80072dc:	2800      	cmp	r0, #0
 80072de:	f43f ae5d 	beq.w	8006f9c <_strtod_l+0x444>
 80072e2:	9a06      	ldr	r2, [sp, #24]
 80072e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80072e6:	4658      	mov	r0, fp
 80072e8:	f001 fe62 	bl	8008fb0 <__mdiff>
 80072ec:	4680      	mov	r8, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f43f ae54 	beq.w	8006f9c <_strtod_l+0x444>
 80072f4:	2400      	movs	r4, #0
 80072f6:	68c3      	ldr	r3, [r0, #12]
 80072f8:	9904      	ldr	r1, [sp, #16]
 80072fa:	60c4      	str	r4, [r0, #12]
 80072fc:	930c      	str	r3, [sp, #48]	; 0x30
 80072fe:	f001 fe3d 	bl	8008f7c <__mcmp>
 8007302:	42a0      	cmp	r0, r4
 8007304:	da54      	bge.n	80073b0 <_strtod_l+0x858>
 8007306:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007308:	b9f3      	cbnz	r3, 8007348 <_strtod_l+0x7f0>
 800730a:	f1b9 0f00 	cmp.w	r9, #0
 800730e:	d11b      	bne.n	8007348 <_strtod_l+0x7f0>
 8007310:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8007314:	b9c3      	cbnz	r3, 8007348 <_strtod_l+0x7f0>
 8007316:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800731a:	0d1b      	lsrs	r3, r3, #20
 800731c:	051b      	lsls	r3, r3, #20
 800731e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007322:	d911      	bls.n	8007348 <_strtod_l+0x7f0>
 8007324:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007328:	b91b      	cbnz	r3, 8007332 <_strtod_l+0x7da>
 800732a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800732e:	2b01      	cmp	r3, #1
 8007330:	dd0a      	ble.n	8007348 <_strtod_l+0x7f0>
 8007332:	4641      	mov	r1, r8
 8007334:	2201      	movs	r2, #1
 8007336:	4658      	mov	r0, fp
 8007338:	f001 fdcc 	bl	8008ed4 <__lshift>
 800733c:	9904      	ldr	r1, [sp, #16]
 800733e:	4680      	mov	r8, r0
 8007340:	f001 fe1c 	bl	8008f7c <__mcmp>
 8007344:	2800      	cmp	r0, #0
 8007346:	dc68      	bgt.n	800741a <_strtod_l+0x8c2>
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d172      	bne.n	8007434 <_strtod_l+0x8dc>
 800734e:	e630      	b.n	8006fb2 <_strtod_l+0x45a>
 8007350:	f018 0f01 	tst.w	r8, #1
 8007354:	d004      	beq.n	8007360 <_strtod_l+0x808>
 8007356:	e9d5 2300 	ldrd	r2, r3, [r5]
 800735a:	f7f9 f8bd 	bl	80004d8 <__aeabi_dmul>
 800735e:	2301      	movs	r3, #1
 8007360:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007364:	3508      	adds	r5, #8
 8007366:	e6dc      	b.n	8007122 <_strtod_l+0x5ca>
 8007368:	f04f 32ff 	mov.w	r2, #4294967295
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	ea03 0909 	and.w	r9, r3, r9
 8007374:	e6f6      	b.n	8007164 <_strtod_l+0x60c>
 8007376:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800737a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800737e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007382:	35e2      	adds	r5, #226	; 0xe2
 8007384:	fa07 f505 	lsl.w	r5, r7, r5
 8007388:	970f      	str	r7, [sp, #60]	; 0x3c
 800738a:	e75c      	b.n	8007246 <_strtod_l+0x6ee>
 800738c:	2301      	movs	r3, #1
 800738e:	2500      	movs	r5, #0
 8007390:	930f      	str	r3, [sp, #60]	; 0x3c
 8007392:	e758      	b.n	8007246 <_strtod_l+0x6ee>
 8007394:	463a      	mov	r2, r7
 8007396:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007398:	4658      	mov	r0, fp
 800739a:	f001 fd9b 	bl	8008ed4 <__lshift>
 800739e:	901c      	str	r0, [sp, #112]	; 0x70
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f47f af7c 	bne.w	800729e <_strtod_l+0x746>
 80073a6:	e5f9      	b.n	8006f9c <_strtod_l+0x444>
 80073a8:	080099d8 	.word	0x080099d8
 80073ac:	fffffc02 	.word	0xfffffc02
 80073b0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80073b4:	f040 8089 	bne.w	80074ca <_strtod_l+0x972>
 80073b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80073be:	b342      	cbz	r2, 8007412 <_strtod_l+0x8ba>
 80073c0:	4aaf      	ldr	r2, [pc, #700]	; (8007680 <_strtod_l+0xb28>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d156      	bne.n	8007474 <_strtod_l+0x91c>
 80073c6:	9b05      	ldr	r3, [sp, #20]
 80073c8:	4648      	mov	r0, r9
 80073ca:	b1eb      	cbz	r3, 8007408 <_strtod_l+0x8b0>
 80073cc:	4653      	mov	r3, sl
 80073ce:	4aad      	ldr	r2, [pc, #692]	; (8007684 <_strtod_l+0xb2c>)
 80073d0:	f04f 31ff 	mov.w	r1, #4294967295
 80073d4:	401a      	ands	r2, r3
 80073d6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80073da:	d818      	bhi.n	800740e <_strtod_l+0x8b6>
 80073dc:	0d12      	lsrs	r2, r2, #20
 80073de:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80073e2:	fa01 f303 	lsl.w	r3, r1, r3
 80073e6:	4298      	cmp	r0, r3
 80073e8:	d144      	bne.n	8007474 <_strtod_l+0x91c>
 80073ea:	4ba7      	ldr	r3, [pc, #668]	; (8007688 <_strtod_l+0xb30>)
 80073ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d102      	bne.n	80073f8 <_strtod_l+0x8a0>
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f add2 	beq.w	8006f9c <_strtod_l+0x444>
 80073f8:	4ba2      	ldr	r3, [pc, #648]	; (8007684 <_strtod_l+0xb2c>)
 80073fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	401a      	ands	r2, r3
 8007402:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8007406:	e79f      	b.n	8007348 <_strtod_l+0x7f0>
 8007408:	f04f 33ff 	mov.w	r3, #4294967295
 800740c:	e7eb      	b.n	80073e6 <_strtod_l+0x88e>
 800740e:	460b      	mov	r3, r1
 8007410:	e7e9      	b.n	80073e6 <_strtod_l+0x88e>
 8007412:	bb7b      	cbnz	r3, 8007474 <_strtod_l+0x91c>
 8007414:	f1b9 0f00 	cmp.w	r9, #0
 8007418:	d12c      	bne.n	8007474 <_strtod_l+0x91c>
 800741a:	9905      	ldr	r1, [sp, #20]
 800741c:	4653      	mov	r3, sl
 800741e:	4a99      	ldr	r2, [pc, #612]	; (8007684 <_strtod_l+0xb2c>)
 8007420:	b1f1      	cbz	r1, 8007460 <_strtod_l+0x908>
 8007422:	ea02 010a 	and.w	r1, r2, sl
 8007426:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800742a:	dc19      	bgt.n	8007460 <_strtod_l+0x908>
 800742c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007430:	f77f ae51 	ble.w	80070d6 <_strtod_l+0x57e>
 8007434:	2300      	movs	r3, #0
 8007436:	4a95      	ldr	r2, [pc, #596]	; (800768c <_strtod_l+0xb34>)
 8007438:	4648      	mov	r0, r9
 800743a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800743e:	4651      	mov	r1, sl
 8007440:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007444:	f7f9 f848 	bl	80004d8 <__aeabi_dmul>
 8007448:	4681      	mov	r9, r0
 800744a:	468a      	mov	sl, r1
 800744c:	2900      	cmp	r1, #0
 800744e:	f47f adb0 	bne.w	8006fb2 <_strtod_l+0x45a>
 8007452:	2800      	cmp	r0, #0
 8007454:	f47f adad 	bne.w	8006fb2 <_strtod_l+0x45a>
 8007458:	2322      	movs	r3, #34	; 0x22
 800745a:	f8cb 3000 	str.w	r3, [fp]
 800745e:	e5a8      	b.n	8006fb2 <_strtod_l+0x45a>
 8007460:	4013      	ands	r3, r2
 8007462:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007466:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800746a:	f04f 39ff 	mov.w	r9, #4294967295
 800746e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007472:	e769      	b.n	8007348 <_strtod_l+0x7f0>
 8007474:	b19d      	cbz	r5, 800749e <_strtod_l+0x946>
 8007476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007478:	421d      	tst	r5, r3
 800747a:	f43f af65 	beq.w	8007348 <_strtod_l+0x7f0>
 800747e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007480:	9a05      	ldr	r2, [sp, #20]
 8007482:	4648      	mov	r0, r9
 8007484:	4651      	mov	r1, sl
 8007486:	b173      	cbz	r3, 80074a6 <_strtod_l+0x94e>
 8007488:	f7ff fb44 	bl	8006b14 <sulp>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007494:	f7f8 fe6a 	bl	800016c <__adddf3>
 8007498:	4681      	mov	r9, r0
 800749a:	468a      	mov	sl, r1
 800749c:	e754      	b.n	8007348 <_strtod_l+0x7f0>
 800749e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074a0:	ea13 0f09 	tst.w	r3, r9
 80074a4:	e7e9      	b.n	800747a <_strtod_l+0x922>
 80074a6:	f7ff fb35 	bl	8006b14 <sulp>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074b2:	f7f8 fe59 	bl	8000168 <__aeabi_dsub>
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4681      	mov	r9, r0
 80074bc:	468a      	mov	sl, r1
 80074be:	f7f9 fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f47f ae07 	bne.w	80070d6 <_strtod_l+0x57e>
 80074c8:	e73e      	b.n	8007348 <_strtod_l+0x7f0>
 80074ca:	9904      	ldr	r1, [sp, #16]
 80074cc:	4640      	mov	r0, r8
 80074ce:	f001 fe92 	bl	80091f6 <__ratio>
 80074d2:	2200      	movs	r2, #0
 80074d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074d8:	4606      	mov	r6, r0
 80074da:	460f      	mov	r7, r1
 80074dc:	f7f9 fa78 	bl	80009d0 <__aeabi_dcmple>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d075      	beq.n	80075d0 <_strtod_l+0xa78>
 80074e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d047      	beq.n	800757a <_strtod_l+0xa22>
 80074ea:	2600      	movs	r6, #0
 80074ec:	4f68      	ldr	r7, [pc, #416]	; (8007690 <_strtod_l+0xb38>)
 80074ee:	4d68      	ldr	r5, [pc, #416]	; (8007690 <_strtod_l+0xb38>)
 80074f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074f6:	0d1b      	lsrs	r3, r3, #20
 80074f8:	051b      	lsls	r3, r3, #20
 80074fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80074fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80074fe:	4b65      	ldr	r3, [pc, #404]	; (8007694 <_strtod_l+0xb3c>)
 8007500:	429a      	cmp	r2, r3
 8007502:	f040 80cf 	bne.w	80076a4 <_strtod_l+0xb4c>
 8007506:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800750a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	4648      	mov	r0, r9
 8007512:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8007516:	4651      	mov	r1, sl
 8007518:	f001 fda8 	bl	800906c <__ulp>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4630      	mov	r0, r6
 8007522:	4639      	mov	r1, r7
 8007524:	f7f8 ffd8 	bl	80004d8 <__aeabi_dmul>
 8007528:	464a      	mov	r2, r9
 800752a:	4653      	mov	r3, sl
 800752c:	f7f8 fe1e 	bl	800016c <__adddf3>
 8007530:	460b      	mov	r3, r1
 8007532:	4954      	ldr	r1, [pc, #336]	; (8007684 <_strtod_l+0xb2c>)
 8007534:	4a58      	ldr	r2, [pc, #352]	; (8007698 <_strtod_l+0xb40>)
 8007536:	4019      	ands	r1, r3
 8007538:	4291      	cmp	r1, r2
 800753a:	4681      	mov	r9, r0
 800753c:	d95e      	bls.n	80075fc <_strtod_l+0xaa4>
 800753e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007540:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007544:	4293      	cmp	r3, r2
 8007546:	d103      	bne.n	8007550 <_strtod_l+0x9f8>
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	3301      	adds	r3, #1
 800754c:	f43f ad26 	beq.w	8006f9c <_strtod_l+0x444>
 8007550:	f04f 39ff 	mov.w	r9, #4294967295
 8007554:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007688 <_strtod_l+0xb30>
 8007558:	991c      	ldr	r1, [sp, #112]	; 0x70
 800755a:	4658      	mov	r0, fp
 800755c:	f001 faef 	bl	8008b3e <_Bfree>
 8007560:	9906      	ldr	r1, [sp, #24]
 8007562:	4658      	mov	r0, fp
 8007564:	f001 faeb 	bl	8008b3e <_Bfree>
 8007568:	9904      	ldr	r1, [sp, #16]
 800756a:	4658      	mov	r0, fp
 800756c:	f001 fae7 	bl	8008b3e <_Bfree>
 8007570:	4641      	mov	r1, r8
 8007572:	4658      	mov	r0, fp
 8007574:	f001 fae3 	bl	8008b3e <_Bfree>
 8007578:	e617      	b.n	80071aa <_strtod_l+0x652>
 800757a:	f1b9 0f00 	cmp.w	r9, #0
 800757e:	d119      	bne.n	80075b4 <_strtod_l+0xa5c>
 8007580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007586:	b9e3      	cbnz	r3, 80075c2 <_strtod_l+0xa6a>
 8007588:	2200      	movs	r2, #0
 800758a:	4b41      	ldr	r3, [pc, #260]	; (8007690 <_strtod_l+0xb38>)
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f9 fa14 	bl	80009bc <__aeabi_dcmplt>
 8007594:	b9c8      	cbnz	r0, 80075ca <_strtod_l+0xa72>
 8007596:	2200      	movs	r2, #0
 8007598:	4b40      	ldr	r3, [pc, #256]	; (800769c <_strtod_l+0xb44>)
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 ff9b 	bl	80004d8 <__aeabi_dmul>
 80075a2:	4604      	mov	r4, r0
 80075a4:	460d      	mov	r5, r1
 80075a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80075aa:	9418      	str	r4, [sp, #96]	; 0x60
 80075ac:	9319      	str	r3, [sp, #100]	; 0x64
 80075ae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80075b2:	e79d      	b.n	80074f0 <_strtod_l+0x998>
 80075b4:	f1b9 0f01 	cmp.w	r9, #1
 80075b8:	d103      	bne.n	80075c2 <_strtod_l+0xa6a>
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f43f ad8a 	beq.w	80070d6 <_strtod_l+0x57e>
 80075c2:	2600      	movs	r6, #0
 80075c4:	4f36      	ldr	r7, [pc, #216]	; (80076a0 <_strtod_l+0xb48>)
 80075c6:	2400      	movs	r4, #0
 80075c8:	e791      	b.n	80074ee <_strtod_l+0x996>
 80075ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80075cc:	4d33      	ldr	r5, [pc, #204]	; (800769c <_strtod_l+0xb44>)
 80075ce:	e7ea      	b.n	80075a6 <_strtod_l+0xa4e>
 80075d0:	4b32      	ldr	r3, [pc, #200]	; (800769c <_strtod_l+0xb44>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	4630      	mov	r0, r6
 80075d6:	4639      	mov	r1, r7
 80075d8:	f7f8 ff7e 	bl	80004d8 <__aeabi_dmul>
 80075dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
 80075e2:	b933      	cbnz	r3, 80075f2 <_strtod_l+0xa9a>
 80075e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075e8:	9010      	str	r0, [sp, #64]	; 0x40
 80075ea:	9311      	str	r3, [sp, #68]	; 0x44
 80075ec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80075f0:	e77e      	b.n	80074f0 <_strtod_l+0x998>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80075fa:	e7f7      	b.n	80075ec <_strtod_l+0xa94>
 80075fc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1a8      	bne.n	8007558 <_strtod_l+0xa00>
 8007606:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800760a:	0d1b      	lsrs	r3, r3, #20
 800760c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800760e:	051b      	lsls	r3, r3, #20
 8007610:	429a      	cmp	r2, r3
 8007612:	4656      	mov	r6, sl
 8007614:	d1a0      	bne.n	8007558 <_strtod_l+0xa00>
 8007616:	4629      	mov	r1, r5
 8007618:	4620      	mov	r0, r4
 800761a:	f7f9 fa0d 	bl	8000a38 <__aeabi_d2iz>
 800761e:	f7f8 fef1 	bl	8000404 <__aeabi_i2d>
 8007622:	460b      	mov	r3, r1
 8007624:	4602      	mov	r2, r0
 8007626:	4629      	mov	r1, r5
 8007628:	4620      	mov	r0, r4
 800762a:	f7f8 fd9d 	bl	8000168 <__aeabi_dsub>
 800762e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007630:	4604      	mov	r4, r0
 8007632:	460d      	mov	r5, r1
 8007634:	b933      	cbnz	r3, 8007644 <_strtod_l+0xaec>
 8007636:	f1b9 0f00 	cmp.w	r9, #0
 800763a:	d103      	bne.n	8007644 <_strtod_l+0xaec>
 800763c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007640:	2e00      	cmp	r6, #0
 8007642:	d06a      	beq.n	800771a <_strtod_l+0xbc2>
 8007644:	a30a      	add	r3, pc, #40	; (adr r3, 8007670 <_strtod_l+0xb18>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	f7f9 f9b5 	bl	80009bc <__aeabi_dcmplt>
 8007652:	2800      	cmp	r0, #0
 8007654:	f47f acad 	bne.w	8006fb2 <_strtod_l+0x45a>
 8007658:	a307      	add	r3, pc, #28	; (adr r3, 8007678 <_strtod_l+0xb20>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f9 f9c9 	bl	80009f8 <__aeabi_dcmpgt>
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f af76 	beq.w	8007558 <_strtod_l+0xa00>
 800766c:	e4a1      	b.n	8006fb2 <_strtod_l+0x45a>
 800766e:	bf00      	nop
 8007670:	94a03595 	.word	0x94a03595
 8007674:	3fdfffff 	.word	0x3fdfffff
 8007678:	35afe535 	.word	0x35afe535
 800767c:	3fe00000 	.word	0x3fe00000
 8007680:	000fffff 	.word	0x000fffff
 8007684:	7ff00000 	.word	0x7ff00000
 8007688:	7fefffff 	.word	0x7fefffff
 800768c:	39500000 	.word	0x39500000
 8007690:	3ff00000 	.word	0x3ff00000
 8007694:	7fe00000 	.word	0x7fe00000
 8007698:	7c9fffff 	.word	0x7c9fffff
 800769c:	3fe00000 	.word	0x3fe00000
 80076a0:	bff00000 	.word	0xbff00000
 80076a4:	9b05      	ldr	r3, [sp, #20]
 80076a6:	b313      	cbz	r3, 80076ee <_strtod_l+0xb96>
 80076a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076aa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076ae:	d81e      	bhi.n	80076ee <_strtod_l+0xb96>
 80076b0:	a325      	add	r3, pc, #148	; (adr r3, 8007748 <_strtod_l+0xbf0>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 f989 	bl	80009d0 <__aeabi_dcmple>
 80076be:	b190      	cbz	r0, 80076e6 <_strtod_l+0xb8e>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4620      	mov	r0, r4
 80076c4:	f7f9 f9e0 	bl	8000a88 <__aeabi_d2uiz>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	bf08      	it	eq
 80076cc:	2001      	moveq	r0, #1
 80076ce:	f7f8 fe89 	bl	80003e4 <__aeabi_ui2d>
 80076d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076d4:	4604      	mov	r4, r0
 80076d6:	460d      	mov	r5, r1
 80076d8:	b9d3      	cbnz	r3, 8007710 <_strtod_l+0xbb8>
 80076da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076de:	9012      	str	r0, [sp, #72]	; 0x48
 80076e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80076e2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80076e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076e8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80076ec:	1a9f      	subs	r7, r3, r2
 80076ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076f2:	f001 fcbb 	bl	800906c <__ulp>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f8 feeb 	bl	80004d8 <__aeabi_dmul>
 8007702:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007706:	f7f8 fd31 	bl	800016c <__adddf3>
 800770a:	4681      	mov	r9, r0
 800770c:	468a      	mov	sl, r1
 800770e:	e777      	b.n	8007600 <_strtod_l+0xaa8>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007718:	e7e3      	b.n	80076e2 <_strtod_l+0xb8a>
 800771a:	a30d      	add	r3, pc, #52	; (adr r3, 8007750 <_strtod_l+0xbf8>)
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f7f9 f94c 	bl	80009bc <__aeabi_dcmplt>
 8007724:	e79f      	b.n	8007666 <_strtod_l+0xb0e>
 8007726:	2300      	movs	r3, #0
 8007728:	930d      	str	r3, [sp, #52]	; 0x34
 800772a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800772c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	f7ff ba55 	b.w	8006bde <_strtod_l+0x86>
 8007734:	2b65      	cmp	r3, #101	; 0x65
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f43f ab42 	beq.w	8006dc2 <_strtod_l+0x26a>
 800773e:	2101      	movs	r1, #1
 8007740:	4614      	mov	r4, r2
 8007742:	9105      	str	r1, [sp, #20]
 8007744:	f7ff babf 	b.w	8006cc6 <_strtod_l+0x16e>
 8007748:	ffc00000 	.word	0xffc00000
 800774c:	41dfffff 	.word	0x41dfffff
 8007750:	94a03595 	.word	0x94a03595
 8007754:	3fcfffff 	.word	0x3fcfffff

08007758 <strtod>:
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <strtod+0x1c>)
 800775a:	b410      	push	{r4}
 800775c:	681c      	ldr	r4, [r3, #0]
 800775e:	4a06      	ldr	r2, [pc, #24]	; (8007778 <strtod+0x20>)
 8007760:	6a23      	ldr	r3, [r4, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf08      	it	eq
 8007766:	4613      	moveq	r3, r2
 8007768:	460a      	mov	r2, r1
 800776a:	4601      	mov	r1, r0
 800776c:	4620      	mov	r0, r4
 800776e:	bc10      	pop	{r4}
 8007770:	f7ff b9f2 	b.w	8006b58 <_strtod_l>
 8007774:	20000018 	.word	0x20000018
 8007778:	2000007c 	.word	0x2000007c

0800777c <quorem>:
 800777c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007780:	6903      	ldr	r3, [r0, #16]
 8007782:	690c      	ldr	r4, [r1, #16]
 8007784:	4680      	mov	r8, r0
 8007786:	42a3      	cmp	r3, r4
 8007788:	f2c0 8084 	blt.w	8007894 <quorem+0x118>
 800778c:	3c01      	subs	r4, #1
 800778e:	f101 0714 	add.w	r7, r1, #20
 8007792:	f100 0614 	add.w	r6, r0, #20
 8007796:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800779a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800779e:	3501      	adds	r5, #1
 80077a0:	fbb0 f5f5 	udiv	r5, r0, r5
 80077a4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80077a8:	eb06 030c 	add.w	r3, r6, ip
 80077ac:	eb07 090c 	add.w	r9, r7, ip
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	b39d      	cbz	r5, 800781c <quorem+0xa0>
 80077b4:	f04f 0a00 	mov.w	sl, #0
 80077b8:	4638      	mov	r0, r7
 80077ba:	46b6      	mov	lr, r6
 80077bc:	46d3      	mov	fp, sl
 80077be:	f850 2b04 	ldr.w	r2, [r0], #4
 80077c2:	b293      	uxth	r3, r2
 80077c4:	fb05 a303 	mla	r3, r5, r3, sl
 80077c8:	0c12      	lsrs	r2, r2, #16
 80077ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077ce:	fb05 a202 	mla	r2, r5, r2, sl
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ebab 0303 	sub.w	r3, fp, r3
 80077d8:	f8de b000 	ldr.w	fp, [lr]
 80077dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80077e0:	fa1f fb8b 	uxth.w	fp, fp
 80077e4:	445b      	add	r3, fp
 80077e6:	fa1f fb82 	uxth.w	fp, r2
 80077ea:	f8de 2000 	ldr.w	r2, [lr]
 80077ee:	4581      	cmp	r9, r0
 80077f0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80077f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007802:	f84e 3b04 	str.w	r3, [lr], #4
 8007806:	d2da      	bcs.n	80077be <quorem+0x42>
 8007808:	f856 300c 	ldr.w	r3, [r6, ip]
 800780c:	b933      	cbnz	r3, 800781c <quorem+0xa0>
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	3b04      	subs	r3, #4
 8007812:	429e      	cmp	r6, r3
 8007814:	461a      	mov	r2, r3
 8007816:	d331      	bcc.n	800787c <quorem+0x100>
 8007818:	f8c8 4010 	str.w	r4, [r8, #16]
 800781c:	4640      	mov	r0, r8
 800781e:	f001 fbad 	bl	8008f7c <__mcmp>
 8007822:	2800      	cmp	r0, #0
 8007824:	db26      	blt.n	8007874 <quorem+0xf8>
 8007826:	4630      	mov	r0, r6
 8007828:	f04f 0c00 	mov.w	ip, #0
 800782c:	3501      	adds	r5, #1
 800782e:	f857 1b04 	ldr.w	r1, [r7], #4
 8007832:	f8d0 e000 	ldr.w	lr, [r0]
 8007836:	b28b      	uxth	r3, r1
 8007838:	ebac 0303 	sub.w	r3, ip, r3
 800783c:	fa1f f28e 	uxth.w	r2, lr
 8007840:	4413      	add	r3, r2
 8007842:	0c0a      	lsrs	r2, r1, #16
 8007844:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800784c:	b29b      	uxth	r3, r3
 800784e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007852:	45b9      	cmp	r9, r7
 8007854:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007858:	f840 3b04 	str.w	r3, [r0], #4
 800785c:	d2e7      	bcs.n	800782e <quorem+0xb2>
 800785e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007862:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007866:	b92a      	cbnz	r2, 8007874 <quorem+0xf8>
 8007868:	3b04      	subs	r3, #4
 800786a:	429e      	cmp	r6, r3
 800786c:	461a      	mov	r2, r3
 800786e:	d30b      	bcc.n	8007888 <quorem+0x10c>
 8007870:	f8c8 4010 	str.w	r4, [r8, #16]
 8007874:	4628      	mov	r0, r5
 8007876:	b003      	add	sp, #12
 8007878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	3b04      	subs	r3, #4
 8007880:	2a00      	cmp	r2, #0
 8007882:	d1c9      	bne.n	8007818 <quorem+0x9c>
 8007884:	3c01      	subs	r4, #1
 8007886:	e7c4      	b.n	8007812 <quorem+0x96>
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	3b04      	subs	r3, #4
 800788c:	2a00      	cmp	r2, #0
 800788e:	d1ef      	bne.n	8007870 <quorem+0xf4>
 8007890:	3c01      	subs	r4, #1
 8007892:	e7ea      	b.n	800786a <quorem+0xee>
 8007894:	2000      	movs	r0, #0
 8007896:	e7ee      	b.n	8007876 <quorem+0xfa>

08007898 <_dtoa_r>:
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	4616      	mov	r6, r2
 800789e:	461f      	mov	r7, r3
 80078a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80078a2:	b095      	sub	sp, #84	; 0x54
 80078a4:	4604      	mov	r4, r0
 80078a6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80078aa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80078ae:	b93d      	cbnz	r5, 80078c0 <_dtoa_r+0x28>
 80078b0:	2010      	movs	r0, #16
 80078b2:	f001 f8dd 	bl	8008a70 <malloc>
 80078b6:	6260      	str	r0, [r4, #36]	; 0x24
 80078b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80078bc:	6005      	str	r5, [r0, #0]
 80078be:	60c5      	str	r5, [r0, #12]
 80078c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078c2:	6819      	ldr	r1, [r3, #0]
 80078c4:	b151      	cbz	r1, 80078dc <_dtoa_r+0x44>
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	2301      	movs	r3, #1
 80078ca:	4093      	lsls	r3, r2
 80078cc:	604a      	str	r2, [r1, #4]
 80078ce:	608b      	str	r3, [r1, #8]
 80078d0:	4620      	mov	r0, r4
 80078d2:	f001 f934 	bl	8008b3e <_Bfree>
 80078d6:	2200      	movs	r2, #0
 80078d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	1e3b      	subs	r3, r7, #0
 80078de:	bfaf      	iteee	ge
 80078e0:	2300      	movge	r3, #0
 80078e2:	2201      	movlt	r2, #1
 80078e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078e8:	9303      	strlt	r3, [sp, #12]
 80078ea:	bfac      	ite	ge
 80078ec:	f8c8 3000 	strge.w	r3, [r8]
 80078f0:	f8c8 2000 	strlt.w	r2, [r8]
 80078f4:	4bae      	ldr	r3, [pc, #696]	; (8007bb0 <_dtoa_r+0x318>)
 80078f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80078fa:	ea33 0308 	bics.w	r3, r3, r8
 80078fe:	d11b      	bne.n	8007938 <_dtoa_r+0xa0>
 8007900:	f242 730f 	movw	r3, #9999	; 0x270f
 8007904:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	9b02      	ldr	r3, [sp, #8]
 800790a:	b923      	cbnz	r3, 8007916 <_dtoa_r+0x7e>
 800790c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007910:	2800      	cmp	r0, #0
 8007912:	f000 8545 	beq.w	80083a0 <_dtoa_r+0xb08>
 8007916:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007918:	b953      	cbnz	r3, 8007930 <_dtoa_r+0x98>
 800791a:	4ba6      	ldr	r3, [pc, #664]	; (8007bb4 <_dtoa_r+0x31c>)
 800791c:	e021      	b.n	8007962 <_dtoa_r+0xca>
 800791e:	4ba6      	ldr	r3, [pc, #664]	; (8007bb8 <_dtoa_r+0x320>)
 8007920:	9306      	str	r3, [sp, #24]
 8007922:	3308      	adds	r3, #8
 8007924:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	9806      	ldr	r0, [sp, #24]
 800792a:	b015      	add	sp, #84	; 0x54
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	4ba0      	ldr	r3, [pc, #640]	; (8007bb4 <_dtoa_r+0x31c>)
 8007932:	9306      	str	r3, [sp, #24]
 8007934:	3303      	adds	r3, #3
 8007936:	e7f5      	b.n	8007924 <_dtoa_r+0x8c>
 8007938:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800793c:	2200      	movs	r2, #0
 800793e:	2300      	movs	r3, #0
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f9 f830 	bl	80009a8 <__aeabi_dcmpeq>
 8007948:	4682      	mov	sl, r0
 800794a:	b160      	cbz	r0, 8007966 <_dtoa_r+0xce>
 800794c:	2301      	movs	r3, #1
 800794e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8520 	beq.w	800839a <_dtoa_r+0xb02>
 800795a:	4b98      	ldr	r3, [pc, #608]	; (8007bbc <_dtoa_r+0x324>)
 800795c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	3b01      	subs	r3, #1
 8007962:	9306      	str	r3, [sp, #24]
 8007964:	e7e0      	b.n	8007928 <_dtoa_r+0x90>
 8007966:	ab12      	add	r3, sp, #72	; 0x48
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	ab13      	add	r3, sp, #76	; 0x4c
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4632      	mov	r2, r6
 8007970:	463b      	mov	r3, r7
 8007972:	4620      	mov	r0, r4
 8007974:	f001 fbf0 	bl	8009158 <__d2b>
 8007978:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800797c:	4683      	mov	fp, r0
 800797e:	2d00      	cmp	r5, #0
 8007980:	d07d      	beq.n	8007a7e <_dtoa_r+0x1e6>
 8007982:	46b0      	mov	r8, r6
 8007984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007988:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800798c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007990:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007994:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007998:	2200      	movs	r2, #0
 800799a:	4b89      	ldr	r3, [pc, #548]	; (8007bc0 <_dtoa_r+0x328>)
 800799c:	4640      	mov	r0, r8
 800799e:	4649      	mov	r1, r9
 80079a0:	f7f8 fbe2 	bl	8000168 <__aeabi_dsub>
 80079a4:	a37c      	add	r3, pc, #496	; (adr r3, 8007b98 <_dtoa_r+0x300>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f8 fd95 	bl	80004d8 <__aeabi_dmul>
 80079ae:	a37c      	add	r3, pc, #496	; (adr r3, 8007ba0 <_dtoa_r+0x308>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fbda 	bl	800016c <__adddf3>
 80079b8:	4606      	mov	r6, r0
 80079ba:	4628      	mov	r0, r5
 80079bc:	460f      	mov	r7, r1
 80079be:	f7f8 fd21 	bl	8000404 <__aeabi_i2d>
 80079c2:	a379      	add	r3, pc, #484	; (adr r3, 8007ba8 <_dtoa_r+0x310>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fd86 	bl	80004d8 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4630      	mov	r0, r6
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f8 fbca 	bl	800016c <__adddf3>
 80079d8:	4606      	mov	r6, r0
 80079da:	460f      	mov	r7, r1
 80079dc:	f7f9 f82c 	bl	8000a38 <__aeabi_d2iz>
 80079e0:	2200      	movs	r2, #0
 80079e2:	4682      	mov	sl, r0
 80079e4:	2300      	movs	r3, #0
 80079e6:	4630      	mov	r0, r6
 80079e8:	4639      	mov	r1, r7
 80079ea:	f7f8 ffe7 	bl	80009bc <__aeabi_dcmplt>
 80079ee:	b148      	cbz	r0, 8007a04 <_dtoa_r+0x16c>
 80079f0:	4650      	mov	r0, sl
 80079f2:	f7f8 fd07 	bl	8000404 <__aeabi_i2d>
 80079f6:	4632      	mov	r2, r6
 80079f8:	463b      	mov	r3, r7
 80079fa:	f7f8 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80079fe:	b908      	cbnz	r0, 8007a04 <_dtoa_r+0x16c>
 8007a00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a04:	f1ba 0f16 	cmp.w	sl, #22
 8007a08:	d85a      	bhi.n	8007ac0 <_dtoa_r+0x228>
 8007a0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a0e:	496d      	ldr	r1, [pc, #436]	; (8007bc4 <_dtoa_r+0x32c>)
 8007a10:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a18:	f7f8 ffee 	bl	80009f8 <__aeabi_dcmpgt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d051      	beq.n	8007ac4 <_dtoa_r+0x22c>
 8007a20:	2300      	movs	r3, #0
 8007a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a26:	930d      	str	r3, [sp, #52]	; 0x34
 8007a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a2a:	1b5d      	subs	r5, r3, r5
 8007a2c:	1e6b      	subs	r3, r5, #1
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	bf43      	ittte	mi
 8007a32:	2300      	movmi	r3, #0
 8007a34:	f1c5 0901 	rsbmi	r9, r5, #1
 8007a38:	9307      	strmi	r3, [sp, #28]
 8007a3a:	f04f 0900 	movpl.w	r9, #0
 8007a3e:	f1ba 0f00 	cmp.w	sl, #0
 8007a42:	db41      	blt.n	8007ac8 <_dtoa_r+0x230>
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007a4a:	4453      	add	r3, sl
 8007a4c:	9307      	str	r3, [sp, #28]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9308      	str	r3, [sp, #32]
 8007a52:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	f200 808f 	bhi.w	8007b78 <_dtoa_r+0x2e0>
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	bfc4      	itt	gt
 8007a5e:	3b04      	subgt	r3, #4
 8007a60:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007a62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a64:	bfc8      	it	gt
 8007a66:	2500      	movgt	r5, #0
 8007a68:	f1a3 0302 	sub.w	r3, r3, #2
 8007a6c:	bfd8      	it	le
 8007a6e:	2501      	movle	r5, #1
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	f200 808d 	bhi.w	8007b90 <_dtoa_r+0x2f8>
 8007a76:	e8df f003 	tbb	[pc, r3]
 8007a7a:	7d7b      	.short	0x7d7b
 8007a7c:	6f2f      	.short	0x6f2f
 8007a7e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a82:	441d      	add	r5, r3
 8007a84:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007a88:	2820      	cmp	r0, #32
 8007a8a:	dd13      	ble.n	8007ab4 <_dtoa_r+0x21c>
 8007a8c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	fa08 f800 	lsl.w	r8, r8, r0
 8007a96:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007a9a:	fa23 f000 	lsr.w	r0, r3, r0
 8007a9e:	ea48 0000 	orr.w	r0, r8, r0
 8007aa2:	f7f8 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007aae:	3d01      	subs	r5, #1
 8007ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ab2:	e771      	b.n	8007998 <_dtoa_r+0x100>
 8007ab4:	9b02      	ldr	r3, [sp, #8]
 8007ab6:	f1c0 0020 	rsb	r0, r0, #32
 8007aba:	fa03 f000 	lsl.w	r0, r3, r0
 8007abe:	e7f0      	b.n	8007aa2 <_dtoa_r+0x20a>
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e7b0      	b.n	8007a26 <_dtoa_r+0x18e>
 8007ac4:	900d      	str	r0, [sp, #52]	; 0x34
 8007ac6:	e7af      	b.n	8007a28 <_dtoa_r+0x190>
 8007ac8:	f1ca 0300 	rsb	r3, sl, #0
 8007acc:	9308      	str	r3, [sp, #32]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	eba9 090a 	sub.w	r9, r9, sl
 8007ad4:	930c      	str	r3, [sp, #48]	; 0x30
 8007ad6:	e7bc      	b.n	8007a52 <_dtoa_r+0x1ba>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	dd74      	ble.n	8007bcc <_dtoa_r+0x334>
 8007ae2:	4698      	mov	r8, r3
 8007ae4:	9304      	str	r3, [sp, #16]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007aea:	6072      	str	r2, [r6, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	f102 0014 	add.w	r0, r2, #20
 8007af2:	4298      	cmp	r0, r3
 8007af4:	6871      	ldr	r1, [r6, #4]
 8007af6:	d96e      	bls.n	8007bd6 <_dtoa_r+0x33e>
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 ffec 	bl	8008ad6 <_Balloc>
 8007afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b00:	6030      	str	r0, [r6, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f1b8 0f0e 	cmp.w	r8, #14
 8007b08:	9306      	str	r3, [sp, #24]
 8007b0a:	f200 80ed 	bhi.w	8007ce8 <_dtoa_r+0x450>
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	f000 80ea 	beq.w	8007ce8 <_dtoa_r+0x450>
 8007b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b18:	f1ba 0f00 	cmp.w	sl, #0
 8007b1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b20:	dd77      	ble.n	8007c12 <_dtoa_r+0x37a>
 8007b22:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <_dtoa_r+0x32c>)
 8007b24:	f00a 030f 	and.w	r3, sl, #15
 8007b28:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007b2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b30:	06f0      	lsls	r0, r6, #27
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b3a:	d568      	bpl.n	8007c0e <_dtoa_r+0x376>
 8007b3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b40:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <_dtoa_r+0x330>)
 8007b42:	2503      	movs	r5, #3
 8007b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b48:	f7f8 fdf0 	bl	800072c <__aeabi_ddiv>
 8007b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b50:	f006 060f 	and.w	r6, r6, #15
 8007b54:	4f1c      	ldr	r7, [pc, #112]	; (8007bc8 <_dtoa_r+0x330>)
 8007b56:	e04f      	b.n	8007bf8 <_dtoa_r+0x360>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007b5e:	4453      	add	r3, sl
 8007b60:	f103 0801 	add.w	r8, r3, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	4643      	mov	r3, r8
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	bfb8      	it	lt
 8007b6c:	2301      	movlt	r3, #1
 8007b6e:	e7ba      	b.n	8007ae6 <_dtoa_r+0x24e>
 8007b70:	2300      	movs	r3, #0
 8007b72:	e7b2      	b.n	8007ada <_dtoa_r+0x242>
 8007b74:	2300      	movs	r3, #0
 8007b76:	e7f0      	b.n	8007b5a <_dtoa_r+0x2c2>
 8007b78:	2501      	movs	r5, #1
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9509      	str	r5, [sp, #36]	; 0x24
 8007b7e:	931e      	str	r3, [sp, #120]	; 0x78
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295
 8007b84:	2200      	movs	r2, #0
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	4698      	mov	r8, r3
 8007b8a:	2312      	movs	r3, #18
 8007b8c:	921f      	str	r2, [sp, #124]	; 0x7c
 8007b8e:	e7aa      	b.n	8007ae6 <_dtoa_r+0x24e>
 8007b90:	2301      	movs	r3, #1
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	e7f4      	b.n	8007b80 <_dtoa_r+0x2e8>
 8007b96:	bf00      	nop
 8007b98:	636f4361 	.word	0x636f4361
 8007b9c:	3fd287a7 	.word	0x3fd287a7
 8007ba0:	8b60c8b3 	.word	0x8b60c8b3
 8007ba4:	3fc68a28 	.word	0x3fc68a28
 8007ba8:	509f79fb 	.word	0x509f79fb
 8007bac:	3fd34413 	.word	0x3fd34413
 8007bb0:	7ff00000 	.word	0x7ff00000
 8007bb4:	08009a09 	.word	0x08009a09
 8007bb8:	08009a00 	.word	0x08009a00
 8007bbc:	0800998d 	.word	0x0800998d
 8007bc0:	3ff80000 	.word	0x3ff80000
 8007bc4:	08009a40 	.word	0x08009a40
 8007bc8:	08009a18 	.word	0x08009a18
 8007bcc:	2301      	movs	r3, #1
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	4698      	mov	r8, r3
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	e7da      	b.n	8007b8c <_dtoa_r+0x2f4>
 8007bd6:	3101      	adds	r1, #1
 8007bd8:	6071      	str	r1, [r6, #4]
 8007bda:	0052      	lsls	r2, r2, #1
 8007bdc:	e787      	b.n	8007aee <_dtoa_r+0x256>
 8007bde:	07f1      	lsls	r1, r6, #31
 8007be0:	d508      	bpl.n	8007bf4 <_dtoa_r+0x35c>
 8007be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bea:	f7f8 fc75 	bl	80004d8 <__aeabi_dmul>
 8007bee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007bf2:	3501      	adds	r5, #1
 8007bf4:	1076      	asrs	r6, r6, #1
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	d1f0      	bne.n	8007bde <_dtoa_r+0x346>
 8007bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c04:	f7f8 fd92 	bl	800072c <__aeabi_ddiv>
 8007c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c0c:	e01b      	b.n	8007c46 <_dtoa_r+0x3ae>
 8007c0e:	2502      	movs	r5, #2
 8007c10:	e7a0      	b.n	8007b54 <_dtoa_r+0x2bc>
 8007c12:	f000 80a4 	beq.w	8007d5e <_dtoa_r+0x4c6>
 8007c16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c1a:	f1ca 0600 	rsb	r6, sl, #0
 8007c1e:	4ba0      	ldr	r3, [pc, #640]	; (8007ea0 <_dtoa_r+0x608>)
 8007c20:	f006 020f 	and.w	r2, r6, #15
 8007c24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f7f8 fc54 	bl	80004d8 <__aeabi_dmul>
 8007c30:	2502      	movs	r5, #2
 8007c32:	2300      	movs	r3, #0
 8007c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c38:	4f9a      	ldr	r7, [pc, #616]	; (8007ea4 <_dtoa_r+0x60c>)
 8007c3a:	1136      	asrs	r6, r6, #4
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	f040 8083 	bne.w	8007d48 <_dtoa_r+0x4b0>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e0      	bne.n	8007c08 <_dtoa_r+0x370>
 8007c46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 808a 	beq.w	8007d62 <_dtoa_r+0x4ca>
 8007c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c52:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b92      	ldr	r3, [pc, #584]	; (8007ea8 <_dtoa_r+0x610>)
 8007c5e:	f7f8 fead 	bl	80009bc <__aeabi_dcmplt>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d07d      	beq.n	8007d62 <_dtoa_r+0x4ca>
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	d07a      	beq.n	8007d62 <_dtoa_r+0x4ca>
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dd36      	ble.n	8007ce0 <_dtoa_r+0x448>
 8007c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c76:	2200      	movs	r2, #0
 8007c78:	4b8c      	ldr	r3, [pc, #560]	; (8007eac <_dtoa_r+0x614>)
 8007c7a:	f7f8 fc2d 	bl	80004d8 <__aeabi_dmul>
 8007c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c82:	9e04      	ldr	r6, [sp, #16]
 8007c84:	f10a 37ff 	add.w	r7, sl, #4294967295
 8007c88:	3501      	adds	r5, #1
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	f7f8 fbba 	bl	8000404 <__aeabi_i2d>
 8007c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c94:	f7f8 fc20 	bl	80004d8 <__aeabi_dmul>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4b85      	ldr	r3, [pc, #532]	; (8007eb0 <_dtoa_r+0x618>)
 8007c9c:	f7f8 fa66 	bl	800016c <__adddf3>
 8007ca0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8007ca4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007ca8:	950b      	str	r5, [sp, #44]	; 0x2c
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	d15c      	bne.n	8007d68 <_dtoa_r+0x4d0>
 8007cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b7f      	ldr	r3, [pc, #508]	; (8007eb4 <_dtoa_r+0x61c>)
 8007cb6:	f7f8 fa57 	bl	8000168 <__aeabi_dsub>
 8007cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cbc:	462b      	mov	r3, r5
 8007cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc2:	f7f8 fe99 	bl	80009f8 <__aeabi_dcmpgt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8281 	bne.w	80081ce <_dtoa_r+0x936>
 8007ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	f040 8275 	bne.w	80081ca <_dtoa_r+0x932>
 8007ce0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ce8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f2c0 814b 	blt.w	8007f86 <_dtoa_r+0x6ee>
 8007cf0:	f1ba 0f0e 	cmp.w	sl, #14
 8007cf4:	f300 8147 	bgt.w	8007f86 <_dtoa_r+0x6ee>
 8007cf8:	4b69      	ldr	r3, [pc, #420]	; (8007ea0 <_dtoa_r+0x608>)
 8007cfa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f280 80d7 	bge.w	8007ebc <_dtoa_r+0x624>
 8007d0e:	f1b8 0f00 	cmp.w	r8, #0
 8007d12:	f300 80d3 	bgt.w	8007ebc <_dtoa_r+0x624>
 8007d16:	f040 8257 	bne.w	80081c8 <_dtoa_r+0x930>
 8007d1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4b64      	ldr	r3, [pc, #400]	; (8007eb4 <_dtoa_r+0x61c>)
 8007d22:	f7f8 fbd9 	bl	80004d8 <__aeabi_dmul>
 8007d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d2a:	f7f8 fe5b 	bl	80009e4 <__aeabi_dcmpge>
 8007d2e:	4646      	mov	r6, r8
 8007d30:	4647      	mov	r7, r8
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f040 822d 	bne.w	8008192 <_dtoa_r+0x8fa>
 8007d38:	9b06      	ldr	r3, [sp, #24]
 8007d3a:	9a06      	ldr	r2, [sp, #24]
 8007d3c:	1c5d      	adds	r5, r3, #1
 8007d3e:	2331      	movs	r3, #49	; 0x31
 8007d40:	f10a 0a01 	add.w	sl, sl, #1
 8007d44:	7013      	strb	r3, [r2, #0]
 8007d46:	e228      	b.n	800819a <_dtoa_r+0x902>
 8007d48:	07f2      	lsls	r2, r6, #31
 8007d4a:	d505      	bpl.n	8007d58 <_dtoa_r+0x4c0>
 8007d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d50:	f7f8 fbc2 	bl	80004d8 <__aeabi_dmul>
 8007d54:	2301      	movs	r3, #1
 8007d56:	3501      	adds	r5, #1
 8007d58:	1076      	asrs	r6, r6, #1
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	e76e      	b.n	8007c3c <_dtoa_r+0x3a4>
 8007d5e:	2502      	movs	r5, #2
 8007d60:	e771      	b.n	8007c46 <_dtoa_r+0x3ae>
 8007d62:	4657      	mov	r7, sl
 8007d64:	4646      	mov	r6, r8
 8007d66:	e790      	b.n	8007c8a <_dtoa_r+0x3f2>
 8007d68:	4b4d      	ldr	r3, [pc, #308]	; (8007ea0 <_dtoa_r+0x608>)
 8007d6a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d6e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d048      	beq.n	8007e0a <_dtoa_r+0x572>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	494e      	ldr	r1, [pc, #312]	; (8007eb8 <_dtoa_r+0x620>)
 8007d80:	f7f8 fcd4 	bl	800072c <__aeabi_ddiv>
 8007d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007d88:	f7f8 f9ee 	bl	8000168 <__aeabi_dsub>
 8007d8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d90:	9d06      	ldr	r5, [sp, #24]
 8007d92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d96:	f7f8 fe4f 	bl	8000a38 <__aeabi_d2iz>
 8007d9a:	9011      	str	r0, [sp, #68]	; 0x44
 8007d9c:	f7f8 fb32 	bl	8000404 <__aeabi_i2d>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da8:	f7f8 f9de 	bl	8000168 <__aeabi_dsub>
 8007dac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db2:	3330      	adds	r3, #48	; 0x30
 8007db4:	f805 3b01 	strb.w	r3, [r5], #1
 8007db8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dbc:	f7f8 fdfe 	bl	80009bc <__aeabi_dcmplt>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d163      	bne.n	8007e8c <_dtoa_r+0x5f4>
 8007dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc8:	2000      	movs	r0, #0
 8007dca:	4937      	ldr	r1, [pc, #220]	; (8007ea8 <_dtoa_r+0x610>)
 8007dcc:	f7f8 f9cc 	bl	8000168 <__aeabi_dsub>
 8007dd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007dd4:	f7f8 fdf2 	bl	80009bc <__aeabi_dcmplt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	f040 80b5 	bne.w	8007f48 <_dtoa_r+0x6b0>
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	1aeb      	subs	r3, r5, r3
 8007de2:	429e      	cmp	r6, r3
 8007de4:	f77f af7c 	ble.w	8007ce0 <_dtoa_r+0x448>
 8007de8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dec:	2200      	movs	r2, #0
 8007dee:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <_dtoa_r+0x614>)
 8007df0:	f7f8 fb72 	bl	80004d8 <__aeabi_dmul>
 8007df4:	2200      	movs	r2, #0
 8007df6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfe:	4b2b      	ldr	r3, [pc, #172]	; (8007eac <_dtoa_r+0x614>)
 8007e00:	f7f8 fb6a 	bl	80004d8 <__aeabi_dmul>
 8007e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e08:	e7c3      	b.n	8007d92 <_dtoa_r+0x4fa>
 8007e0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e0e:	f7f8 fb63 	bl	80004d8 <__aeabi_dmul>
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007e18:	199d      	adds	r5, r3, r6
 8007e1a:	461e      	mov	r6, r3
 8007e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e20:	f7f8 fe0a 	bl	8000a38 <__aeabi_d2iz>
 8007e24:	9011      	str	r0, [sp, #68]	; 0x44
 8007e26:	f7f8 faed 	bl	8000404 <__aeabi_i2d>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e32:	f7f8 f999 	bl	8000168 <__aeabi_dsub>
 8007e36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3c:	3330      	adds	r3, #48	; 0x30
 8007e3e:	f806 3b01 	strb.w	r3, [r6], #1
 8007e42:	42ae      	cmp	r6, r5
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	d124      	bne.n	8007e94 <_dtoa_r+0x5fc>
 8007e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4e:	4b1a      	ldr	r3, [pc, #104]	; (8007eb8 <_dtoa_r+0x620>)
 8007e50:	f7f8 f98c 	bl	800016c <__adddf3>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e5c:	f7f8 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d171      	bne.n	8007f48 <_dtoa_r+0x6b0>
 8007e64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e68:	2000      	movs	r0, #0
 8007e6a:	4913      	ldr	r1, [pc, #76]	; (8007eb8 <_dtoa_r+0x620>)
 8007e6c:	f7f8 f97c 	bl	8000168 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e78:	f7f8 fda0 	bl	80009bc <__aeabi_dcmplt>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	f43f af2f 	beq.w	8007ce0 <_dtoa_r+0x448>
 8007e82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e86:	1e6a      	subs	r2, r5, #1
 8007e88:	2b30      	cmp	r3, #48	; 0x30
 8007e8a:	d001      	beq.n	8007e90 <_dtoa_r+0x5f8>
 8007e8c:	46ba      	mov	sl, r7
 8007e8e:	e04a      	b.n	8007f26 <_dtoa_r+0x68e>
 8007e90:	4615      	mov	r5, r2
 8007e92:	e7f6      	b.n	8007e82 <_dtoa_r+0x5ea>
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <_dtoa_r+0x614>)
 8007e96:	f7f8 fb1f 	bl	80004d8 <__aeabi_dmul>
 8007e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e9e:	e7bd      	b.n	8007e1c <_dtoa_r+0x584>
 8007ea0:	08009a40 	.word	0x08009a40
 8007ea4:	08009a18 	.word	0x08009a18
 8007ea8:	3ff00000 	.word	0x3ff00000
 8007eac:	40240000 	.word	0x40240000
 8007eb0:	401c0000 	.word	0x401c0000
 8007eb4:	40140000 	.word	0x40140000
 8007eb8:	3fe00000 	.word	0x3fe00000
 8007ebc:	9d06      	ldr	r5, [sp, #24]
 8007ebe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	4639      	mov	r1, r7
 8007eca:	f7f8 fc2f 	bl	800072c <__aeabi_ddiv>
 8007ece:	f7f8 fdb3 	bl	8000a38 <__aeabi_d2iz>
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	f7f8 fa96 	bl	8000404 <__aeabi_i2d>
 8007ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007edc:	f7f8 fafc 	bl	80004d8 <__aeabi_dmul>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 f93e 	bl	8000168 <__aeabi_dsub>
 8007eec:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007ef0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ef4:	9e06      	ldr	r6, [sp, #24]
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	1bae      	subs	r6, r5, r6
 8007efa:	45b0      	cmp	r8, r6
 8007efc:	460b      	mov	r3, r1
 8007efe:	d135      	bne.n	8007f6c <_dtoa_r+0x6d4>
 8007f00:	f7f8 f934 	bl	800016c <__adddf3>
 8007f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f08:	4606      	mov	r6, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	f7f8 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8007f10:	b9c8      	cbnz	r0, 8007f46 <_dtoa_r+0x6ae>
 8007f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f16:	4630      	mov	r0, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	f7f8 fd45 	bl	80009a8 <__aeabi_dcmpeq>
 8007f1e:	b110      	cbz	r0, 8007f26 <_dtoa_r+0x68e>
 8007f20:	f019 0f01 	tst.w	r9, #1
 8007f24:	d10f      	bne.n	8007f46 <_dtoa_r+0x6ae>
 8007f26:	4659      	mov	r1, fp
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fe08 	bl	8008b3e <_Bfree>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007f32:	702b      	strb	r3, [r5, #0]
 8007f34:	f10a 0301 	add.w	r3, sl, #1
 8007f38:	6013      	str	r3, [r2, #0]
 8007f3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f43f acf3 	beq.w	8007928 <_dtoa_r+0x90>
 8007f42:	601d      	str	r5, [r3, #0]
 8007f44:	e4f0      	b.n	8007928 <_dtoa_r+0x90>
 8007f46:	4657      	mov	r7, sl
 8007f48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f4c:	1e6b      	subs	r3, r5, #1
 8007f4e:	2a39      	cmp	r2, #57	; 0x39
 8007f50:	d106      	bne.n	8007f60 <_dtoa_r+0x6c8>
 8007f52:	9a06      	ldr	r2, [sp, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d107      	bne.n	8007f68 <_dtoa_r+0x6d0>
 8007f58:	2330      	movs	r3, #48	; 0x30
 8007f5a:	7013      	strb	r3, [r2, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	3701      	adds	r7, #1
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	3201      	adds	r2, #1
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	e791      	b.n	8007e8c <_dtoa_r+0x5f4>
 8007f68:	461d      	mov	r5, r3
 8007f6a:	e7ed      	b.n	8007f48 <_dtoa_r+0x6b0>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4b99      	ldr	r3, [pc, #612]	; (80081d4 <_dtoa_r+0x93c>)
 8007f70:	f7f8 fab2 	bl	80004d8 <__aeabi_dmul>
 8007f74:	2200      	movs	r2, #0
 8007f76:	2300      	movs	r3, #0
 8007f78:	4606      	mov	r6, r0
 8007f7a:	460f      	mov	r7, r1
 8007f7c:	f7f8 fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8007f80:	2800      	cmp	r0, #0
 8007f82:	d09e      	beq.n	8007ec2 <_dtoa_r+0x62a>
 8007f84:	e7cf      	b.n	8007f26 <_dtoa_r+0x68e>
 8007f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	f000 8088 	beq.w	800809e <_dtoa_r+0x806>
 8007f8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f90:	2a01      	cmp	r2, #1
 8007f92:	dc6d      	bgt.n	8008070 <_dtoa_r+0x7d8>
 8007f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	d066      	beq.n	8008068 <_dtoa_r+0x7d0>
 8007f9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f9e:	464d      	mov	r5, r9
 8007fa0:	9e08      	ldr	r6, [sp, #32]
 8007fa2:	9a07      	ldr	r2, [sp, #28]
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	441a      	add	r2, r3
 8007fa8:	4620      	mov	r0, r4
 8007faa:	4499      	add	r9, r3
 8007fac:	9207      	str	r2, [sp, #28]
 8007fae:	f000 fea4 	bl	8008cfa <__i2b>
 8007fb2:	4607      	mov	r7, r0
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	dd0b      	ble.n	8007fd0 <_dtoa_r+0x738>
 8007fb8:	9b07      	ldr	r3, [sp, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	dd08      	ble.n	8007fd0 <_dtoa_r+0x738>
 8007fbe:	42ab      	cmp	r3, r5
 8007fc0:	bfa8      	it	ge
 8007fc2:	462b      	movge	r3, r5
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	eba9 0903 	sub.w	r9, r9, r3
 8007fca:	1aed      	subs	r5, r5, r3
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	9b08      	ldr	r3, [sp, #32]
 8007fd2:	b1eb      	cbz	r3, 8008010 <_dtoa_r+0x778>
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d065      	beq.n	80080a6 <_dtoa_r+0x80e>
 8007fda:	b18e      	cbz	r6, 8008000 <_dtoa_r+0x768>
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4632      	mov	r2, r6
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 ff29 	bl	8008e38 <__pow5mult>
 8007fe6:	465a      	mov	r2, fp
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4607      	mov	r7, r0
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fe8d 	bl	8008d0c <__multiply>
 8007ff2:	4659      	mov	r1, fp
 8007ff4:	900a      	str	r0, [sp, #40]	; 0x28
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fda1 	bl	8008b3e <_Bfree>
 8007ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ffe:	469b      	mov	fp, r3
 8008000:	9b08      	ldr	r3, [sp, #32]
 8008002:	1b9a      	subs	r2, r3, r6
 8008004:	d004      	beq.n	8008010 <_dtoa_r+0x778>
 8008006:	4659      	mov	r1, fp
 8008008:	4620      	mov	r0, r4
 800800a:	f000 ff15 	bl	8008e38 <__pow5mult>
 800800e:	4683      	mov	fp, r0
 8008010:	2101      	movs	r1, #1
 8008012:	4620      	mov	r0, r4
 8008014:	f000 fe71 	bl	8008cfa <__i2b>
 8008018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800801a:	4606      	mov	r6, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 81c6 	beq.w	80083ae <_dtoa_r+0xb16>
 8008022:	461a      	mov	r2, r3
 8008024:	4601      	mov	r1, r0
 8008026:	4620      	mov	r0, r4
 8008028:	f000 ff06 	bl	8008e38 <__pow5mult>
 800802c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800802e:	4606      	mov	r6, r0
 8008030:	2b01      	cmp	r3, #1
 8008032:	dc3e      	bgt.n	80080b2 <_dtoa_r+0x81a>
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d137      	bne.n	80080aa <_dtoa_r+0x812>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008040:	2b00      	cmp	r3, #0
 8008042:	d134      	bne.n	80080ae <_dtoa_r+0x816>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800804a:	0d1b      	lsrs	r3, r3, #20
 800804c:	051b      	lsls	r3, r3, #20
 800804e:	b12b      	cbz	r3, 800805c <_dtoa_r+0x7c4>
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	f109 0901 	add.w	r9, r9, #1
 8008056:	3301      	adds	r3, #1
 8008058:	9307      	str	r3, [sp, #28]
 800805a:	2301      	movs	r3, #1
 800805c:	9308      	str	r3, [sp, #32]
 800805e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008060:	2b00      	cmp	r3, #0
 8008062:	d128      	bne.n	80080b6 <_dtoa_r+0x81e>
 8008064:	2001      	movs	r0, #1
 8008066:	e02e      	b.n	80080c6 <_dtoa_r+0x82e>
 8008068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800806a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800806e:	e796      	b.n	8007f9e <_dtoa_r+0x706>
 8008070:	9b08      	ldr	r3, [sp, #32]
 8008072:	f108 36ff 	add.w	r6, r8, #4294967295
 8008076:	42b3      	cmp	r3, r6
 8008078:	bfb7      	itett	lt
 800807a:	9b08      	ldrlt	r3, [sp, #32]
 800807c:	1b9e      	subge	r6, r3, r6
 800807e:	1af2      	sublt	r2, r6, r3
 8008080:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008082:	bfbf      	itttt	lt
 8008084:	9608      	strlt	r6, [sp, #32]
 8008086:	189b      	addlt	r3, r3, r2
 8008088:	930c      	strlt	r3, [sp, #48]	; 0x30
 800808a:	2600      	movlt	r6, #0
 800808c:	f1b8 0f00 	cmp.w	r8, #0
 8008090:	bfb9      	ittee	lt
 8008092:	eba9 0508 	sublt.w	r5, r9, r8
 8008096:	2300      	movlt	r3, #0
 8008098:	464d      	movge	r5, r9
 800809a:	4643      	movge	r3, r8
 800809c:	e781      	b.n	8007fa2 <_dtoa_r+0x70a>
 800809e:	9e08      	ldr	r6, [sp, #32]
 80080a0:	464d      	mov	r5, r9
 80080a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80080a4:	e786      	b.n	8007fb4 <_dtoa_r+0x71c>
 80080a6:	9a08      	ldr	r2, [sp, #32]
 80080a8:	e7ad      	b.n	8008006 <_dtoa_r+0x76e>
 80080aa:	2300      	movs	r3, #0
 80080ac:	e7d6      	b.n	800805c <_dtoa_r+0x7c4>
 80080ae:	9b02      	ldr	r3, [sp, #8]
 80080b0:	e7d4      	b.n	800805c <_dtoa_r+0x7c4>
 80080b2:	2300      	movs	r3, #0
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	6933      	ldr	r3, [r6, #16]
 80080b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080bc:	6918      	ldr	r0, [r3, #16]
 80080be:	f000 fdce 	bl	8008c5e <__hi0bits>
 80080c2:	f1c0 0020 	rsb	r0, r0, #32
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	4418      	add	r0, r3
 80080ca:	f010 001f 	ands.w	r0, r0, #31
 80080ce:	d047      	beq.n	8008160 <_dtoa_r+0x8c8>
 80080d0:	f1c0 0320 	rsb	r3, r0, #32
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	dd3b      	ble.n	8008150 <_dtoa_r+0x8b8>
 80080d8:	9b07      	ldr	r3, [sp, #28]
 80080da:	f1c0 001c 	rsb	r0, r0, #28
 80080de:	4481      	add	r9, r0
 80080e0:	4405      	add	r5, r0
 80080e2:	4403      	add	r3, r0
 80080e4:	9307      	str	r3, [sp, #28]
 80080e6:	f1b9 0f00 	cmp.w	r9, #0
 80080ea:	dd05      	ble.n	80080f8 <_dtoa_r+0x860>
 80080ec:	4659      	mov	r1, fp
 80080ee:	464a      	mov	r2, r9
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 feef 	bl	8008ed4 <__lshift>
 80080f6:	4683      	mov	fp, r0
 80080f8:	9b07      	ldr	r3, [sp, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dd05      	ble.n	800810a <_dtoa_r+0x872>
 80080fe:	4631      	mov	r1, r6
 8008100:	461a      	mov	r2, r3
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fee6 	bl	8008ed4 <__lshift>
 8008108:	4606      	mov	r6, r0
 800810a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800810c:	b353      	cbz	r3, 8008164 <_dtoa_r+0x8cc>
 800810e:	4631      	mov	r1, r6
 8008110:	4658      	mov	r0, fp
 8008112:	f000 ff33 	bl	8008f7c <__mcmp>
 8008116:	2800      	cmp	r0, #0
 8008118:	da24      	bge.n	8008164 <_dtoa_r+0x8cc>
 800811a:	2300      	movs	r3, #0
 800811c:	4659      	mov	r1, fp
 800811e:	220a      	movs	r2, #10
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fd23 	bl	8008b6c <__multadd>
 8008126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008128:	f10a 3aff 	add.w	sl, sl, #4294967295
 800812c:	4683      	mov	fp, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8144 	beq.w	80083bc <_dtoa_r+0xb24>
 8008134:	2300      	movs	r3, #0
 8008136:	4639      	mov	r1, r7
 8008138:	220a      	movs	r2, #10
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fd16 	bl	8008b6c <__multadd>
 8008140:	9b04      	ldr	r3, [sp, #16]
 8008142:	4607      	mov	r7, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	dc4d      	bgt.n	80081e4 <_dtoa_r+0x94c>
 8008148:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800814a:	2b02      	cmp	r3, #2
 800814c:	dd4a      	ble.n	80081e4 <_dtoa_r+0x94c>
 800814e:	e011      	b.n	8008174 <_dtoa_r+0x8dc>
 8008150:	d0c9      	beq.n	80080e6 <_dtoa_r+0x84e>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	331c      	adds	r3, #28
 8008156:	441a      	add	r2, r3
 8008158:	4499      	add	r9, r3
 800815a:	441d      	add	r5, r3
 800815c:	4613      	mov	r3, r2
 800815e:	e7c1      	b.n	80080e4 <_dtoa_r+0x84c>
 8008160:	4603      	mov	r3, r0
 8008162:	e7f6      	b.n	8008152 <_dtoa_r+0x8ba>
 8008164:	f1b8 0f00 	cmp.w	r8, #0
 8008168:	dc36      	bgt.n	80081d8 <_dtoa_r+0x940>
 800816a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800816c:	2b02      	cmp	r3, #2
 800816e:	dd33      	ble.n	80081d8 <_dtoa_r+0x940>
 8008170:	f8cd 8010 	str.w	r8, [sp, #16]
 8008174:	9b04      	ldr	r3, [sp, #16]
 8008176:	b963      	cbnz	r3, 8008192 <_dtoa_r+0x8fa>
 8008178:	4631      	mov	r1, r6
 800817a:	2205      	movs	r2, #5
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fcf5 	bl	8008b6c <__multadd>
 8008182:	4601      	mov	r1, r0
 8008184:	4606      	mov	r6, r0
 8008186:	4658      	mov	r0, fp
 8008188:	f000 fef8 	bl	8008f7c <__mcmp>
 800818c:	2800      	cmp	r0, #0
 800818e:	f73f add3 	bgt.w	8007d38 <_dtoa_r+0x4a0>
 8008192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008194:	9d06      	ldr	r5, [sp, #24]
 8008196:	ea6f 0a03 	mvn.w	sl, r3
 800819a:	f04f 0900 	mov.w	r9, #0
 800819e:	4631      	mov	r1, r6
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fccc 	bl	8008b3e <_Bfree>
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	f43f aebd 	beq.w	8007f26 <_dtoa_r+0x68e>
 80081ac:	f1b9 0f00 	cmp.w	r9, #0
 80081b0:	d005      	beq.n	80081be <_dtoa_r+0x926>
 80081b2:	45b9      	cmp	r9, r7
 80081b4:	d003      	beq.n	80081be <_dtoa_r+0x926>
 80081b6:	4649      	mov	r1, r9
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fcc0 	bl	8008b3e <_Bfree>
 80081be:	4639      	mov	r1, r7
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fcbc 	bl	8008b3e <_Bfree>
 80081c6:	e6ae      	b.n	8007f26 <_dtoa_r+0x68e>
 80081c8:	2600      	movs	r6, #0
 80081ca:	4637      	mov	r7, r6
 80081cc:	e7e1      	b.n	8008192 <_dtoa_r+0x8fa>
 80081ce:	46ba      	mov	sl, r7
 80081d0:	4637      	mov	r7, r6
 80081d2:	e5b1      	b.n	8007d38 <_dtoa_r+0x4a0>
 80081d4:	40240000 	.word	0x40240000
 80081d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081da:	f8cd 8010 	str.w	r8, [sp, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80f3 	beq.w	80083ca <_dtoa_r+0xb32>
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	dd05      	ble.n	80081f4 <_dtoa_r+0x95c>
 80081e8:	4639      	mov	r1, r7
 80081ea:	462a      	mov	r2, r5
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fe71 	bl	8008ed4 <__lshift>
 80081f2:	4607      	mov	r7, r0
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d04c      	beq.n	8008294 <_dtoa_r+0x9fc>
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fc6a 	bl	8008ad6 <_Balloc>
 8008202:	4605      	mov	r5, r0
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	f107 010c 	add.w	r1, r7, #12
 800820a:	3202      	adds	r2, #2
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	300c      	adds	r0, #12
 8008210:	f000 fc56 	bl	8008ac0 <memcpy>
 8008214:	2201      	movs	r2, #1
 8008216:	4629      	mov	r1, r5
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fe5b 	bl	8008ed4 <__lshift>
 800821e:	46b9      	mov	r9, r7
 8008220:	4607      	mov	r7, r0
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	9b02      	ldr	r3, [sp, #8]
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	9308      	str	r3, [sp, #32]
 800822e:	4631      	mov	r1, r6
 8008230:	4658      	mov	r0, fp
 8008232:	f7ff faa3 	bl	800777c <quorem>
 8008236:	4649      	mov	r1, r9
 8008238:	4605      	mov	r5, r0
 800823a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800823e:	4658      	mov	r0, fp
 8008240:	f000 fe9c 	bl	8008f7c <__mcmp>
 8008244:	463a      	mov	r2, r7
 8008246:	9002      	str	r0, [sp, #8]
 8008248:	4631      	mov	r1, r6
 800824a:	4620      	mov	r0, r4
 800824c:	f000 feb0 	bl	8008fb0 <__mdiff>
 8008250:	68c3      	ldr	r3, [r0, #12]
 8008252:	4602      	mov	r2, r0
 8008254:	bb03      	cbnz	r3, 8008298 <_dtoa_r+0xa00>
 8008256:	4601      	mov	r1, r0
 8008258:	9009      	str	r0, [sp, #36]	; 0x24
 800825a:	4658      	mov	r0, fp
 800825c:	f000 fe8e 	bl	8008f7c <__mcmp>
 8008260:	4603      	mov	r3, r0
 8008262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008264:	4611      	mov	r1, r2
 8008266:	4620      	mov	r0, r4
 8008268:	9309      	str	r3, [sp, #36]	; 0x24
 800826a:	f000 fc68 	bl	8008b3e <_Bfree>
 800826e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008270:	b9a3      	cbnz	r3, 800829c <_dtoa_r+0xa04>
 8008272:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008274:	b992      	cbnz	r2, 800829c <_dtoa_r+0xa04>
 8008276:	9a08      	ldr	r2, [sp, #32]
 8008278:	b982      	cbnz	r2, 800829c <_dtoa_r+0xa04>
 800827a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800827e:	d029      	beq.n	80082d4 <_dtoa_r+0xa3c>
 8008280:	9b02      	ldr	r3, [sp, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	dd01      	ble.n	800828a <_dtoa_r+0x9f2>
 8008286:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	1c5d      	adds	r5, r3, #1
 800828e:	f883 8000 	strb.w	r8, [r3]
 8008292:	e784      	b.n	800819e <_dtoa_r+0x906>
 8008294:	4638      	mov	r0, r7
 8008296:	e7c2      	b.n	800821e <_dtoa_r+0x986>
 8008298:	2301      	movs	r3, #1
 800829a:	e7e3      	b.n	8008264 <_dtoa_r+0x9cc>
 800829c:	9a02      	ldr	r2, [sp, #8]
 800829e:	2a00      	cmp	r2, #0
 80082a0:	db04      	blt.n	80082ac <_dtoa_r+0xa14>
 80082a2:	d123      	bne.n	80082ec <_dtoa_r+0xa54>
 80082a4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80082a6:	bb0a      	cbnz	r2, 80082ec <_dtoa_r+0xa54>
 80082a8:	9a08      	ldr	r2, [sp, #32]
 80082aa:	b9fa      	cbnz	r2, 80082ec <_dtoa_r+0xa54>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	ddec      	ble.n	800828a <_dtoa_r+0x9f2>
 80082b0:	4659      	mov	r1, fp
 80082b2:	2201      	movs	r2, #1
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fe0d 	bl	8008ed4 <__lshift>
 80082ba:	4631      	mov	r1, r6
 80082bc:	4683      	mov	fp, r0
 80082be:	f000 fe5d 	bl	8008f7c <__mcmp>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	dc03      	bgt.n	80082ce <_dtoa_r+0xa36>
 80082c6:	d1e0      	bne.n	800828a <_dtoa_r+0x9f2>
 80082c8:	f018 0f01 	tst.w	r8, #1
 80082cc:	d0dd      	beq.n	800828a <_dtoa_r+0x9f2>
 80082ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082d2:	d1d8      	bne.n	8008286 <_dtoa_r+0x9ee>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	9a07      	ldr	r2, [sp, #28]
 80082d8:	1c5d      	adds	r5, r3, #1
 80082da:	2339      	movs	r3, #57	; 0x39
 80082dc:	7013      	strb	r3, [r2, #0]
 80082de:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082e2:	1e6a      	subs	r2, r5, #1
 80082e4:	2b39      	cmp	r3, #57	; 0x39
 80082e6:	d04d      	beq.n	8008384 <_dtoa_r+0xaec>
 80082e8:	3301      	adds	r3, #1
 80082ea:	e052      	b.n	8008392 <_dtoa_r+0xafa>
 80082ec:	9a07      	ldr	r2, [sp, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f102 0501 	add.w	r5, r2, #1
 80082f4:	dd06      	ble.n	8008304 <_dtoa_r+0xa6c>
 80082f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80082fa:	d0eb      	beq.n	80082d4 <_dtoa_r+0xa3c>
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	9b07      	ldr	r3, [sp, #28]
 8008302:	e7c4      	b.n	800828e <_dtoa_r+0x9f6>
 8008304:	9b06      	ldr	r3, [sp, #24]
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	1aeb      	subs	r3, r5, r3
 800830a:	4293      	cmp	r3, r2
 800830c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008310:	d021      	beq.n	8008356 <_dtoa_r+0xabe>
 8008312:	4659      	mov	r1, fp
 8008314:	2300      	movs	r3, #0
 8008316:	220a      	movs	r2, #10
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fc27 	bl	8008b6c <__multadd>
 800831e:	45b9      	cmp	r9, r7
 8008320:	4683      	mov	fp, r0
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	f04f 020a 	mov.w	r2, #10
 800832a:	4649      	mov	r1, r9
 800832c:	4620      	mov	r0, r4
 800832e:	d105      	bne.n	800833c <_dtoa_r+0xaa4>
 8008330:	f000 fc1c 	bl	8008b6c <__multadd>
 8008334:	4681      	mov	r9, r0
 8008336:	4607      	mov	r7, r0
 8008338:	9507      	str	r5, [sp, #28]
 800833a:	e778      	b.n	800822e <_dtoa_r+0x996>
 800833c:	f000 fc16 	bl	8008b6c <__multadd>
 8008340:	4639      	mov	r1, r7
 8008342:	4681      	mov	r9, r0
 8008344:	2300      	movs	r3, #0
 8008346:	220a      	movs	r2, #10
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fc0f 	bl	8008b6c <__multadd>
 800834e:	4607      	mov	r7, r0
 8008350:	e7f2      	b.n	8008338 <_dtoa_r+0xaa0>
 8008352:	f04f 0900 	mov.w	r9, #0
 8008356:	4659      	mov	r1, fp
 8008358:	2201      	movs	r2, #1
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fdba 	bl	8008ed4 <__lshift>
 8008360:	4631      	mov	r1, r6
 8008362:	4683      	mov	fp, r0
 8008364:	f000 fe0a 	bl	8008f7c <__mcmp>
 8008368:	2800      	cmp	r0, #0
 800836a:	dcb8      	bgt.n	80082de <_dtoa_r+0xa46>
 800836c:	d102      	bne.n	8008374 <_dtoa_r+0xadc>
 800836e:	f018 0f01 	tst.w	r8, #1
 8008372:	d1b4      	bne.n	80082de <_dtoa_r+0xa46>
 8008374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008378:	1e6a      	subs	r2, r5, #1
 800837a:	2b30      	cmp	r3, #48	; 0x30
 800837c:	f47f af0f 	bne.w	800819e <_dtoa_r+0x906>
 8008380:	4615      	mov	r5, r2
 8008382:	e7f7      	b.n	8008374 <_dtoa_r+0xadc>
 8008384:	9b06      	ldr	r3, [sp, #24]
 8008386:	4293      	cmp	r3, r2
 8008388:	d105      	bne.n	8008396 <_dtoa_r+0xafe>
 800838a:	2331      	movs	r3, #49	; 0x31
 800838c:	9a06      	ldr	r2, [sp, #24]
 800838e:	f10a 0a01 	add.w	sl, sl, #1
 8008392:	7013      	strb	r3, [r2, #0]
 8008394:	e703      	b.n	800819e <_dtoa_r+0x906>
 8008396:	4615      	mov	r5, r2
 8008398:	e7a1      	b.n	80082de <_dtoa_r+0xa46>
 800839a:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <_dtoa_r+0xb60>)
 800839c:	f7ff bae1 	b.w	8007962 <_dtoa_r+0xca>
 80083a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f47f aabb 	bne.w	800791e <_dtoa_r+0x86>
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <_dtoa_r+0xb64>)
 80083aa:	f7ff bada 	b.w	8007962 <_dtoa_r+0xca>
 80083ae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	f77f ae3f 	ble.w	8008034 <_dtoa_r+0x79c>
 80083b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	e653      	b.n	8008064 <_dtoa_r+0x7cc>
 80083bc:	9b04      	ldr	r3, [sp, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dc03      	bgt.n	80083ca <_dtoa_r+0xb32>
 80083c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	f73f aed5 	bgt.w	8008174 <_dtoa_r+0x8dc>
 80083ca:	9d06      	ldr	r5, [sp, #24]
 80083cc:	4631      	mov	r1, r6
 80083ce:	4658      	mov	r0, fp
 80083d0:	f7ff f9d4 	bl	800777c <quorem>
 80083d4:	9b06      	ldr	r3, [sp, #24]
 80083d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80083da:	f805 8b01 	strb.w	r8, [r5], #1
 80083de:	9a04      	ldr	r2, [sp, #16]
 80083e0:	1aeb      	subs	r3, r5, r3
 80083e2:	429a      	cmp	r2, r3
 80083e4:	ddb5      	ble.n	8008352 <_dtoa_r+0xaba>
 80083e6:	4659      	mov	r1, fp
 80083e8:	2300      	movs	r3, #0
 80083ea:	220a      	movs	r2, #10
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fbbd 	bl	8008b6c <__multadd>
 80083f2:	4683      	mov	fp, r0
 80083f4:	e7ea      	b.n	80083cc <_dtoa_r+0xb34>
 80083f6:	bf00      	nop
 80083f8:	0800998c 	.word	0x0800998c
 80083fc:	08009a00 	.word	0x08009a00

08008400 <rshift>:
 8008400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008402:	6906      	ldr	r6, [r0, #16]
 8008404:	114b      	asrs	r3, r1, #5
 8008406:	429e      	cmp	r6, r3
 8008408:	f100 0414 	add.w	r4, r0, #20
 800840c:	dd31      	ble.n	8008472 <rshift+0x72>
 800840e:	f011 011f 	ands.w	r1, r1, #31
 8008412:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008416:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800841a:	d108      	bne.n	800842e <rshift+0x2e>
 800841c:	4621      	mov	r1, r4
 800841e:	42b2      	cmp	r2, r6
 8008420:	460b      	mov	r3, r1
 8008422:	d211      	bcs.n	8008448 <rshift+0x48>
 8008424:	f852 3b04 	ldr.w	r3, [r2], #4
 8008428:	f841 3b04 	str.w	r3, [r1], #4
 800842c:	e7f7      	b.n	800841e <rshift+0x1e>
 800842e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008432:	4623      	mov	r3, r4
 8008434:	f1c1 0c20 	rsb	ip, r1, #32
 8008438:	40cd      	lsrs	r5, r1
 800843a:	3204      	adds	r2, #4
 800843c:	42b2      	cmp	r2, r6
 800843e:	4617      	mov	r7, r2
 8008440:	d30d      	bcc.n	800845e <rshift+0x5e>
 8008442:	601d      	str	r5, [r3, #0]
 8008444:	b105      	cbz	r5, 8008448 <rshift+0x48>
 8008446:	3304      	adds	r3, #4
 8008448:	42a3      	cmp	r3, r4
 800844a:	eba3 0204 	sub.w	r2, r3, r4
 800844e:	bf08      	it	eq
 8008450:	2300      	moveq	r3, #0
 8008452:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008456:	6102      	str	r2, [r0, #16]
 8008458:	bf08      	it	eq
 800845a:	6143      	streq	r3, [r0, #20]
 800845c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800845e:	683f      	ldr	r7, [r7, #0]
 8008460:	fa07 f70c 	lsl.w	r7, r7, ip
 8008464:	433d      	orrs	r5, r7
 8008466:	f843 5b04 	str.w	r5, [r3], #4
 800846a:	f852 5b04 	ldr.w	r5, [r2], #4
 800846e:	40cd      	lsrs	r5, r1
 8008470:	e7e4      	b.n	800843c <rshift+0x3c>
 8008472:	4623      	mov	r3, r4
 8008474:	e7e8      	b.n	8008448 <rshift+0x48>

08008476 <__hexdig_fun>:
 8008476:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800847a:	2b09      	cmp	r3, #9
 800847c:	d802      	bhi.n	8008484 <__hexdig_fun+0xe>
 800847e:	3820      	subs	r0, #32
 8008480:	b2c0      	uxtb	r0, r0
 8008482:	4770      	bx	lr
 8008484:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008488:	2b05      	cmp	r3, #5
 800848a:	d801      	bhi.n	8008490 <__hexdig_fun+0x1a>
 800848c:	3847      	subs	r0, #71	; 0x47
 800848e:	e7f7      	b.n	8008480 <__hexdig_fun+0xa>
 8008490:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008494:	2b05      	cmp	r3, #5
 8008496:	d801      	bhi.n	800849c <__hexdig_fun+0x26>
 8008498:	3827      	subs	r0, #39	; 0x27
 800849a:	e7f1      	b.n	8008480 <__hexdig_fun+0xa>
 800849c:	2000      	movs	r0, #0
 800849e:	4770      	bx	lr

080084a0 <__gethex>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	b08b      	sub	sp, #44	; 0x2c
 80084a6:	9002      	str	r0, [sp, #8]
 80084a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80084aa:	468a      	mov	sl, r1
 80084ac:	4690      	mov	r8, r2
 80084ae:	9306      	str	r3, [sp, #24]
 80084b0:	f000 face 	bl	8008a50 <__localeconv_l>
 80084b4:	6803      	ldr	r3, [r0, #0]
 80084b6:	f04f 0b00 	mov.w	fp, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	f7f7 fe47 	bl	8000150 <strlen>
 80084c2:	9b03      	ldr	r3, [sp, #12]
 80084c4:	9001      	str	r0, [sp, #4]
 80084c6:	4403      	add	r3, r0
 80084c8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	f8da 3000 	ldr.w	r3, [sl]
 80084d2:	3302      	adds	r3, #2
 80084d4:	461f      	mov	r7, r3
 80084d6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80084da:	2830      	cmp	r0, #48	; 0x30
 80084dc:	d06c      	beq.n	80085b8 <__gethex+0x118>
 80084de:	f7ff ffca 	bl	8008476 <__hexdig_fun>
 80084e2:	4604      	mov	r4, r0
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d16a      	bne.n	80085be <__gethex+0x11e>
 80084e8:	9a01      	ldr	r2, [sp, #4]
 80084ea:	9903      	ldr	r1, [sp, #12]
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7fe faff 	bl	8006af0 <strncmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d166      	bne.n	80085c4 <__gethex+0x124>
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	5cf8      	ldrb	r0, [r7, r3]
 80084fa:	18fe      	adds	r6, r7, r3
 80084fc:	f7ff ffbb 	bl	8008476 <__hexdig_fun>
 8008500:	2800      	cmp	r0, #0
 8008502:	d062      	beq.n	80085ca <__gethex+0x12a>
 8008504:	4633      	mov	r3, r6
 8008506:	7818      	ldrb	r0, [r3, #0]
 8008508:	461f      	mov	r7, r3
 800850a:	2830      	cmp	r0, #48	; 0x30
 800850c:	f103 0301 	add.w	r3, r3, #1
 8008510:	d0f9      	beq.n	8008506 <__gethex+0x66>
 8008512:	f7ff ffb0 	bl	8008476 <__hexdig_fun>
 8008516:	fab0 f580 	clz	r5, r0
 800851a:	4634      	mov	r4, r6
 800851c:	f04f 0b01 	mov.w	fp, #1
 8008520:	096d      	lsrs	r5, r5, #5
 8008522:	463a      	mov	r2, r7
 8008524:	4616      	mov	r6, r2
 8008526:	7830      	ldrb	r0, [r6, #0]
 8008528:	3201      	adds	r2, #1
 800852a:	f7ff ffa4 	bl	8008476 <__hexdig_fun>
 800852e:	2800      	cmp	r0, #0
 8008530:	d1f8      	bne.n	8008524 <__gethex+0x84>
 8008532:	9a01      	ldr	r2, [sp, #4]
 8008534:	9903      	ldr	r1, [sp, #12]
 8008536:	4630      	mov	r0, r6
 8008538:	f7fe fada 	bl	8006af0 <strncmp>
 800853c:	b950      	cbnz	r0, 8008554 <__gethex+0xb4>
 800853e:	b954      	cbnz	r4, 8008556 <__gethex+0xb6>
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	18f4      	adds	r4, r6, r3
 8008544:	4622      	mov	r2, r4
 8008546:	4616      	mov	r6, r2
 8008548:	7830      	ldrb	r0, [r6, #0]
 800854a:	3201      	adds	r2, #1
 800854c:	f7ff ff93 	bl	8008476 <__hexdig_fun>
 8008550:	2800      	cmp	r0, #0
 8008552:	d1f8      	bne.n	8008546 <__gethex+0xa6>
 8008554:	b10c      	cbz	r4, 800855a <__gethex+0xba>
 8008556:	1ba4      	subs	r4, r4, r6
 8008558:	00a4      	lsls	r4, r4, #2
 800855a:	7833      	ldrb	r3, [r6, #0]
 800855c:	2b50      	cmp	r3, #80	; 0x50
 800855e:	d001      	beq.n	8008564 <__gethex+0xc4>
 8008560:	2b70      	cmp	r3, #112	; 0x70
 8008562:	d140      	bne.n	80085e6 <__gethex+0x146>
 8008564:	7873      	ldrb	r3, [r6, #1]
 8008566:	2b2b      	cmp	r3, #43	; 0x2b
 8008568:	d031      	beq.n	80085ce <__gethex+0x12e>
 800856a:	2b2d      	cmp	r3, #45	; 0x2d
 800856c:	d033      	beq.n	80085d6 <__gethex+0x136>
 800856e:	f04f 0900 	mov.w	r9, #0
 8008572:	1c71      	adds	r1, r6, #1
 8008574:	7808      	ldrb	r0, [r1, #0]
 8008576:	f7ff ff7e 	bl	8008476 <__hexdig_fun>
 800857a:	1e43      	subs	r3, r0, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b18      	cmp	r3, #24
 8008580:	d831      	bhi.n	80085e6 <__gethex+0x146>
 8008582:	f1a0 0210 	sub.w	r2, r0, #16
 8008586:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800858a:	f7ff ff74 	bl	8008476 <__hexdig_fun>
 800858e:	1e43      	subs	r3, r0, #1
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b18      	cmp	r3, #24
 8008594:	d922      	bls.n	80085dc <__gethex+0x13c>
 8008596:	f1b9 0f00 	cmp.w	r9, #0
 800859a:	d000      	beq.n	800859e <__gethex+0xfe>
 800859c:	4252      	negs	r2, r2
 800859e:	4414      	add	r4, r2
 80085a0:	f8ca 1000 	str.w	r1, [sl]
 80085a4:	b30d      	cbz	r5, 80085ea <__gethex+0x14a>
 80085a6:	f1bb 0f00 	cmp.w	fp, #0
 80085aa:	bf0c      	ite	eq
 80085ac:	2706      	moveq	r7, #6
 80085ae:	2700      	movne	r7, #0
 80085b0:	4638      	mov	r0, r7
 80085b2:	b00b      	add	sp, #44	; 0x2c
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	f10b 0b01 	add.w	fp, fp, #1
 80085bc:	e78a      	b.n	80084d4 <__gethex+0x34>
 80085be:	2500      	movs	r5, #0
 80085c0:	462c      	mov	r4, r5
 80085c2:	e7ae      	b.n	8008522 <__gethex+0x82>
 80085c4:	463e      	mov	r6, r7
 80085c6:	2501      	movs	r5, #1
 80085c8:	e7c7      	b.n	800855a <__gethex+0xba>
 80085ca:	4604      	mov	r4, r0
 80085cc:	e7fb      	b.n	80085c6 <__gethex+0x126>
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	1cb1      	adds	r1, r6, #2
 80085d4:	e7ce      	b.n	8008574 <__gethex+0xd4>
 80085d6:	f04f 0901 	mov.w	r9, #1
 80085da:	e7fa      	b.n	80085d2 <__gethex+0x132>
 80085dc:	230a      	movs	r3, #10
 80085de:	fb03 0202 	mla	r2, r3, r2, r0
 80085e2:	3a10      	subs	r2, #16
 80085e4:	e7cf      	b.n	8008586 <__gethex+0xe6>
 80085e6:	4631      	mov	r1, r6
 80085e8:	e7da      	b.n	80085a0 <__gethex+0x100>
 80085ea:	4629      	mov	r1, r5
 80085ec:	1bf3      	subs	r3, r6, r7
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b07      	cmp	r3, #7
 80085f2:	dc49      	bgt.n	8008688 <__gethex+0x1e8>
 80085f4:	9802      	ldr	r0, [sp, #8]
 80085f6:	f000 fa6e 	bl	8008ad6 <_Balloc>
 80085fa:	f04f 0b00 	mov.w	fp, #0
 80085fe:	4605      	mov	r5, r0
 8008600:	46da      	mov	sl, fp
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	f100 0914 	add.w	r9, r0, #20
 8008608:	f1c3 0301 	rsb	r3, r3, #1
 800860c:	f8cd 9010 	str.w	r9, [sp, #16]
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	42b7      	cmp	r7, r6
 8008614:	d33b      	bcc.n	800868e <__gethex+0x1ee>
 8008616:	9804      	ldr	r0, [sp, #16]
 8008618:	f840 ab04 	str.w	sl, [r0], #4
 800861c:	eba0 0009 	sub.w	r0, r0, r9
 8008620:	1080      	asrs	r0, r0, #2
 8008622:	6128      	str	r0, [r5, #16]
 8008624:	0147      	lsls	r7, r0, #5
 8008626:	4650      	mov	r0, sl
 8008628:	f000 fb19 	bl	8008c5e <__hi0bits>
 800862c:	f8d8 6000 	ldr.w	r6, [r8]
 8008630:	1a3f      	subs	r7, r7, r0
 8008632:	42b7      	cmp	r7, r6
 8008634:	dd64      	ble.n	8008700 <__gethex+0x260>
 8008636:	1bbf      	subs	r7, r7, r6
 8008638:	4639      	mov	r1, r7
 800863a:	4628      	mov	r0, r5
 800863c:	f000 fe23 	bl	8009286 <__any_on>
 8008640:	4682      	mov	sl, r0
 8008642:	b178      	cbz	r0, 8008664 <__gethex+0x1c4>
 8008644:	f04f 0a01 	mov.w	sl, #1
 8008648:	1e7b      	subs	r3, r7, #1
 800864a:	1159      	asrs	r1, r3, #5
 800864c:	f003 021f 	and.w	r2, r3, #31
 8008650:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008654:	fa0a f202 	lsl.w	r2, sl, r2
 8008658:	420a      	tst	r2, r1
 800865a:	d003      	beq.n	8008664 <__gethex+0x1c4>
 800865c:	4553      	cmp	r3, sl
 800865e:	dc46      	bgt.n	80086ee <__gethex+0x24e>
 8008660:	f04f 0a02 	mov.w	sl, #2
 8008664:	4639      	mov	r1, r7
 8008666:	4628      	mov	r0, r5
 8008668:	f7ff feca 	bl	8008400 <rshift>
 800866c:	443c      	add	r4, r7
 800866e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008672:	42a3      	cmp	r3, r4
 8008674:	da52      	bge.n	800871c <__gethex+0x27c>
 8008676:	4629      	mov	r1, r5
 8008678:	9802      	ldr	r0, [sp, #8]
 800867a:	f000 fa60 	bl	8008b3e <_Bfree>
 800867e:	2300      	movs	r3, #0
 8008680:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008682:	27a3      	movs	r7, #163	; 0xa3
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	e793      	b.n	80085b0 <__gethex+0x110>
 8008688:	3101      	adds	r1, #1
 800868a:	105b      	asrs	r3, r3, #1
 800868c:	e7b0      	b.n	80085f0 <__gethex+0x150>
 800868e:	1e73      	subs	r3, r6, #1
 8008690:	9305      	str	r3, [sp, #20]
 8008692:	9a07      	ldr	r2, [sp, #28]
 8008694:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008698:	4293      	cmp	r3, r2
 800869a:	d018      	beq.n	80086ce <__gethex+0x22e>
 800869c:	f1bb 0f20 	cmp.w	fp, #32
 80086a0:	d107      	bne.n	80086b2 <__gethex+0x212>
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	f8c3 a000 	str.w	sl, [r3]
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	46d3      	mov	fp, sl
 80086ae:	3304      	adds	r3, #4
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80086b6:	f7ff fede 	bl	8008476 <__hexdig_fun>
 80086ba:	f000 000f 	and.w	r0, r0, #15
 80086be:	fa00 f00b 	lsl.w	r0, r0, fp
 80086c2:	ea4a 0a00 	orr.w	sl, sl, r0
 80086c6:	f10b 0b04 	add.w	fp, fp, #4
 80086ca:	9b05      	ldr	r3, [sp, #20]
 80086cc:	e00d      	b.n	80086ea <__gethex+0x24a>
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	9a08      	ldr	r2, [sp, #32]
 80086d2:	4413      	add	r3, r2
 80086d4:	42bb      	cmp	r3, r7
 80086d6:	d3e1      	bcc.n	800869c <__gethex+0x1fc>
 80086d8:	4618      	mov	r0, r3
 80086da:	9a01      	ldr	r2, [sp, #4]
 80086dc:	9903      	ldr	r1, [sp, #12]
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	f7fe fa06 	bl	8006af0 <strncmp>
 80086e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d1d8      	bne.n	800869c <__gethex+0x1fc>
 80086ea:	461e      	mov	r6, r3
 80086ec:	e791      	b.n	8008612 <__gethex+0x172>
 80086ee:	1eb9      	subs	r1, r7, #2
 80086f0:	4628      	mov	r0, r5
 80086f2:	f000 fdc8 	bl	8009286 <__any_on>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d0b2      	beq.n	8008660 <__gethex+0x1c0>
 80086fa:	f04f 0a03 	mov.w	sl, #3
 80086fe:	e7b1      	b.n	8008664 <__gethex+0x1c4>
 8008700:	da09      	bge.n	8008716 <__gethex+0x276>
 8008702:	1bf7      	subs	r7, r6, r7
 8008704:	4629      	mov	r1, r5
 8008706:	463a      	mov	r2, r7
 8008708:	9802      	ldr	r0, [sp, #8]
 800870a:	f000 fbe3 	bl	8008ed4 <__lshift>
 800870e:	4605      	mov	r5, r0
 8008710:	1be4      	subs	r4, r4, r7
 8008712:	f100 0914 	add.w	r9, r0, #20
 8008716:	f04f 0a00 	mov.w	sl, #0
 800871a:	e7a8      	b.n	800866e <__gethex+0x1ce>
 800871c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008720:	42a0      	cmp	r0, r4
 8008722:	dd6b      	ble.n	80087fc <__gethex+0x35c>
 8008724:	1b04      	subs	r4, r0, r4
 8008726:	42a6      	cmp	r6, r4
 8008728:	dc2e      	bgt.n	8008788 <__gethex+0x2e8>
 800872a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800872e:	2b02      	cmp	r3, #2
 8008730:	d022      	beq.n	8008778 <__gethex+0x2d8>
 8008732:	2b03      	cmp	r3, #3
 8008734:	d024      	beq.n	8008780 <__gethex+0x2e0>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d115      	bne.n	8008766 <__gethex+0x2c6>
 800873a:	42a6      	cmp	r6, r4
 800873c:	d113      	bne.n	8008766 <__gethex+0x2c6>
 800873e:	2e01      	cmp	r6, #1
 8008740:	dc0b      	bgt.n	800875a <__gethex+0x2ba>
 8008742:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008746:	9a06      	ldr	r2, [sp, #24]
 8008748:	2762      	movs	r7, #98	; 0x62
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	2301      	movs	r3, #1
 800874e:	612b      	str	r3, [r5, #16]
 8008750:	f8c9 3000 	str.w	r3, [r9]
 8008754:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008756:	601d      	str	r5, [r3, #0]
 8008758:	e72a      	b.n	80085b0 <__gethex+0x110>
 800875a:	1e71      	subs	r1, r6, #1
 800875c:	4628      	mov	r0, r5
 800875e:	f000 fd92 	bl	8009286 <__any_on>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1ed      	bne.n	8008742 <__gethex+0x2a2>
 8008766:	4629      	mov	r1, r5
 8008768:	9802      	ldr	r0, [sp, #8]
 800876a:	f000 f9e8 	bl	8008b3e <_Bfree>
 800876e:	2300      	movs	r3, #0
 8008770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008772:	2750      	movs	r7, #80	; 0x50
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e71b      	b.n	80085b0 <__gethex+0x110>
 8008778:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0e1      	beq.n	8008742 <__gethex+0x2a2>
 800877e:	e7f2      	b.n	8008766 <__gethex+0x2c6>
 8008780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1dd      	bne.n	8008742 <__gethex+0x2a2>
 8008786:	e7ee      	b.n	8008766 <__gethex+0x2c6>
 8008788:	1e67      	subs	r7, r4, #1
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d132      	bne.n	80087f6 <__gethex+0x356>
 8008790:	b127      	cbz	r7, 800879c <__gethex+0x2fc>
 8008792:	4639      	mov	r1, r7
 8008794:	4628      	mov	r0, r5
 8008796:	f000 fd76 	bl	8009286 <__any_on>
 800879a:	4682      	mov	sl, r0
 800879c:	2301      	movs	r3, #1
 800879e:	117a      	asrs	r2, r7, #5
 80087a0:	f007 071f 	and.w	r7, r7, #31
 80087a4:	fa03 f707 	lsl.w	r7, r3, r7
 80087a8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80087ac:	4621      	mov	r1, r4
 80087ae:	421f      	tst	r7, r3
 80087b0:	f04f 0702 	mov.w	r7, #2
 80087b4:	4628      	mov	r0, r5
 80087b6:	bf18      	it	ne
 80087b8:	f04a 0a02 	orrne.w	sl, sl, #2
 80087bc:	1b36      	subs	r6, r6, r4
 80087be:	f7ff fe1f 	bl	8008400 <rshift>
 80087c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80087c6:	f1ba 0f00 	cmp.w	sl, #0
 80087ca:	d048      	beq.n	800885e <__gethex+0x3be>
 80087cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d015      	beq.n	8008800 <__gethex+0x360>
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d017      	beq.n	8008808 <__gethex+0x368>
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d109      	bne.n	80087f0 <__gethex+0x350>
 80087dc:	f01a 0f02 	tst.w	sl, #2
 80087e0:	d006      	beq.n	80087f0 <__gethex+0x350>
 80087e2:	f8d9 3000 	ldr.w	r3, [r9]
 80087e6:	ea4a 0a03 	orr.w	sl, sl, r3
 80087ea:	f01a 0f01 	tst.w	sl, #1
 80087ee:	d10e      	bne.n	800880e <__gethex+0x36e>
 80087f0:	f047 0710 	orr.w	r7, r7, #16
 80087f4:	e033      	b.n	800885e <__gethex+0x3be>
 80087f6:	f04f 0a01 	mov.w	sl, #1
 80087fa:	e7cf      	b.n	800879c <__gethex+0x2fc>
 80087fc:	2701      	movs	r7, #1
 80087fe:	e7e2      	b.n	80087c6 <__gethex+0x326>
 8008800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008802:	f1c3 0301 	rsb	r3, r3, #1
 8008806:	9315      	str	r3, [sp, #84]	; 0x54
 8008808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <__gethex+0x350>
 800880e:	f04f 0c00 	mov.w	ip, #0
 8008812:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008816:	f105 0314 	add.w	r3, r5, #20
 800881a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800881e:	eb03 010a 	add.w	r1, r3, sl
 8008822:	4618      	mov	r0, r3
 8008824:	f853 2b04 	ldr.w	r2, [r3], #4
 8008828:	f1b2 3fff 	cmp.w	r2, #4294967295
 800882c:	d01c      	beq.n	8008868 <__gethex+0x3c8>
 800882e:	3201      	adds	r2, #1
 8008830:	6002      	str	r2, [r0, #0]
 8008832:	2f02      	cmp	r7, #2
 8008834:	f105 0314 	add.w	r3, r5, #20
 8008838:	d138      	bne.n	80088ac <__gethex+0x40c>
 800883a:	f8d8 2000 	ldr.w	r2, [r8]
 800883e:	3a01      	subs	r2, #1
 8008840:	42b2      	cmp	r2, r6
 8008842:	d10a      	bne.n	800885a <__gethex+0x3ba>
 8008844:	2201      	movs	r2, #1
 8008846:	1171      	asrs	r1, r6, #5
 8008848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800884c:	f006 061f 	and.w	r6, r6, #31
 8008850:	fa02 f606 	lsl.w	r6, r2, r6
 8008854:	421e      	tst	r6, r3
 8008856:	bf18      	it	ne
 8008858:	4617      	movne	r7, r2
 800885a:	f047 0720 	orr.w	r7, r7, #32
 800885e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008860:	601d      	str	r5, [r3, #0]
 8008862:	9b06      	ldr	r3, [sp, #24]
 8008864:	601c      	str	r4, [r3, #0]
 8008866:	e6a3      	b.n	80085b0 <__gethex+0x110>
 8008868:	4299      	cmp	r1, r3
 800886a:	f843 cc04 	str.w	ip, [r3, #-4]
 800886e:	d8d8      	bhi.n	8008822 <__gethex+0x382>
 8008870:	68ab      	ldr	r3, [r5, #8]
 8008872:	4599      	cmp	r9, r3
 8008874:	db12      	blt.n	800889c <__gethex+0x3fc>
 8008876:	6869      	ldr	r1, [r5, #4]
 8008878:	9802      	ldr	r0, [sp, #8]
 800887a:	3101      	adds	r1, #1
 800887c:	f000 f92b 	bl	8008ad6 <_Balloc>
 8008880:	4683      	mov	fp, r0
 8008882:	692a      	ldr	r2, [r5, #16]
 8008884:	f105 010c 	add.w	r1, r5, #12
 8008888:	3202      	adds	r2, #2
 800888a:	0092      	lsls	r2, r2, #2
 800888c:	300c      	adds	r0, #12
 800888e:	f000 f917 	bl	8008ac0 <memcpy>
 8008892:	4629      	mov	r1, r5
 8008894:	9802      	ldr	r0, [sp, #8]
 8008896:	f000 f952 	bl	8008b3e <_Bfree>
 800889a:	465d      	mov	r5, fp
 800889c:	692b      	ldr	r3, [r5, #16]
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	612a      	str	r2, [r5, #16]
 80088a2:	2201      	movs	r2, #1
 80088a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80088a8:	615a      	str	r2, [r3, #20]
 80088aa:	e7c2      	b.n	8008832 <__gethex+0x392>
 80088ac:	692a      	ldr	r2, [r5, #16]
 80088ae:	454a      	cmp	r2, r9
 80088b0:	dd0b      	ble.n	80088ca <__gethex+0x42a>
 80088b2:	2101      	movs	r1, #1
 80088b4:	4628      	mov	r0, r5
 80088b6:	f7ff fda3 	bl	8008400 <rshift>
 80088ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088be:	3401      	adds	r4, #1
 80088c0:	42a3      	cmp	r3, r4
 80088c2:	f6ff aed8 	blt.w	8008676 <__gethex+0x1d6>
 80088c6:	2701      	movs	r7, #1
 80088c8:	e7c7      	b.n	800885a <__gethex+0x3ba>
 80088ca:	f016 061f 	ands.w	r6, r6, #31
 80088ce:	d0fa      	beq.n	80088c6 <__gethex+0x426>
 80088d0:	449a      	add	sl, r3
 80088d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80088d6:	f000 f9c2 	bl	8008c5e <__hi0bits>
 80088da:	f1c6 0620 	rsb	r6, r6, #32
 80088de:	42b0      	cmp	r0, r6
 80088e0:	dbe7      	blt.n	80088b2 <__gethex+0x412>
 80088e2:	e7f0      	b.n	80088c6 <__gethex+0x426>

080088e4 <L_shift>:
 80088e4:	f1c2 0208 	rsb	r2, r2, #8
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	f1c2 0620 	rsb	r6, r2, #32
 80088f0:	6843      	ldr	r3, [r0, #4]
 80088f2:	6804      	ldr	r4, [r0, #0]
 80088f4:	fa03 f506 	lsl.w	r5, r3, r6
 80088f8:	432c      	orrs	r4, r5
 80088fa:	40d3      	lsrs	r3, r2
 80088fc:	6004      	str	r4, [r0, #0]
 80088fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008902:	4288      	cmp	r0, r1
 8008904:	d3f4      	bcc.n	80088f0 <L_shift+0xc>
 8008906:	bd70      	pop	{r4, r5, r6, pc}

08008908 <__match>:
 8008908:	b530      	push	{r4, r5, lr}
 800890a:	6803      	ldr	r3, [r0, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008912:	b914      	cbnz	r4, 800891a <__match+0x12>
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	2001      	movs	r0, #1
 8008918:	bd30      	pop	{r4, r5, pc}
 800891a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008922:	2d19      	cmp	r5, #25
 8008924:	bf98      	it	ls
 8008926:	3220      	addls	r2, #32
 8008928:	42a2      	cmp	r2, r4
 800892a:	d0f0      	beq.n	800890e <__match+0x6>
 800892c:	2000      	movs	r0, #0
 800892e:	e7f3      	b.n	8008918 <__match+0x10>

08008930 <__hexnan>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	2500      	movs	r5, #0
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	4682      	mov	sl, r0
 800893a:	115f      	asrs	r7, r3, #5
 800893c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008940:	f013 031f 	ands.w	r3, r3, #31
 8008944:	bf18      	it	ne
 8008946:	3704      	addne	r7, #4
 8008948:	1f3e      	subs	r6, r7, #4
 800894a:	4690      	mov	r8, r2
 800894c:	46b1      	mov	r9, r6
 800894e:	4634      	mov	r4, r6
 8008950:	46ab      	mov	fp, r5
 8008952:	b087      	sub	sp, #28
 8008954:	6801      	ldr	r1, [r0, #0]
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	f847 5c04 	str.w	r5, [r7, #-4]
 800895c:	9502      	str	r5, [sp, #8]
 800895e:	784a      	ldrb	r2, [r1, #1]
 8008960:	1c4b      	adds	r3, r1, #1
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	b342      	cbz	r2, 80089b8 <__hexnan+0x88>
 8008966:	4610      	mov	r0, r2
 8008968:	9105      	str	r1, [sp, #20]
 800896a:	9204      	str	r2, [sp, #16]
 800896c:	f7ff fd83 	bl	8008476 <__hexdig_fun>
 8008970:	2800      	cmp	r0, #0
 8008972:	d143      	bne.n	80089fc <__hexnan+0xcc>
 8008974:	9a04      	ldr	r2, [sp, #16]
 8008976:	9905      	ldr	r1, [sp, #20]
 8008978:	2a20      	cmp	r2, #32
 800897a:	d818      	bhi.n	80089ae <__hexnan+0x7e>
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	459b      	cmp	fp, r3
 8008980:	dd13      	ble.n	80089aa <__hexnan+0x7a>
 8008982:	454c      	cmp	r4, r9
 8008984:	d206      	bcs.n	8008994 <__hexnan+0x64>
 8008986:	2d07      	cmp	r5, #7
 8008988:	dc04      	bgt.n	8008994 <__hexnan+0x64>
 800898a:	462a      	mov	r2, r5
 800898c:	4649      	mov	r1, r9
 800898e:	4620      	mov	r0, r4
 8008990:	f7ff ffa8 	bl	80088e4 <L_shift>
 8008994:	4544      	cmp	r4, r8
 8008996:	d944      	bls.n	8008a22 <__hexnan+0xf2>
 8008998:	2300      	movs	r3, #0
 800899a:	f1a4 0904 	sub.w	r9, r4, #4
 800899e:	f844 3c04 	str.w	r3, [r4, #-4]
 80089a2:	461d      	mov	r5, r3
 80089a4:	464c      	mov	r4, r9
 80089a6:	f8cd b008 	str.w	fp, [sp, #8]
 80089aa:	9903      	ldr	r1, [sp, #12]
 80089ac:	e7d7      	b.n	800895e <__hexnan+0x2e>
 80089ae:	2a29      	cmp	r2, #41	; 0x29
 80089b0:	d14a      	bne.n	8008a48 <__hexnan+0x118>
 80089b2:	3102      	adds	r1, #2
 80089b4:	f8ca 1000 	str.w	r1, [sl]
 80089b8:	f1bb 0f00 	cmp.w	fp, #0
 80089bc:	d044      	beq.n	8008a48 <__hexnan+0x118>
 80089be:	454c      	cmp	r4, r9
 80089c0:	d206      	bcs.n	80089d0 <__hexnan+0xa0>
 80089c2:	2d07      	cmp	r5, #7
 80089c4:	dc04      	bgt.n	80089d0 <__hexnan+0xa0>
 80089c6:	462a      	mov	r2, r5
 80089c8:	4649      	mov	r1, r9
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff ff8a 	bl	80088e4 <L_shift>
 80089d0:	4544      	cmp	r4, r8
 80089d2:	d928      	bls.n	8008a26 <__hexnan+0xf6>
 80089d4:	4643      	mov	r3, r8
 80089d6:	f854 2b04 	ldr.w	r2, [r4], #4
 80089da:	42a6      	cmp	r6, r4
 80089dc:	f843 2b04 	str.w	r2, [r3], #4
 80089e0:	d2f9      	bcs.n	80089d6 <__hexnan+0xa6>
 80089e2:	2200      	movs	r2, #0
 80089e4:	f843 2b04 	str.w	r2, [r3], #4
 80089e8:	429e      	cmp	r6, r3
 80089ea:	d2fb      	bcs.n	80089e4 <__hexnan+0xb4>
 80089ec:	6833      	ldr	r3, [r6, #0]
 80089ee:	b91b      	cbnz	r3, 80089f8 <__hexnan+0xc8>
 80089f0:	4546      	cmp	r6, r8
 80089f2:	d127      	bne.n	8008a44 <__hexnan+0x114>
 80089f4:	2301      	movs	r3, #1
 80089f6:	6033      	str	r3, [r6, #0]
 80089f8:	2005      	movs	r0, #5
 80089fa:	e026      	b.n	8008a4a <__hexnan+0x11a>
 80089fc:	3501      	adds	r5, #1
 80089fe:	2d08      	cmp	r5, #8
 8008a00:	f10b 0b01 	add.w	fp, fp, #1
 8008a04:	dd06      	ble.n	8008a14 <__hexnan+0xe4>
 8008a06:	4544      	cmp	r4, r8
 8008a08:	d9cf      	bls.n	80089aa <__hexnan+0x7a>
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2501      	movs	r5, #1
 8008a0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a12:	3c04      	subs	r4, #4
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	f000 000f 	and.w	r0, r0, #15
 8008a1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008a1e:	6020      	str	r0, [r4, #0]
 8008a20:	e7c3      	b.n	80089aa <__hexnan+0x7a>
 8008a22:	2508      	movs	r5, #8
 8008a24:	e7c1      	b.n	80089aa <__hexnan+0x7a>
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d0df      	beq.n	80089ec <__hexnan+0xbc>
 8008a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a30:	f1c3 0320 	rsb	r3, r3, #32
 8008a34:	fa22 f303 	lsr.w	r3, r2, r3
 8008a38:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008a3c:	401a      	ands	r2, r3
 8008a3e:	f847 2c04 	str.w	r2, [r7, #-4]
 8008a42:	e7d3      	b.n	80089ec <__hexnan+0xbc>
 8008a44:	3e04      	subs	r6, #4
 8008a46:	e7d1      	b.n	80089ec <__hexnan+0xbc>
 8008a48:	2004      	movs	r0, #4
 8008a4a:	b007      	add	sp, #28
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a50 <__localeconv_l>:
 8008a50:	30f0      	adds	r0, #240	; 0xf0
 8008a52:	4770      	bx	lr

08008a54 <_localeconv_r>:
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <_localeconv_r+0x14>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6a18      	ldr	r0, [r3, #32]
 8008a5a:	4b04      	ldr	r3, [pc, #16]	; (8008a6c <_localeconv_r+0x18>)
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	bf08      	it	eq
 8008a60:	4618      	moveq	r0, r3
 8008a62:	30f0      	adds	r0, #240	; 0xf0
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000018 	.word	0x20000018
 8008a6c:	2000007c 	.word	0x2000007c

08008a70 <malloc>:
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <malloc+0xc>)
 8008a72:	4601      	mov	r1, r0
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f000 bc81 	b.w	800937c <_malloc_r>
 8008a7a:	bf00      	nop
 8008a7c:	20000018 	.word	0x20000018

08008a80 <__ascii_mbtowc>:
 8008a80:	b082      	sub	sp, #8
 8008a82:	b901      	cbnz	r1, 8008a86 <__ascii_mbtowc+0x6>
 8008a84:	a901      	add	r1, sp, #4
 8008a86:	b142      	cbz	r2, 8008a9a <__ascii_mbtowc+0x1a>
 8008a88:	b14b      	cbz	r3, 8008a9e <__ascii_mbtowc+0x1e>
 8008a8a:	7813      	ldrb	r3, [r2, #0]
 8008a8c:	600b      	str	r3, [r1, #0]
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	1c10      	adds	r0, r2, #0
 8008a92:	bf18      	it	ne
 8008a94:	2001      	movne	r0, #1
 8008a96:	b002      	add	sp, #8
 8008a98:	4770      	bx	lr
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	e7fb      	b.n	8008a96 <__ascii_mbtowc+0x16>
 8008a9e:	f06f 0001 	mvn.w	r0, #1
 8008aa2:	e7f8      	b.n	8008a96 <__ascii_mbtowc+0x16>

08008aa4 <memchr>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	b2c9      	uxtb	r1, r1
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4290      	cmp	r0, r2
 8008aac:	4603      	mov	r3, r0
 8008aae:	d101      	bne.n	8008ab4 <memchr+0x10>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e003      	b.n	8008abc <memchr+0x18>
 8008ab4:	781c      	ldrb	r4, [r3, #0]
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	428c      	cmp	r4, r1
 8008aba:	d1f6      	bne.n	8008aaa <memchr+0x6>
 8008abc:	4618      	mov	r0, r3
 8008abe:	bd10      	pop	{r4, pc}

08008ac0 <memcpy>:
 8008ac0:	b510      	push	{r4, lr}
 8008ac2:	1e43      	subs	r3, r0, #1
 8008ac4:	440a      	add	r2, r1
 8008ac6:	4291      	cmp	r1, r2
 8008ac8:	d100      	bne.n	8008acc <memcpy+0xc>
 8008aca:	bd10      	pop	{r4, pc}
 8008acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ad4:	e7f7      	b.n	8008ac6 <memcpy+0x6>

08008ad6 <_Balloc>:
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ada:	4604      	mov	r4, r0
 8008adc:	460e      	mov	r6, r1
 8008ade:	b93d      	cbnz	r5, 8008af0 <_Balloc+0x1a>
 8008ae0:	2010      	movs	r0, #16
 8008ae2:	f7ff ffc5 	bl	8008a70 <malloc>
 8008ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008aec:	6005      	str	r5, [r0, #0]
 8008aee:	60c5      	str	r5, [r0, #12]
 8008af0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008af2:	68eb      	ldr	r3, [r5, #12]
 8008af4:	b183      	cbz	r3, 8008b18 <_Balloc+0x42>
 8008af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008afe:	b9b8      	cbnz	r0, 8008b30 <_Balloc+0x5a>
 8008b00:	2101      	movs	r1, #1
 8008b02:	fa01 f506 	lsl.w	r5, r1, r6
 8008b06:	1d6a      	adds	r2, r5, #5
 8008b08:	0092      	lsls	r2, r2, #2
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 fbdc 	bl	80092c8 <_calloc_r>
 8008b10:	b160      	cbz	r0, 8008b2c <_Balloc+0x56>
 8008b12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b16:	e00e      	b.n	8008b36 <_Balloc+0x60>
 8008b18:	2221      	movs	r2, #33	; 0x21
 8008b1a:	2104      	movs	r1, #4
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	f000 fbd3 	bl	80092c8 <_calloc_r>
 8008b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b24:	60e8      	str	r0, [r5, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e4      	bne.n	8008af6 <_Balloc+0x20>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	6802      	ldr	r2, [r0, #0]
 8008b32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008b36:	2300      	movs	r3, #0
 8008b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b3c:	e7f7      	b.n	8008b2e <_Balloc+0x58>

08008b3e <_Bfree>:
 8008b3e:	b570      	push	{r4, r5, r6, lr}
 8008b40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b42:	4606      	mov	r6, r0
 8008b44:	460d      	mov	r5, r1
 8008b46:	b93c      	cbnz	r4, 8008b58 <_Bfree+0x1a>
 8008b48:	2010      	movs	r0, #16
 8008b4a:	f7ff ff91 	bl	8008a70 <malloc>
 8008b4e:	6270      	str	r0, [r6, #36]	; 0x24
 8008b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b54:	6004      	str	r4, [r0, #0]
 8008b56:	60c4      	str	r4, [r0, #12]
 8008b58:	b13d      	cbz	r5, 8008b6a <_Bfree+0x2c>
 8008b5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b5c:	686a      	ldr	r2, [r5, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b64:	6029      	str	r1, [r5, #0]
 8008b66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}

08008b6c <__multadd>:
 8008b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b70:	461f      	mov	r7, r3
 8008b72:	4606      	mov	r6, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	2300      	movs	r3, #0
 8008b78:	690d      	ldr	r5, [r1, #16]
 8008b7a:	f101 0c14 	add.w	ip, r1, #20
 8008b7e:	f8dc 0000 	ldr.w	r0, [ip]
 8008b82:	3301      	adds	r3, #1
 8008b84:	b281      	uxth	r1, r0
 8008b86:	fb02 7101 	mla	r1, r2, r1, r7
 8008b8a:	0c00      	lsrs	r0, r0, #16
 8008b8c:	0c0f      	lsrs	r7, r1, #16
 8008b8e:	fb02 7000 	mla	r0, r2, r0, r7
 8008b92:	b289      	uxth	r1, r1
 8008b94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008b98:	429d      	cmp	r5, r3
 8008b9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008ba2:	dcec      	bgt.n	8008b7e <__multadd+0x12>
 8008ba4:	b1d7      	cbz	r7, 8008bdc <__multadd+0x70>
 8008ba6:	68a3      	ldr	r3, [r4, #8]
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	dc12      	bgt.n	8008bd2 <__multadd+0x66>
 8008bac:	6861      	ldr	r1, [r4, #4]
 8008bae:	4630      	mov	r0, r6
 8008bb0:	3101      	adds	r1, #1
 8008bb2:	f7ff ff90 	bl	8008ad6 <_Balloc>
 8008bb6:	4680      	mov	r8, r0
 8008bb8:	6922      	ldr	r2, [r4, #16]
 8008bba:	f104 010c 	add.w	r1, r4, #12
 8008bbe:	3202      	adds	r2, #2
 8008bc0:	0092      	lsls	r2, r2, #2
 8008bc2:	300c      	adds	r0, #12
 8008bc4:	f7ff ff7c 	bl	8008ac0 <memcpy>
 8008bc8:	4621      	mov	r1, r4
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ffb7 	bl	8008b3e <_Bfree>
 8008bd0:	4644      	mov	r4, r8
 8008bd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bd6:	3501      	adds	r5, #1
 8008bd8:	615f      	str	r7, [r3, #20]
 8008bda:	6125      	str	r5, [r4, #16]
 8008bdc:	4620      	mov	r0, r4
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008be2 <__s2b>:
 8008be2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be6:	4615      	mov	r5, r2
 8008be8:	2209      	movs	r2, #9
 8008bea:	461f      	mov	r7, r3
 8008bec:	3308      	adds	r3, #8
 8008bee:	460c      	mov	r4, r1
 8008bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	db20      	blt.n	8008c40 <__s2b+0x5e>
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f7ff ff69 	bl	8008ad6 <_Balloc>
 8008c04:	9b08      	ldr	r3, [sp, #32]
 8008c06:	2d09      	cmp	r5, #9
 8008c08:	6143      	str	r3, [r0, #20]
 8008c0a:	f04f 0301 	mov.w	r3, #1
 8008c0e:	6103      	str	r3, [r0, #16]
 8008c10:	dd19      	ble.n	8008c46 <__s2b+0x64>
 8008c12:	f104 0809 	add.w	r8, r4, #9
 8008c16:	46c1      	mov	r9, r8
 8008c18:	442c      	add	r4, r5
 8008c1a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008c1e:	4601      	mov	r1, r0
 8008c20:	3b30      	subs	r3, #48	; 0x30
 8008c22:	220a      	movs	r2, #10
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff ffa1 	bl	8008b6c <__multadd>
 8008c2a:	45a1      	cmp	r9, r4
 8008c2c:	d1f5      	bne.n	8008c1a <__s2b+0x38>
 8008c2e:	eb08 0405 	add.w	r4, r8, r5
 8008c32:	3c08      	subs	r4, #8
 8008c34:	1b2d      	subs	r5, r5, r4
 8008c36:	1963      	adds	r3, r4, r5
 8008c38:	42bb      	cmp	r3, r7
 8008c3a:	db07      	blt.n	8008c4c <__s2b+0x6a>
 8008c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c40:	0052      	lsls	r2, r2, #1
 8008c42:	3101      	adds	r1, #1
 8008c44:	e7d9      	b.n	8008bfa <__s2b+0x18>
 8008c46:	340a      	adds	r4, #10
 8008c48:	2509      	movs	r5, #9
 8008c4a:	e7f3      	b.n	8008c34 <__s2b+0x52>
 8008c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c50:	4601      	mov	r1, r0
 8008c52:	3b30      	subs	r3, #48	; 0x30
 8008c54:	220a      	movs	r2, #10
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ff88 	bl	8008b6c <__multadd>
 8008c5c:	e7eb      	b.n	8008c36 <__s2b+0x54>

08008c5e <__hi0bits>:
 8008c5e:	0c02      	lsrs	r2, r0, #16
 8008c60:	0412      	lsls	r2, r2, #16
 8008c62:	4603      	mov	r3, r0
 8008c64:	b9b2      	cbnz	r2, 8008c94 <__hi0bits+0x36>
 8008c66:	0403      	lsls	r3, r0, #16
 8008c68:	2010      	movs	r0, #16
 8008c6a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c6e:	bf04      	itt	eq
 8008c70:	021b      	lsleq	r3, r3, #8
 8008c72:	3008      	addeq	r0, #8
 8008c74:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c78:	bf04      	itt	eq
 8008c7a:	011b      	lsleq	r3, r3, #4
 8008c7c:	3004      	addeq	r0, #4
 8008c7e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c82:	bf04      	itt	eq
 8008c84:	009b      	lsleq	r3, r3, #2
 8008c86:	3002      	addeq	r0, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db06      	blt.n	8008c9a <__hi0bits+0x3c>
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	d503      	bpl.n	8008c98 <__hi0bits+0x3a>
 8008c90:	3001      	adds	r0, #1
 8008c92:	4770      	bx	lr
 8008c94:	2000      	movs	r0, #0
 8008c96:	e7e8      	b.n	8008c6a <__hi0bits+0xc>
 8008c98:	2020      	movs	r0, #32
 8008c9a:	4770      	bx	lr

08008c9c <__lo0bits>:
 8008c9c:	6803      	ldr	r3, [r0, #0]
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	f013 0207 	ands.w	r2, r3, #7
 8008ca4:	d00b      	beq.n	8008cbe <__lo0bits+0x22>
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d423      	bmi.n	8008cf2 <__lo0bits+0x56>
 8008caa:	0798      	lsls	r0, r3, #30
 8008cac:	bf49      	itett	mi
 8008cae:	085b      	lsrmi	r3, r3, #1
 8008cb0:	089b      	lsrpl	r3, r3, #2
 8008cb2:	2001      	movmi	r0, #1
 8008cb4:	600b      	strmi	r3, [r1, #0]
 8008cb6:	bf5c      	itt	pl
 8008cb8:	600b      	strpl	r3, [r1, #0]
 8008cba:	2002      	movpl	r0, #2
 8008cbc:	4770      	bx	lr
 8008cbe:	b298      	uxth	r0, r3
 8008cc0:	b9a8      	cbnz	r0, 8008cee <__lo0bits+0x52>
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cca:	bf04      	itt	eq
 8008ccc:	0a1b      	lsreq	r3, r3, #8
 8008cce:	3008      	addeq	r0, #8
 8008cd0:	071a      	lsls	r2, r3, #28
 8008cd2:	bf04      	itt	eq
 8008cd4:	091b      	lsreq	r3, r3, #4
 8008cd6:	3004      	addeq	r0, #4
 8008cd8:	079a      	lsls	r2, r3, #30
 8008cda:	bf04      	itt	eq
 8008cdc:	089b      	lsreq	r3, r3, #2
 8008cde:	3002      	addeq	r0, #2
 8008ce0:	07da      	lsls	r2, r3, #31
 8008ce2:	d402      	bmi.n	8008cea <__lo0bits+0x4e>
 8008ce4:	085b      	lsrs	r3, r3, #1
 8008ce6:	d006      	beq.n	8008cf6 <__lo0bits+0x5a>
 8008ce8:	3001      	adds	r0, #1
 8008cea:	600b      	str	r3, [r1, #0]
 8008cec:	4770      	bx	lr
 8008cee:	4610      	mov	r0, r2
 8008cf0:	e7e9      	b.n	8008cc6 <__lo0bits+0x2a>
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	4770      	bx	lr
 8008cf6:	2020      	movs	r0, #32
 8008cf8:	4770      	bx	lr

08008cfa <__i2b>:
 8008cfa:	b510      	push	{r4, lr}
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	2101      	movs	r1, #1
 8008d00:	f7ff fee9 	bl	8008ad6 <_Balloc>
 8008d04:	2201      	movs	r2, #1
 8008d06:	6144      	str	r4, [r0, #20]
 8008d08:	6102      	str	r2, [r0, #16]
 8008d0a:	bd10      	pop	{r4, pc}

08008d0c <__multiply>:
 8008d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	4614      	mov	r4, r2
 8008d12:	690a      	ldr	r2, [r1, #16]
 8008d14:	6923      	ldr	r3, [r4, #16]
 8008d16:	4688      	mov	r8, r1
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	bfbe      	ittt	lt
 8008d1c:	460b      	movlt	r3, r1
 8008d1e:	46a0      	movlt	r8, r4
 8008d20:	461c      	movlt	r4, r3
 8008d22:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d26:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d2e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d32:	eb07 0609 	add.w	r6, r7, r9
 8008d36:	42b3      	cmp	r3, r6
 8008d38:	bfb8      	it	lt
 8008d3a:	3101      	addlt	r1, #1
 8008d3c:	f7ff fecb 	bl	8008ad6 <_Balloc>
 8008d40:	f100 0514 	add.w	r5, r0, #20
 8008d44:	462b      	mov	r3, r5
 8008d46:	2200      	movs	r2, #0
 8008d48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d4c:	4573      	cmp	r3, lr
 8008d4e:	d316      	bcc.n	8008d7e <__multiply+0x72>
 8008d50:	f104 0214 	add.w	r2, r4, #20
 8008d54:	f108 0114 	add.w	r1, r8, #20
 8008d58:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d5c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d80c      	bhi.n	8008d84 <__multiply+0x78>
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	dd03      	ble.n	8008d76 <__multiply+0x6a>
 8008d6e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d05d      	beq.n	8008e32 <__multiply+0x126>
 8008d76:	6106      	str	r6, [r0, #16]
 8008d78:	b003      	add	sp, #12
 8008d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7e:	f843 2b04 	str.w	r2, [r3], #4
 8008d82:	e7e3      	b.n	8008d4c <__multiply+0x40>
 8008d84:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d88:	f1bb 0f00 	cmp.w	fp, #0
 8008d8c:	d023      	beq.n	8008dd6 <__multiply+0xca>
 8008d8e:	4689      	mov	r9, r1
 8008d90:	46ac      	mov	ip, r5
 8008d92:	f04f 0800 	mov.w	r8, #0
 8008d96:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d9a:	f8dc a000 	ldr.w	sl, [ip]
 8008d9e:	b2a3      	uxth	r3, r4
 8008da0:	fa1f fa8a 	uxth.w	sl, sl
 8008da4:	fb0b a303 	mla	r3, fp, r3, sl
 8008da8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dac:	f8dc 4000 	ldr.w	r4, [ip]
 8008db0:	4443      	add	r3, r8
 8008db2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008db6:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dba:	46e2      	mov	sl, ip
 8008dbc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dc6:	454f      	cmp	r7, r9
 8008dc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dcc:	f84a 3b04 	str.w	r3, [sl], #4
 8008dd0:	d82b      	bhi.n	8008e2a <__multiply+0x11e>
 8008dd2:	f8cc 8004 	str.w	r8, [ip, #4]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	3204      	adds	r2, #4
 8008dda:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	d020      	beq.n	8008e26 <__multiply+0x11a>
 8008de4:	4689      	mov	r9, r1
 8008de6:	46a8      	mov	r8, r5
 8008de8:	f04f 0b00 	mov.w	fp, #0
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	f8b9 c000 	ldrh.w	ip, [r9]
 8008df2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	fb0a 440c 	mla	r4, sl, ip, r4
 8008dfc:	46c4      	mov	ip, r8
 8008dfe:	445c      	add	r4, fp
 8008e00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e04:	f84c 3b04 	str.w	r3, [ip], #4
 8008e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e0c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	fb0a b303 	mla	r3, sl, r3, fp
 8008e16:	454f      	cmp	r7, r9
 8008e18:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e1c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e20:	d805      	bhi.n	8008e2e <__multiply+0x122>
 8008e22:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e26:	3504      	adds	r5, #4
 8008e28:	e79b      	b.n	8008d62 <__multiply+0x56>
 8008e2a:	46d4      	mov	ip, sl
 8008e2c:	e7b3      	b.n	8008d96 <__multiply+0x8a>
 8008e2e:	46e0      	mov	r8, ip
 8008e30:	e7dd      	b.n	8008dee <__multiply+0xe2>
 8008e32:	3e01      	subs	r6, #1
 8008e34:	e799      	b.n	8008d6a <__multiply+0x5e>
	...

08008e38 <__pow5mult>:
 8008e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e3c:	4615      	mov	r5, r2
 8008e3e:	f012 0203 	ands.w	r2, r2, #3
 8008e42:	4606      	mov	r6, r0
 8008e44:	460f      	mov	r7, r1
 8008e46:	d007      	beq.n	8008e58 <__pow5mult+0x20>
 8008e48:	4c21      	ldr	r4, [pc, #132]	; (8008ed0 <__pow5mult+0x98>)
 8008e4a:	3a01      	subs	r2, #1
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e52:	f7ff fe8b 	bl	8008b6c <__multadd>
 8008e56:	4607      	mov	r7, r0
 8008e58:	10ad      	asrs	r5, r5, #2
 8008e5a:	d035      	beq.n	8008ec8 <__pow5mult+0x90>
 8008e5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e5e:	b93c      	cbnz	r4, 8008e70 <__pow5mult+0x38>
 8008e60:	2010      	movs	r0, #16
 8008e62:	f7ff fe05 	bl	8008a70 <malloc>
 8008e66:	6270      	str	r0, [r6, #36]	; 0x24
 8008e68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e6c:	6004      	str	r4, [r0, #0]
 8008e6e:	60c4      	str	r4, [r0, #12]
 8008e70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e78:	b94c      	cbnz	r4, 8008e8e <__pow5mult+0x56>
 8008e7a:	f240 2171 	movw	r1, #625	; 0x271
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7ff ff3b 	bl	8008cfa <__i2b>
 8008e84:	2300      	movs	r3, #0
 8008e86:	4604      	mov	r4, r0
 8008e88:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e8c:	6003      	str	r3, [r0, #0]
 8008e8e:	f04f 0800 	mov.w	r8, #0
 8008e92:	07eb      	lsls	r3, r5, #31
 8008e94:	d50a      	bpl.n	8008eac <__pow5mult+0x74>
 8008e96:	4639      	mov	r1, r7
 8008e98:	4622      	mov	r2, r4
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ff36 	bl	8008d0c <__multiply>
 8008ea0:	4681      	mov	r9, r0
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff fe4a 	bl	8008b3e <_Bfree>
 8008eaa:	464f      	mov	r7, r9
 8008eac:	106d      	asrs	r5, r5, #1
 8008eae:	d00b      	beq.n	8008ec8 <__pow5mult+0x90>
 8008eb0:	6820      	ldr	r0, [r4, #0]
 8008eb2:	b938      	cbnz	r0, 8008ec4 <__pow5mult+0x8c>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff ff27 	bl	8008d0c <__multiply>
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	f8c0 8000 	str.w	r8, [r0]
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	e7e4      	b.n	8008e92 <__pow5mult+0x5a>
 8008ec8:	4638      	mov	r0, r7
 8008eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ece:	bf00      	nop
 8008ed0:	08009b08 	.word	0x08009b08

08008ed4 <__lshift>:
 8008ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	460c      	mov	r4, r1
 8008eda:	4607      	mov	r7, r0
 8008edc:	4616      	mov	r6, r2
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee4:	eb0a 0903 	add.w	r9, sl, r3
 8008ee8:	6849      	ldr	r1, [r1, #4]
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	f109 0501 	add.w	r5, r9, #1
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	db32      	blt.n	8008f5a <__lshift+0x86>
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	f7ff fdee 	bl	8008ad6 <_Balloc>
 8008efa:	2300      	movs	r3, #0
 8008efc:	4680      	mov	r8, r0
 8008efe:	461a      	mov	r2, r3
 8008f00:	f100 0114 	add.w	r1, r0, #20
 8008f04:	4553      	cmp	r3, sl
 8008f06:	db2b      	blt.n	8008f60 <__lshift+0x8c>
 8008f08:	6920      	ldr	r0, [r4, #16]
 8008f0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f0e:	f104 0314 	add.w	r3, r4, #20
 8008f12:	f016 021f 	ands.w	r2, r6, #31
 8008f16:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f1a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f1e:	d025      	beq.n	8008f6c <__lshift+0x98>
 8008f20:	2000      	movs	r0, #0
 8008f22:	f1c2 0e20 	rsb	lr, r2, #32
 8008f26:	468a      	mov	sl, r1
 8008f28:	681e      	ldr	r6, [r3, #0]
 8008f2a:	4096      	lsls	r6, r2
 8008f2c:	4330      	orrs	r0, r6
 8008f2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f32:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f36:	459c      	cmp	ip, r3
 8008f38:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f3c:	d814      	bhi.n	8008f68 <__lshift+0x94>
 8008f3e:	6048      	str	r0, [r1, #4]
 8008f40:	b108      	cbz	r0, 8008f46 <__lshift+0x72>
 8008f42:	f109 0502 	add.w	r5, r9, #2
 8008f46:	3d01      	subs	r5, #1
 8008f48:	4638      	mov	r0, r7
 8008f4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	f7ff fdf5 	bl	8008b3e <_Bfree>
 8008f54:	4640      	mov	r0, r8
 8008f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5a:	3101      	adds	r1, #1
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	e7c7      	b.n	8008ef0 <__lshift+0x1c>
 8008f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f64:	3301      	adds	r3, #1
 8008f66:	e7cd      	b.n	8008f04 <__lshift+0x30>
 8008f68:	4651      	mov	r1, sl
 8008f6a:	e7dc      	b.n	8008f26 <__lshift+0x52>
 8008f6c:	3904      	subs	r1, #4
 8008f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f72:	459c      	cmp	ip, r3
 8008f74:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f78:	d8f9      	bhi.n	8008f6e <__lshift+0x9a>
 8008f7a:	e7e4      	b.n	8008f46 <__lshift+0x72>

08008f7c <__mcmp>:
 8008f7c:	6903      	ldr	r3, [r0, #16]
 8008f7e:	690a      	ldr	r2, [r1, #16]
 8008f80:	b530      	push	{r4, r5, lr}
 8008f82:	1a9b      	subs	r3, r3, r2
 8008f84:	d10c      	bne.n	8008fa0 <__mcmp+0x24>
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	3014      	adds	r0, #20
 8008f8a:	3114      	adds	r1, #20
 8008f8c:	1884      	adds	r4, r0, r2
 8008f8e:	4411      	add	r1, r2
 8008f90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f98:	4295      	cmp	r5, r2
 8008f9a:	d003      	beq.n	8008fa4 <__mcmp+0x28>
 8008f9c:	d305      	bcc.n	8008faa <__mcmp+0x2e>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd30      	pop	{r4, r5, pc}
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d3f3      	bcc.n	8008f90 <__mcmp+0x14>
 8008fa8:	e7fa      	b.n	8008fa0 <__mcmp+0x24>
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295
 8008fae:	e7f7      	b.n	8008fa0 <__mcmp+0x24>

08008fb0 <__mdiff>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	4611      	mov	r1, r2
 8008fba:	4628      	mov	r0, r5
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	f7ff ffdd 	bl	8008f7c <__mcmp>
 8008fc2:	1e06      	subs	r6, r0, #0
 8008fc4:	d108      	bne.n	8008fd8 <__mdiff+0x28>
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4638      	mov	r0, r7
 8008fca:	f7ff fd84 	bl	8008ad6 <_Balloc>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	bfa4      	itt	ge
 8008fda:	4623      	movge	r3, r4
 8008fdc:	462c      	movge	r4, r5
 8008fde:	4638      	mov	r0, r7
 8008fe0:	6861      	ldr	r1, [r4, #4]
 8008fe2:	bfa6      	itte	ge
 8008fe4:	461d      	movge	r5, r3
 8008fe6:	2600      	movge	r6, #0
 8008fe8:	2601      	movlt	r6, #1
 8008fea:	f7ff fd74 	bl	8008ad6 <_Balloc>
 8008fee:	f04f 0e00 	mov.w	lr, #0
 8008ff2:	60c6      	str	r6, [r0, #12]
 8008ff4:	692b      	ldr	r3, [r5, #16]
 8008ff6:	6926      	ldr	r6, [r4, #16]
 8008ff8:	f104 0214 	add.w	r2, r4, #20
 8008ffc:	f105 0914 	add.w	r9, r5, #20
 8009000:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009004:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009008:	f100 0114 	add.w	r1, r0, #20
 800900c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009010:	f859 5b04 	ldr.w	r5, [r9], #4
 8009014:	fa1f f38a 	uxth.w	r3, sl
 8009018:	4473      	add	r3, lr
 800901a:	b2ac      	uxth	r4, r5
 800901c:	1b1b      	subs	r3, r3, r4
 800901e:	0c2c      	lsrs	r4, r5, #16
 8009020:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009024:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009028:	b29b      	uxth	r3, r3
 800902a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800902e:	45c8      	cmp	r8, r9
 8009030:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009034:	4694      	mov	ip, r2
 8009036:	f841 4b04 	str.w	r4, [r1], #4
 800903a:	d8e7      	bhi.n	800900c <__mdiff+0x5c>
 800903c:	45bc      	cmp	ip, r7
 800903e:	d304      	bcc.n	800904a <__mdiff+0x9a>
 8009040:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009044:	b183      	cbz	r3, 8009068 <__mdiff+0xb8>
 8009046:	6106      	str	r6, [r0, #16]
 8009048:	e7c4      	b.n	8008fd4 <__mdiff+0x24>
 800904a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800904e:	b2a2      	uxth	r2, r4
 8009050:	4472      	add	r2, lr
 8009052:	1413      	asrs	r3, r2, #16
 8009054:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009058:	b292      	uxth	r2, r2
 800905a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800905e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009062:	f841 2b04 	str.w	r2, [r1], #4
 8009066:	e7e9      	b.n	800903c <__mdiff+0x8c>
 8009068:	3e01      	subs	r6, #1
 800906a:	e7e9      	b.n	8009040 <__mdiff+0x90>

0800906c <__ulp>:
 800906c:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <__ulp+0x44>)
 800906e:	400b      	ands	r3, r1
 8009070:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd02      	ble.n	800907e <__ulp+0x12>
 8009078:	2000      	movs	r0, #0
 800907a:	4619      	mov	r1, r3
 800907c:	4770      	bx	lr
 800907e:	425b      	negs	r3, r3
 8009080:	151b      	asrs	r3, r3, #20
 8009082:	2b13      	cmp	r3, #19
 8009084:	f04f 0000 	mov.w	r0, #0
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	dc04      	bgt.n	8009098 <__ulp+0x2c>
 800908e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009092:	fa42 f103 	asr.w	r1, r2, r3
 8009096:	4770      	bx	lr
 8009098:	2201      	movs	r2, #1
 800909a:	3b14      	subs	r3, #20
 800909c:	2b1e      	cmp	r3, #30
 800909e:	bfce      	itee	gt
 80090a0:	4613      	movgt	r3, r2
 80090a2:	f1c3 031f 	rsble	r3, r3, #31
 80090a6:	fa02 f303 	lslle.w	r3, r2, r3
 80090aa:	4618      	mov	r0, r3
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	7ff00000 	.word	0x7ff00000

080090b4 <__b2d>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	6907      	ldr	r7, [r0, #16]
 80090ba:	f100 0914 	add.w	r9, r0, #20
 80090be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80090c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80090c6:	f1a7 0804 	sub.w	r8, r7, #4
 80090ca:	4630      	mov	r0, r6
 80090cc:	f7ff fdc7 	bl	8008c5e <__hi0bits>
 80090d0:	f1c0 0320 	rsb	r3, r0, #32
 80090d4:	280a      	cmp	r0, #10
 80090d6:	600b      	str	r3, [r1, #0]
 80090d8:	491e      	ldr	r1, [pc, #120]	; (8009154 <__b2d+0xa0>)
 80090da:	dc17      	bgt.n	800910c <__b2d+0x58>
 80090dc:	45c1      	cmp	r9, r8
 80090de:	bf28      	it	cs
 80090e0:	2200      	movcs	r2, #0
 80090e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80090e6:	fa26 f30c 	lsr.w	r3, r6, ip
 80090ea:	bf38      	it	cc
 80090ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80090f0:	ea43 0501 	orr.w	r5, r3, r1
 80090f4:	f100 0315 	add.w	r3, r0, #21
 80090f8:	fa06 f303 	lsl.w	r3, r6, r3
 80090fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8009100:	ea43 0402 	orr.w	r4, r3, r2
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910c:	45c1      	cmp	r9, r8
 800910e:	bf3a      	itte	cc
 8009110:	f1a7 0808 	subcc.w	r8, r7, #8
 8009114:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009118:	2200      	movcs	r2, #0
 800911a:	f1b0 030b 	subs.w	r3, r0, #11
 800911e:	d015      	beq.n	800914c <__b2d+0x98>
 8009120:	409e      	lsls	r6, r3
 8009122:	f1c3 0720 	rsb	r7, r3, #32
 8009126:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800912a:	fa22 f107 	lsr.w	r1, r2, r7
 800912e:	45c8      	cmp	r8, r9
 8009130:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009134:	ea46 0501 	orr.w	r5, r6, r1
 8009138:	bf94      	ite	ls
 800913a:	2100      	movls	r1, #0
 800913c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009140:	fa02 f003 	lsl.w	r0, r2, r3
 8009144:	40f9      	lsrs	r1, r7
 8009146:	ea40 0401 	orr.w	r4, r0, r1
 800914a:	e7db      	b.n	8009104 <__b2d+0x50>
 800914c:	ea46 0501 	orr.w	r5, r6, r1
 8009150:	4614      	mov	r4, r2
 8009152:	e7d7      	b.n	8009104 <__b2d+0x50>
 8009154:	3ff00000 	.word	0x3ff00000

08009158 <__d2b>:
 8009158:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800915c:	461c      	mov	r4, r3
 800915e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009162:	2101      	movs	r1, #1
 8009164:	4690      	mov	r8, r2
 8009166:	f7ff fcb6 	bl	8008ad6 <_Balloc>
 800916a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800916e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009172:	4607      	mov	r7, r0
 8009174:	bb34      	cbnz	r4, 80091c4 <__d2b+0x6c>
 8009176:	9201      	str	r2, [sp, #4]
 8009178:	f1b8 0200 	subs.w	r2, r8, #0
 800917c:	d027      	beq.n	80091ce <__d2b+0x76>
 800917e:	a802      	add	r0, sp, #8
 8009180:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009184:	f7ff fd8a 	bl	8008c9c <__lo0bits>
 8009188:	9900      	ldr	r1, [sp, #0]
 800918a:	b1f0      	cbz	r0, 80091ca <__d2b+0x72>
 800918c:	9a01      	ldr	r2, [sp, #4]
 800918e:	f1c0 0320 	rsb	r3, r0, #32
 8009192:	fa02 f303 	lsl.w	r3, r2, r3
 8009196:	430b      	orrs	r3, r1
 8009198:	40c2      	lsrs	r2, r0
 800919a:	617b      	str	r3, [r7, #20]
 800919c:	9201      	str	r2, [sp, #4]
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	bf14      	ite	ne
 80091a4:	2102      	movne	r1, #2
 80091a6:	2101      	moveq	r1, #1
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	6139      	str	r1, [r7, #16]
 80091ac:	b1c4      	cbz	r4, 80091e0 <__d2b+0x88>
 80091ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80091b2:	4404      	add	r4, r0
 80091b4:	6034      	str	r4, [r6, #0]
 80091b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80091ba:	6028      	str	r0, [r5, #0]
 80091bc:	4638      	mov	r0, r7
 80091be:	b002      	add	sp, #8
 80091c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80091c8:	e7d5      	b.n	8009176 <__d2b+0x1e>
 80091ca:	6179      	str	r1, [r7, #20]
 80091cc:	e7e7      	b.n	800919e <__d2b+0x46>
 80091ce:	a801      	add	r0, sp, #4
 80091d0:	f7ff fd64 	bl	8008c9c <__lo0bits>
 80091d4:	2101      	movs	r1, #1
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	6139      	str	r1, [r7, #16]
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	3020      	adds	r0, #32
 80091de:	e7e5      	b.n	80091ac <__d2b+0x54>
 80091e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80091e8:	6030      	str	r0, [r6, #0]
 80091ea:	6918      	ldr	r0, [r3, #16]
 80091ec:	f7ff fd37 	bl	8008c5e <__hi0bits>
 80091f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80091f4:	e7e1      	b.n	80091ba <__d2b+0x62>

080091f6 <__ratio>:
 80091f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fa:	4688      	mov	r8, r1
 80091fc:	4669      	mov	r1, sp
 80091fe:	4681      	mov	r9, r0
 8009200:	f7ff ff58 	bl	80090b4 <__b2d>
 8009204:	468b      	mov	fp, r1
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	4640      	mov	r0, r8
 800920c:	a901      	add	r1, sp, #4
 800920e:	f7ff ff51 	bl	80090b4 <__b2d>
 8009212:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009216:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800921a:	460d      	mov	r5, r1
 800921c:	eba3 0c02 	sub.w	ip, r3, r2
 8009220:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfd5      	itete	le
 800922e:	460a      	movle	r2, r1
 8009230:	463a      	movgt	r2, r7
 8009232:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009236:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800923a:	bfd8      	it	le
 800923c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009240:	462b      	mov	r3, r5
 8009242:	4602      	mov	r2, r0
 8009244:	4659      	mov	r1, fp
 8009246:	4630      	mov	r0, r6
 8009248:	f7f7 fa70 	bl	800072c <__aeabi_ddiv>
 800924c:	b003      	add	sp, #12
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009252 <__copybits>:
 8009252:	3901      	subs	r1, #1
 8009254:	b510      	push	{r4, lr}
 8009256:	1149      	asrs	r1, r1, #5
 8009258:	6914      	ldr	r4, [r2, #16]
 800925a:	3101      	adds	r1, #1
 800925c:	f102 0314 	add.w	r3, r2, #20
 8009260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009268:	42a3      	cmp	r3, r4
 800926a:	4602      	mov	r2, r0
 800926c:	d303      	bcc.n	8009276 <__copybits+0x24>
 800926e:	2300      	movs	r3, #0
 8009270:	428a      	cmp	r2, r1
 8009272:	d305      	bcc.n	8009280 <__copybits+0x2e>
 8009274:	bd10      	pop	{r4, pc}
 8009276:	f853 2b04 	ldr.w	r2, [r3], #4
 800927a:	f840 2b04 	str.w	r2, [r0], #4
 800927e:	e7f3      	b.n	8009268 <__copybits+0x16>
 8009280:	f842 3b04 	str.w	r3, [r2], #4
 8009284:	e7f4      	b.n	8009270 <__copybits+0x1e>

08009286 <__any_on>:
 8009286:	f100 0214 	add.w	r2, r0, #20
 800928a:	6900      	ldr	r0, [r0, #16]
 800928c:	114b      	asrs	r3, r1, #5
 800928e:	4298      	cmp	r0, r3
 8009290:	b510      	push	{r4, lr}
 8009292:	db11      	blt.n	80092b8 <__any_on+0x32>
 8009294:	dd0a      	ble.n	80092ac <__any_on+0x26>
 8009296:	f011 011f 	ands.w	r1, r1, #31
 800929a:	d007      	beq.n	80092ac <__any_on+0x26>
 800929c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80092a0:	fa24 f001 	lsr.w	r0, r4, r1
 80092a4:	fa00 f101 	lsl.w	r1, r0, r1
 80092a8:	428c      	cmp	r4, r1
 80092aa:	d10b      	bne.n	80092c4 <__any_on+0x3e>
 80092ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d803      	bhi.n	80092bc <__any_on+0x36>
 80092b4:	2000      	movs	r0, #0
 80092b6:	bd10      	pop	{r4, pc}
 80092b8:	4603      	mov	r3, r0
 80092ba:	e7f7      	b.n	80092ac <__any_on+0x26>
 80092bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80092c0:	2900      	cmp	r1, #0
 80092c2:	d0f5      	beq.n	80092b0 <__any_on+0x2a>
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7f6      	b.n	80092b6 <__any_on+0x30>

080092c8 <_calloc_r>:
 80092c8:	b538      	push	{r3, r4, r5, lr}
 80092ca:	fb02 f401 	mul.w	r4, r2, r1
 80092ce:	4621      	mov	r1, r4
 80092d0:	f000 f854 	bl	800937c <_malloc_r>
 80092d4:	4605      	mov	r5, r0
 80092d6:	b118      	cbz	r0, 80092e0 <_calloc_r+0x18>
 80092d8:	4622      	mov	r2, r4
 80092da:	2100      	movs	r1, #0
 80092dc:	f7fc ff90 	bl	8006200 <memset>
 80092e0:	4628      	mov	r0, r5
 80092e2:	bd38      	pop	{r3, r4, r5, pc}

080092e4 <_free_r>:
 80092e4:	b538      	push	{r3, r4, r5, lr}
 80092e6:	4605      	mov	r5, r0
 80092e8:	2900      	cmp	r1, #0
 80092ea:	d043      	beq.n	8009374 <_free_r+0x90>
 80092ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092f0:	1f0c      	subs	r4, r1, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	bfb8      	it	lt
 80092f6:	18e4      	addlt	r4, r4, r3
 80092f8:	f000 fa22 	bl	8009740 <__malloc_lock>
 80092fc:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <_free_r+0x94>)
 80092fe:	6813      	ldr	r3, [r2, #0]
 8009300:	4610      	mov	r0, r2
 8009302:	b933      	cbnz	r3, 8009312 <_free_r+0x2e>
 8009304:	6063      	str	r3, [r4, #4]
 8009306:	6014      	str	r4, [r2, #0]
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930e:	f000 ba18 	b.w	8009742 <__malloc_unlock>
 8009312:	42a3      	cmp	r3, r4
 8009314:	d90b      	bls.n	800932e <_free_r+0x4a>
 8009316:	6821      	ldr	r1, [r4, #0]
 8009318:	1862      	adds	r2, r4, r1
 800931a:	4293      	cmp	r3, r2
 800931c:	bf01      	itttt	eq
 800931e:	681a      	ldreq	r2, [r3, #0]
 8009320:	685b      	ldreq	r3, [r3, #4]
 8009322:	1852      	addeq	r2, r2, r1
 8009324:	6022      	streq	r2, [r4, #0]
 8009326:	6063      	str	r3, [r4, #4]
 8009328:	6004      	str	r4, [r0, #0]
 800932a:	e7ed      	b.n	8009308 <_free_r+0x24>
 800932c:	4613      	mov	r3, r2
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	b10a      	cbz	r2, 8009336 <_free_r+0x52>
 8009332:	42a2      	cmp	r2, r4
 8009334:	d9fa      	bls.n	800932c <_free_r+0x48>
 8009336:	6819      	ldr	r1, [r3, #0]
 8009338:	1858      	adds	r0, r3, r1
 800933a:	42a0      	cmp	r0, r4
 800933c:	d10b      	bne.n	8009356 <_free_r+0x72>
 800933e:	6820      	ldr	r0, [r4, #0]
 8009340:	4401      	add	r1, r0
 8009342:	1858      	adds	r0, r3, r1
 8009344:	4282      	cmp	r2, r0
 8009346:	6019      	str	r1, [r3, #0]
 8009348:	d1de      	bne.n	8009308 <_free_r+0x24>
 800934a:	6810      	ldr	r0, [r2, #0]
 800934c:	6852      	ldr	r2, [r2, #4]
 800934e:	4401      	add	r1, r0
 8009350:	6019      	str	r1, [r3, #0]
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	e7d8      	b.n	8009308 <_free_r+0x24>
 8009356:	d902      	bls.n	800935e <_free_r+0x7a>
 8009358:	230c      	movs	r3, #12
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	e7d4      	b.n	8009308 <_free_r+0x24>
 800935e:	6820      	ldr	r0, [r4, #0]
 8009360:	1821      	adds	r1, r4, r0
 8009362:	428a      	cmp	r2, r1
 8009364:	bf01      	itttt	eq
 8009366:	6811      	ldreq	r1, [r2, #0]
 8009368:	6852      	ldreq	r2, [r2, #4]
 800936a:	1809      	addeq	r1, r1, r0
 800936c:	6021      	streq	r1, [r4, #0]
 800936e:	6062      	str	r2, [r4, #4]
 8009370:	605c      	str	r4, [r3, #4]
 8009372:	e7c9      	b.n	8009308 <_free_r+0x24>
 8009374:	bd38      	pop	{r3, r4, r5, pc}
 8009376:	bf00      	nop
 8009378:	20000230 	.word	0x20000230

0800937c <_malloc_r>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	1ccd      	adds	r5, r1, #3
 8009380:	f025 0503 	bic.w	r5, r5, #3
 8009384:	3508      	adds	r5, #8
 8009386:	2d0c      	cmp	r5, #12
 8009388:	bf38      	it	cc
 800938a:	250c      	movcc	r5, #12
 800938c:	2d00      	cmp	r5, #0
 800938e:	4606      	mov	r6, r0
 8009390:	db01      	blt.n	8009396 <_malloc_r+0x1a>
 8009392:	42a9      	cmp	r1, r5
 8009394:	d903      	bls.n	800939e <_malloc_r+0x22>
 8009396:	230c      	movs	r3, #12
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	2000      	movs	r0, #0
 800939c:	bd70      	pop	{r4, r5, r6, pc}
 800939e:	f000 f9cf 	bl	8009740 <__malloc_lock>
 80093a2:	4a21      	ldr	r2, [pc, #132]	; (8009428 <_malloc_r+0xac>)
 80093a4:	6814      	ldr	r4, [r2, #0]
 80093a6:	4621      	mov	r1, r4
 80093a8:	b991      	cbnz	r1, 80093d0 <_malloc_r+0x54>
 80093aa:	4c20      	ldr	r4, [pc, #128]	; (800942c <_malloc_r+0xb0>)
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	b91b      	cbnz	r3, 80093b8 <_malloc_r+0x3c>
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 f98f 	bl	80096d4 <_sbrk_r>
 80093b6:	6020      	str	r0, [r4, #0]
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 f98a 	bl	80096d4 <_sbrk_r>
 80093c0:	1c43      	adds	r3, r0, #1
 80093c2:	d124      	bne.n	800940e <_malloc_r+0x92>
 80093c4:	230c      	movs	r3, #12
 80093c6:	4630      	mov	r0, r6
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	f000 f9ba 	bl	8009742 <__malloc_unlock>
 80093ce:	e7e4      	b.n	800939a <_malloc_r+0x1e>
 80093d0:	680b      	ldr	r3, [r1, #0]
 80093d2:	1b5b      	subs	r3, r3, r5
 80093d4:	d418      	bmi.n	8009408 <_malloc_r+0x8c>
 80093d6:	2b0b      	cmp	r3, #11
 80093d8:	d90f      	bls.n	80093fa <_malloc_r+0x7e>
 80093da:	600b      	str	r3, [r1, #0]
 80093dc:	18cc      	adds	r4, r1, r3
 80093de:	50cd      	str	r5, [r1, r3]
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 f9ae 	bl	8009742 <__malloc_unlock>
 80093e6:	f104 000b 	add.w	r0, r4, #11
 80093ea:	1d23      	adds	r3, r4, #4
 80093ec:	f020 0007 	bic.w	r0, r0, #7
 80093f0:	1ac3      	subs	r3, r0, r3
 80093f2:	d0d3      	beq.n	800939c <_malloc_r+0x20>
 80093f4:	425a      	negs	r2, r3
 80093f6:	50e2      	str	r2, [r4, r3]
 80093f8:	e7d0      	b.n	800939c <_malloc_r+0x20>
 80093fa:	684b      	ldr	r3, [r1, #4]
 80093fc:	428c      	cmp	r4, r1
 80093fe:	bf16      	itet	ne
 8009400:	6063      	strne	r3, [r4, #4]
 8009402:	6013      	streq	r3, [r2, #0]
 8009404:	460c      	movne	r4, r1
 8009406:	e7eb      	b.n	80093e0 <_malloc_r+0x64>
 8009408:	460c      	mov	r4, r1
 800940a:	6849      	ldr	r1, [r1, #4]
 800940c:	e7cc      	b.n	80093a8 <_malloc_r+0x2c>
 800940e:	1cc4      	adds	r4, r0, #3
 8009410:	f024 0403 	bic.w	r4, r4, #3
 8009414:	42a0      	cmp	r0, r4
 8009416:	d005      	beq.n	8009424 <_malloc_r+0xa8>
 8009418:	1a21      	subs	r1, r4, r0
 800941a:	4630      	mov	r0, r6
 800941c:	f000 f95a 	bl	80096d4 <_sbrk_r>
 8009420:	3001      	adds	r0, #1
 8009422:	d0cf      	beq.n	80093c4 <_malloc_r+0x48>
 8009424:	6025      	str	r5, [r4, #0]
 8009426:	e7db      	b.n	80093e0 <_malloc_r+0x64>
 8009428:	20000230 	.word	0x20000230
 800942c:	20000234 	.word	0x20000234

08009430 <__ssputs_r>:
 8009430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	688e      	ldr	r6, [r1, #8]
 8009436:	4682      	mov	sl, r0
 8009438:	429e      	cmp	r6, r3
 800943a:	460c      	mov	r4, r1
 800943c:	4690      	mov	r8, r2
 800943e:	4699      	mov	r9, r3
 8009440:	d837      	bhi.n	80094b2 <__ssputs_r+0x82>
 8009442:	898a      	ldrh	r2, [r1, #12]
 8009444:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009448:	d031      	beq.n	80094ae <__ssputs_r+0x7e>
 800944a:	2302      	movs	r3, #2
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	6909      	ldr	r1, [r1, #16]
 8009450:	1a6f      	subs	r7, r5, r1
 8009452:	6965      	ldr	r5, [r4, #20]
 8009454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009458:	fb95 f5f3 	sdiv	r5, r5, r3
 800945c:	f109 0301 	add.w	r3, r9, #1
 8009460:	443b      	add	r3, r7
 8009462:	429d      	cmp	r5, r3
 8009464:	bf38      	it	cc
 8009466:	461d      	movcc	r5, r3
 8009468:	0553      	lsls	r3, r2, #21
 800946a:	d530      	bpl.n	80094ce <__ssputs_r+0x9e>
 800946c:	4629      	mov	r1, r5
 800946e:	f7ff ff85 	bl	800937c <_malloc_r>
 8009472:	4606      	mov	r6, r0
 8009474:	b950      	cbnz	r0, 800948c <__ssputs_r+0x5c>
 8009476:	230c      	movs	r3, #12
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948c:	463a      	mov	r2, r7
 800948e:	6921      	ldr	r1, [r4, #16]
 8009490:	f7ff fb16 	bl	8008ac0 <memcpy>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800949a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949e:	81a3      	strh	r3, [r4, #12]
 80094a0:	6126      	str	r6, [r4, #16]
 80094a2:	443e      	add	r6, r7
 80094a4:	6026      	str	r6, [r4, #0]
 80094a6:	464e      	mov	r6, r9
 80094a8:	6165      	str	r5, [r4, #20]
 80094aa:	1bed      	subs	r5, r5, r7
 80094ac:	60a5      	str	r5, [r4, #8]
 80094ae:	454e      	cmp	r6, r9
 80094b0:	d900      	bls.n	80094b4 <__ssputs_r+0x84>
 80094b2:	464e      	mov	r6, r9
 80094b4:	4632      	mov	r2, r6
 80094b6:	4641      	mov	r1, r8
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	f000 f928 	bl	800970e <memmove>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	2000      	movs	r0, #0
 80094c2:	1b9b      	subs	r3, r3, r6
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	441e      	add	r6, r3
 80094ca:	6026      	str	r6, [r4, #0]
 80094cc:	e7dc      	b.n	8009488 <__ssputs_r+0x58>
 80094ce:	462a      	mov	r2, r5
 80094d0:	f000 f938 	bl	8009744 <_realloc_r>
 80094d4:	4606      	mov	r6, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1e2      	bne.n	80094a0 <__ssputs_r+0x70>
 80094da:	6921      	ldr	r1, [r4, #16]
 80094dc:	4650      	mov	r0, sl
 80094de:	f7ff ff01 	bl	80092e4 <_free_r>
 80094e2:	e7c8      	b.n	8009476 <__ssputs_r+0x46>

080094e4 <_svfiprintf_r>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	461d      	mov	r5, r3
 80094ea:	898b      	ldrh	r3, [r1, #12]
 80094ec:	b09d      	sub	sp, #116	; 0x74
 80094ee:	061f      	lsls	r7, r3, #24
 80094f0:	4680      	mov	r8, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4616      	mov	r6, r2
 80094f6:	d50f      	bpl.n	8009518 <_svfiprintf_r+0x34>
 80094f8:	690b      	ldr	r3, [r1, #16]
 80094fa:	b96b      	cbnz	r3, 8009518 <_svfiprintf_r+0x34>
 80094fc:	2140      	movs	r1, #64	; 0x40
 80094fe:	f7ff ff3d 	bl	800937c <_malloc_r>
 8009502:	6020      	str	r0, [r4, #0]
 8009504:	6120      	str	r0, [r4, #16]
 8009506:	b928      	cbnz	r0, 8009514 <_svfiprintf_r+0x30>
 8009508:	230c      	movs	r3, #12
 800950a:	f8c8 3000 	str.w	r3, [r8]
 800950e:	f04f 30ff 	mov.w	r0, #4294967295
 8009512:	e0c8      	b.n	80096a6 <_svfiprintf_r+0x1c2>
 8009514:	2340      	movs	r3, #64	; 0x40
 8009516:	6163      	str	r3, [r4, #20]
 8009518:	2300      	movs	r3, #0
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	2320      	movs	r3, #32
 800951e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009522:	2330      	movs	r3, #48	; 0x30
 8009524:	f04f 0b01 	mov.w	fp, #1
 8009528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952c:	9503      	str	r5, [sp, #12]
 800952e:	4637      	mov	r7, r6
 8009530:	463d      	mov	r5, r7
 8009532:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009536:	b10b      	cbz	r3, 800953c <_svfiprintf_r+0x58>
 8009538:	2b25      	cmp	r3, #37	; 0x25
 800953a:	d13e      	bne.n	80095ba <_svfiprintf_r+0xd6>
 800953c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009540:	d00b      	beq.n	800955a <_svfiprintf_r+0x76>
 8009542:	4653      	mov	r3, sl
 8009544:	4632      	mov	r2, r6
 8009546:	4621      	mov	r1, r4
 8009548:	4640      	mov	r0, r8
 800954a:	f7ff ff71 	bl	8009430 <__ssputs_r>
 800954e:	3001      	adds	r0, #1
 8009550:	f000 80a4 	beq.w	800969c <_svfiprintf_r+0x1b8>
 8009554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009556:	4453      	add	r3, sl
 8009558:	9309      	str	r3, [sp, #36]	; 0x24
 800955a:	783b      	ldrb	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 809d 	beq.w	800969c <_svfiprintf_r+0x1b8>
 8009562:	2300      	movs	r3, #0
 8009564:	f04f 32ff 	mov.w	r2, #4294967295
 8009568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	9307      	str	r3, [sp, #28]
 8009570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009574:	931a      	str	r3, [sp, #104]	; 0x68
 8009576:	462f      	mov	r7, r5
 8009578:	2205      	movs	r2, #5
 800957a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800957e:	4850      	ldr	r0, [pc, #320]	; (80096c0 <_svfiprintf_r+0x1dc>)
 8009580:	f7ff fa90 	bl	8008aa4 <memchr>
 8009584:	9b04      	ldr	r3, [sp, #16]
 8009586:	b9d0      	cbnz	r0, 80095be <_svfiprintf_r+0xda>
 8009588:	06d9      	lsls	r1, r3, #27
 800958a:	bf44      	itt	mi
 800958c:	2220      	movmi	r2, #32
 800958e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009592:	071a      	lsls	r2, r3, #28
 8009594:	bf44      	itt	mi
 8009596:	222b      	movmi	r2, #43	; 0x2b
 8009598:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800959c:	782a      	ldrb	r2, [r5, #0]
 800959e:	2a2a      	cmp	r2, #42	; 0x2a
 80095a0:	d015      	beq.n	80095ce <_svfiprintf_r+0xea>
 80095a2:	462f      	mov	r7, r5
 80095a4:	2000      	movs	r0, #0
 80095a6:	250a      	movs	r5, #10
 80095a8:	9a07      	ldr	r2, [sp, #28]
 80095aa:	4639      	mov	r1, r7
 80095ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b0:	3b30      	subs	r3, #48	; 0x30
 80095b2:	2b09      	cmp	r3, #9
 80095b4:	d94d      	bls.n	8009652 <_svfiprintf_r+0x16e>
 80095b6:	b1b8      	cbz	r0, 80095e8 <_svfiprintf_r+0x104>
 80095b8:	e00f      	b.n	80095da <_svfiprintf_r+0xf6>
 80095ba:	462f      	mov	r7, r5
 80095bc:	e7b8      	b.n	8009530 <_svfiprintf_r+0x4c>
 80095be:	4a40      	ldr	r2, [pc, #256]	; (80096c0 <_svfiprintf_r+0x1dc>)
 80095c0:	463d      	mov	r5, r7
 80095c2:	1a80      	subs	r0, r0, r2
 80095c4:	fa0b f000 	lsl.w	r0, fp, r0
 80095c8:	4318      	orrs	r0, r3
 80095ca:	9004      	str	r0, [sp, #16]
 80095cc:	e7d3      	b.n	8009576 <_svfiprintf_r+0x92>
 80095ce:	9a03      	ldr	r2, [sp, #12]
 80095d0:	1d11      	adds	r1, r2, #4
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	9103      	str	r1, [sp, #12]
 80095d6:	2a00      	cmp	r2, #0
 80095d8:	db01      	blt.n	80095de <_svfiprintf_r+0xfa>
 80095da:	9207      	str	r2, [sp, #28]
 80095dc:	e004      	b.n	80095e8 <_svfiprintf_r+0x104>
 80095de:	4252      	negs	r2, r2
 80095e0:	f043 0302 	orr.w	r3, r3, #2
 80095e4:	9207      	str	r2, [sp, #28]
 80095e6:	9304      	str	r3, [sp, #16]
 80095e8:	783b      	ldrb	r3, [r7, #0]
 80095ea:	2b2e      	cmp	r3, #46	; 0x2e
 80095ec:	d10c      	bne.n	8009608 <_svfiprintf_r+0x124>
 80095ee:	787b      	ldrb	r3, [r7, #1]
 80095f0:	2b2a      	cmp	r3, #42	; 0x2a
 80095f2:	d133      	bne.n	800965c <_svfiprintf_r+0x178>
 80095f4:	9b03      	ldr	r3, [sp, #12]
 80095f6:	3702      	adds	r7, #2
 80095f8:	1d1a      	adds	r2, r3, #4
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	9203      	str	r2, [sp, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	bfb8      	it	lt
 8009602:	f04f 33ff 	movlt.w	r3, #4294967295
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	4d2e      	ldr	r5, [pc, #184]	; (80096c4 <_svfiprintf_r+0x1e0>)
 800960a:	2203      	movs	r2, #3
 800960c:	7839      	ldrb	r1, [r7, #0]
 800960e:	4628      	mov	r0, r5
 8009610:	f7ff fa48 	bl	8008aa4 <memchr>
 8009614:	b138      	cbz	r0, 8009626 <_svfiprintf_r+0x142>
 8009616:	2340      	movs	r3, #64	; 0x40
 8009618:	1b40      	subs	r0, r0, r5
 800961a:	fa03 f000 	lsl.w	r0, r3, r0
 800961e:	9b04      	ldr	r3, [sp, #16]
 8009620:	3701      	adds	r7, #1
 8009622:	4303      	orrs	r3, r0
 8009624:	9304      	str	r3, [sp, #16]
 8009626:	7839      	ldrb	r1, [r7, #0]
 8009628:	2206      	movs	r2, #6
 800962a:	4827      	ldr	r0, [pc, #156]	; (80096c8 <_svfiprintf_r+0x1e4>)
 800962c:	1c7e      	adds	r6, r7, #1
 800962e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009632:	f7ff fa37 	bl	8008aa4 <memchr>
 8009636:	2800      	cmp	r0, #0
 8009638:	d038      	beq.n	80096ac <_svfiprintf_r+0x1c8>
 800963a:	4b24      	ldr	r3, [pc, #144]	; (80096cc <_svfiprintf_r+0x1e8>)
 800963c:	bb13      	cbnz	r3, 8009684 <_svfiprintf_r+0x1a0>
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	3307      	adds	r3, #7
 8009642:	f023 0307 	bic.w	r3, r3, #7
 8009646:	3308      	adds	r3, #8
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964c:	444b      	add	r3, r9
 800964e:	9309      	str	r3, [sp, #36]	; 0x24
 8009650:	e76d      	b.n	800952e <_svfiprintf_r+0x4a>
 8009652:	fb05 3202 	mla	r2, r5, r2, r3
 8009656:	2001      	movs	r0, #1
 8009658:	460f      	mov	r7, r1
 800965a:	e7a6      	b.n	80095aa <_svfiprintf_r+0xc6>
 800965c:	2300      	movs	r3, #0
 800965e:	250a      	movs	r5, #10
 8009660:	4619      	mov	r1, r3
 8009662:	3701      	adds	r7, #1
 8009664:	9305      	str	r3, [sp, #20]
 8009666:	4638      	mov	r0, r7
 8009668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800966c:	3a30      	subs	r2, #48	; 0x30
 800966e:	2a09      	cmp	r2, #9
 8009670:	d903      	bls.n	800967a <_svfiprintf_r+0x196>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0c8      	beq.n	8009608 <_svfiprintf_r+0x124>
 8009676:	9105      	str	r1, [sp, #20]
 8009678:	e7c6      	b.n	8009608 <_svfiprintf_r+0x124>
 800967a:	fb05 2101 	mla	r1, r5, r1, r2
 800967e:	2301      	movs	r3, #1
 8009680:	4607      	mov	r7, r0
 8009682:	e7f0      	b.n	8009666 <_svfiprintf_r+0x182>
 8009684:	ab03      	add	r3, sp, #12
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	4622      	mov	r2, r4
 800968a:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <_svfiprintf_r+0x1ec>)
 800968c:	a904      	add	r1, sp, #16
 800968e:	4640      	mov	r0, r8
 8009690:	f7fc fe50 	bl	8006334 <_printf_float>
 8009694:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009698:	4681      	mov	r9, r0
 800969a:	d1d6      	bne.n	800964a <_svfiprintf_r+0x166>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	065b      	lsls	r3, r3, #25
 80096a0:	f53f af35 	bmi.w	800950e <_svfiprintf_r+0x2a>
 80096a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a6:	b01d      	add	sp, #116	; 0x74
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	ab03      	add	r3, sp, #12
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	4622      	mov	r2, r4
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <_svfiprintf_r+0x1ec>)
 80096b4:	a904      	add	r1, sp, #16
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7fd f8e8 	bl	800688c <_printf_i>
 80096bc:	e7ea      	b.n	8009694 <_svfiprintf_r+0x1b0>
 80096be:	bf00      	nop
 80096c0:	08009b14 	.word	0x08009b14
 80096c4:	08009b1a 	.word	0x08009b1a
 80096c8:	08009b1e 	.word	0x08009b1e
 80096cc:	08006335 	.word	0x08006335
 80096d0:	08009431 	.word	0x08009431

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	2300      	movs	r3, #0
 80096d8:	4c05      	ldr	r4, [pc, #20]	; (80096f0 <_sbrk_r+0x1c>)
 80096da:	4605      	mov	r5, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	f7f9 fb36 	bl	8002d50 <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	602b      	str	r3, [r5, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	200013a0 	.word	0x200013a0

080096f4 <__ascii_wctomb>:
 80096f4:	b149      	cbz	r1, 800970a <__ascii_wctomb+0x16>
 80096f6:	2aff      	cmp	r2, #255	; 0xff
 80096f8:	bf8b      	itete	hi
 80096fa:	238a      	movhi	r3, #138	; 0x8a
 80096fc:	700a      	strbls	r2, [r1, #0]
 80096fe:	6003      	strhi	r3, [r0, #0]
 8009700:	2001      	movls	r0, #1
 8009702:	bf88      	it	hi
 8009704:	f04f 30ff 	movhi.w	r0, #4294967295
 8009708:	4770      	bx	lr
 800970a:	4608      	mov	r0, r1
 800970c:	4770      	bx	lr

0800970e <memmove>:
 800970e:	4288      	cmp	r0, r1
 8009710:	b510      	push	{r4, lr}
 8009712:	eb01 0302 	add.w	r3, r1, r2
 8009716:	d807      	bhi.n	8009728 <memmove+0x1a>
 8009718:	1e42      	subs	r2, r0, #1
 800971a:	4299      	cmp	r1, r3
 800971c:	d00a      	beq.n	8009734 <memmove+0x26>
 800971e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009722:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009726:	e7f8      	b.n	800971a <memmove+0xc>
 8009728:	4283      	cmp	r3, r0
 800972a:	d9f5      	bls.n	8009718 <memmove+0xa>
 800972c:	1881      	adds	r1, r0, r2
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	42d3      	cmn	r3, r2
 8009732:	d100      	bne.n	8009736 <memmove+0x28>
 8009734:	bd10      	pop	{r4, pc}
 8009736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800973a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800973e:	e7f7      	b.n	8009730 <memmove+0x22>

08009740 <__malloc_lock>:
 8009740:	4770      	bx	lr

08009742 <__malloc_unlock>:
 8009742:	4770      	bx	lr

08009744 <_realloc_r>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	4607      	mov	r7, r0
 8009748:	4614      	mov	r4, r2
 800974a:	460e      	mov	r6, r1
 800974c:	b921      	cbnz	r1, 8009758 <_realloc_r+0x14>
 800974e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009752:	4611      	mov	r1, r2
 8009754:	f7ff be12 	b.w	800937c <_malloc_r>
 8009758:	b922      	cbnz	r2, 8009764 <_realloc_r+0x20>
 800975a:	f7ff fdc3 	bl	80092e4 <_free_r>
 800975e:	4625      	mov	r5, r4
 8009760:	4628      	mov	r0, r5
 8009762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009764:	f000 f814 	bl	8009790 <_malloc_usable_size_r>
 8009768:	42a0      	cmp	r0, r4
 800976a:	d20f      	bcs.n	800978c <_realloc_r+0x48>
 800976c:	4621      	mov	r1, r4
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff fe04 	bl	800937c <_malloc_r>
 8009774:	4605      	mov	r5, r0
 8009776:	2800      	cmp	r0, #0
 8009778:	d0f2      	beq.n	8009760 <_realloc_r+0x1c>
 800977a:	4631      	mov	r1, r6
 800977c:	4622      	mov	r2, r4
 800977e:	f7ff f99f 	bl	8008ac0 <memcpy>
 8009782:	4631      	mov	r1, r6
 8009784:	4638      	mov	r0, r7
 8009786:	f7ff fdad 	bl	80092e4 <_free_r>
 800978a:	e7e9      	b.n	8009760 <_realloc_r+0x1c>
 800978c:	4635      	mov	r5, r6
 800978e:	e7e7      	b.n	8009760 <_realloc_r+0x1c>

08009790 <_malloc_usable_size_r>:
 8009790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009794:	1f18      	subs	r0, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	bfbc      	itt	lt
 800979a:	580b      	ldrlt	r3, [r1, r0]
 800979c:	18c0      	addlt	r0, r0, r3
 800979e:	4770      	bx	lr

080097a0 <_init>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

080097ac <_fini>:
 80097ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ae:	bf00      	nop
 80097b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097b2:	bc08      	pop	{r3}
 80097b4:	469e      	mov	lr, r3
 80097b6:	4770      	bx	lr
